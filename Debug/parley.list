
parley.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003180  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000554  0800328c  0800328c  0001328c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080037e0  080037e0  000200b0  2**0
                  CONTENTS
  4 .ARM          00000000  080037e0  080037e0  000200b0  2**0
                  CONTENTS
  5 .preinit_array 00000000  080037e0  080037e0  000200b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080037e0  080037e0  000137e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080037e4  080037e4  000137e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b0  20000000  080037e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000015c  200000b0  08003898  000200b0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000020c  08003898  0002020c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00005923  00000000  00000000  000200d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000134f  00000000  00000000  000259fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006a0  00000000  00000000  00026d50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000628  00000000  00000000  000273f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001711a  00000000  00000000  00027a18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000704d  00000000  00000000  0003eb32  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000829d4  00000000  00000000  00045b7f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000c8553  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001dac  00000000  00000000  000c85a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000b0 	.word	0x200000b0
 8000128:	00000000 	.word	0x00000000
 800012c:	08003274 	.word	0x08003274

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000b4 	.word	0x200000b4
 8000148:	08003274 	.word	0x08003274

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <validate_PIXYchecksum>:
* - getBlocks()																		*
*																					*
* When the checksum of the four functions are validated to be true and correct,		*
* proceed with getBlocks() to retrieve information regarding the coloured object	*
*************************************************************************************/
  bool validate_PIXYchecksum(){
 800015c:	b580      	push	{r7, lr}
 800015e:	b082      	sub	sp, #8
 8000160:	af00      	add	r7, sp, #0
      uint8_t checksumstateV, checksumstateR, checksumstateB, checksumstateG;
      uint16_t xval, zval;
      // x axis in left and right sideways, Z axis is away and near, with reference to PixyCam getBlocks()
      while (1){
          checksumstateV = getVersion();
 8000162:	f000 fc8f 	bl	8000a84 <getVersion>
 8000166:	4603      	mov	r3, r0
 8000168:	71fb      	strb	r3, [r7, #7]
          HAL_Delay(1);
 800016a:	2001      	movs	r0, #1
 800016c:	f001 fa72 	bl	8001654 <HAL_Delay>
          checksumstateR = getResolution();
 8000170:	f000 fd22 	bl	8000bb8 <getResolution>
 8000174:	4603      	mov	r3, r0
 8000176:	71bb      	strb	r3, [r7, #6]
          HAL_Delay(1);
 8000178:	2001      	movs	r0, #1
 800017a:	f001 fa6b 	bl	8001654 <HAL_Delay>
          checksumstateB = setCameraBrightness(100);
 800017e:	2064      	movs	r0, #100	; 0x64
 8000180:	f000 fd74 	bl	8000c6c <setCameraBrightness>
 8000184:	4603      	mov	r3, r0
 8000186:	717b      	strb	r3, [r7, #5]
          HAL_Delay(1);
 8000188:	2001      	movs	r0, #1
 800018a:	f001 fa63 	bl	8001654 <HAL_Delay>
          HAL_Delay(100);
 800018e:	2064      	movs	r0, #100	; 0x64
 8000190:	f001 fa60 	bl	8001654 <HAL_Delay>
          checksumstateG = getBlocks(1, 1);
 8000194:	2101      	movs	r1, #1
 8000196:	2001      	movs	r0, #1
 8000198:	f000 fdcc 	bl	8000d34 <getBlocks>
 800019c:	4603      	mov	r3, r0
 800019e:	713b      	strb	r3, [r7, #4]
          HAL_Delay(1);
 80001a0:	2001      	movs	r0, #1
 80001a2:	f001 fa57 	bl	8001654 <HAL_Delay>
          xval = X_BlkPix; // store initial state of x axis
 80001a6:	4b17      	ldr	r3, [pc, #92]	; (8000204 <validate_PIXYchecksum+0xa8>)
 80001a8:	881b      	ldrh	r3, [r3, #0]
 80001aa:	807b      	strh	r3, [r7, #2]
          zval = area;     // store initial state of z axis
 80001ac:	4b16      	ldr	r3, [pc, #88]	; (8000208 <validate_PIXYchecksum+0xac>)
 80001ae:	881b      	ldrh	r3, [r3, #0]
 80001b0:	803b      	strh	r3, [r7, #0]
          if(checksumstateV != 0){
 80001b2:	79fb      	ldrb	r3, [r7, #7]
 80001b4:	2b00      	cmp	r3, #0
 80001b6:	d002      	beq.n	80001be <validate_PIXYchecksum+0x62>
        	  myprint("getVersion function checksum VALIDATION FAILED\n");
 80001b8:	4814      	ldr	r0, [pc, #80]	; (800020c <validate_PIXYchecksum+0xb0>)
 80001ba:	f000 fb53 	bl	8000864 <myprint>
          }
          if(checksumstateR != 0){
 80001be:	79bb      	ldrb	r3, [r7, #6]
 80001c0:	2b00      	cmp	r3, #0
 80001c2:	d002      	beq.n	80001ca <validate_PIXYchecksum+0x6e>
        	  myprint("getResolution function checksum VALIDATION FAILED\n");
 80001c4:	4812      	ldr	r0, [pc, #72]	; (8000210 <validate_PIXYchecksum+0xb4>)
 80001c6:	f000 fb4d 	bl	8000864 <myprint>
          }
          if(checksumstateB != 0){
 80001ca:	797b      	ldrb	r3, [r7, #5]
 80001cc:	2b00      	cmp	r3, #0
 80001ce:	d002      	beq.n	80001d6 <validate_PIXYchecksum+0x7a>
        	  myprint("setCameraBrightness function checksum VALIDATION FAILED\n");
 80001d0:	4810      	ldr	r0, [pc, #64]	; (8000214 <validate_PIXYchecksum+0xb8>)
 80001d2:	f000 fb47 	bl	8000864 <myprint>
          }
          if(checksumstateG != 0){
 80001d6:	793b      	ldrb	r3, [r7, #4]
 80001d8:	2b00      	cmp	r3, #0
 80001da:	d002      	beq.n	80001e2 <validate_PIXYchecksum+0x86>
        	  myprint("getBlocks function checksum VALIDATION FAILED\n");
 80001dc:	480e      	ldr	r0, [pc, #56]	; (8000218 <validate_PIXYchecksum+0xbc>)
 80001de:	f000 fb41 	bl	8000864 <myprint>
          }
          if (checksumstateV == 0 && checksumstateR == 0 && checksumstateB == 0 && checksumstateG == 0){
 80001e2:	79fb      	ldrb	r3, [r7, #7]
 80001e4:	2b00      	cmp	r3, #0
 80001e6:	d1bc      	bne.n	8000162 <validate_PIXYchecksum+0x6>
 80001e8:	79bb      	ldrb	r3, [r7, #6]
 80001ea:	2b00      	cmp	r3, #0
 80001ec:	d1b9      	bne.n	8000162 <validate_PIXYchecksum+0x6>
 80001ee:	797b      	ldrb	r3, [r7, #5]
 80001f0:	2b00      	cmp	r3, #0
 80001f2:	d1b6      	bne.n	8000162 <validate_PIXYchecksum+0x6>
 80001f4:	793b      	ldrb	r3, [r7, #4]
 80001f6:	2b00      	cmp	r3, #0
 80001f8:	d1b3      	bne.n	8000162 <validate_PIXYchecksum+0x6>
              return true;
 80001fa:	2301      	movs	r3, #1
          }
      }
  }
 80001fc:	4618      	mov	r0, r3
 80001fe:	3708      	adds	r7, #8
 8000200:	46bd      	mov	sp, r7
 8000202:	bd80      	pop	{r7, pc}
 8000204:	200001dc 	.word	0x200001dc
 8000208:	200001e4 	.word	0x200001e4
 800020c:	0800328c 	.word	0x0800328c
 8000210:	080032bc 	.word	0x080032bc
 8000214:	080032f0 	.word	0x080032f0
 8000218:	0800332c 	.word	0x0800332c

0800021c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800021c:	b580      	push	{r7, lr}
 800021e:	b082      	sub	sp, #8
 8000220:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000222:	f001 f9b5 	bl	8001590 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000226:	f000 fefb 	bl	8001020 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800022a:	f000 ffb9 	bl	80011a0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800022e:	f000 ff63 	bl	80010f8 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8000232:	f000 ff37 	bl	80010a4 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8000236:	f000 ff89 	bl	800114c <MX_USART3_UART_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  // Validate PixyCam checksum, if true proceed to main loop
  if(validate_PIXYchecksum()){
 800023a:	f7ff ff8f 	bl	800015c <validate_PIXYchecksum>
 800023e:	4603      	mov	r3, r0
 8000240:	2b00      	cmp	r3, #0
 8000242:	f000 820d 	beq.w	8000660 <main+0x444>

	  while(1)//infinite main loop
	  {

		getBlocks(1,1);
 8000246:	2101      	movs	r1, #1
 8000248:	2001      	movs	r0, #1
 800024a:	f000 fd73 	bl	8000d34 <getBlocks>

		// Wait till a valid area of the object is detected
		while(!area)
 800024e:	e003      	b.n	8000258 <main+0x3c>
		{
			// Get current values of position of coloured object
			getBlocks(1,1);
 8000250:	2101      	movs	r1, #1
 8000252:	2001      	movs	r0, #1
 8000254:	f000 fd6e 	bl	8000d34 <getBlocks>
		while(!area)
 8000258:	4b99      	ldr	r3, [pc, #612]	; (80004c0 <main+0x2a4>)
 800025a:	881b      	ldrh	r3, [r3, #0]
 800025c:	2b00      	cmp	r3, #0
 800025e:	d0f7      	beq.n	8000250 <main+0x34>

		}
		uint16_t zbdiff =(zval/100*5);
 8000260:	4b98      	ldr	r3, [pc, #608]	; (80004c4 <main+0x2a8>)
 8000262:	881b      	ldrh	r3, [r3, #0]
 8000264:	4a98      	ldr	r2, [pc, #608]	; (80004c8 <main+0x2ac>)
 8000266:	fba2 2303 	umull	r2, r3, r2, r3
 800026a:	095b      	lsrs	r3, r3, #5
 800026c:	b29b      	uxth	r3, r3
 800026e:	461a      	mov	r2, r3
 8000270:	0092      	lsls	r2, r2, #2
 8000272:	4413      	add	r3, r2
 8000274:	80fb      	strh	r3, [r7, #6]
		uint16_t zdiff =(zval/100*20);//5% buffer
 8000276:	4b93      	ldr	r3, [pc, #588]	; (80004c4 <main+0x2a8>)
 8000278:	881b      	ldrh	r3, [r3, #0]
 800027a:	4a93      	ldr	r2, [pc, #588]	; (80004c8 <main+0x2ac>)
 800027c:	fba2 2303 	umull	r2, r3, r2, r3
 8000280:	095b      	lsrs	r3, r3, #5
 8000282:	b29b      	uxth	r3, r3
 8000284:	461a      	mov	r2, r3
 8000286:	0092      	lsls	r2, r2, #2
 8000288:	4413      	add	r3, r2
 800028a:	009b      	lsls	r3, r3, #2
 800028c:	80bb      	strh	r3, [r7, #4]
		xstate = X_BlkPix>(xval+xdiff)?1:X_BlkPix<(xval-xdiff)?-1:0;//store xval state, buffer of 5 units
 800028e:	4b8f      	ldr	r3, [pc, #572]	; (80004cc <main+0x2b0>)
 8000290:	881b      	ldrh	r3, [r3, #0]
 8000292:	461a      	mov	r2, r3
 8000294:	4b8e      	ldr	r3, [pc, #568]	; (80004d0 <main+0x2b4>)
 8000296:	881b      	ldrh	r3, [r3, #0]
 8000298:	4619      	mov	r1, r3
 800029a:	2314      	movs	r3, #20
 800029c:	440b      	add	r3, r1
 800029e:	429a      	cmp	r2, r3
 80002a0:	dc0e      	bgt.n	80002c0 <main+0xa4>
 80002a2:	4b8a      	ldr	r3, [pc, #552]	; (80004cc <main+0x2b0>)
 80002a4:	881b      	ldrh	r3, [r3, #0]
 80002a6:	461a      	mov	r2, r3
 80002a8:	4b89      	ldr	r3, [pc, #548]	; (80004d0 <main+0x2b4>)
 80002aa:	881b      	ldrh	r3, [r3, #0]
 80002ac:	4619      	mov	r1, r3
 80002ae:	2314      	movs	r3, #20
 80002b0:	1acb      	subs	r3, r1, r3
 80002b2:	429a      	cmp	r2, r3
 80002b4:	da02      	bge.n	80002bc <main+0xa0>
 80002b6:	f04f 33ff 	mov.w	r3, #4294967295
 80002ba:	e002      	b.n	80002c2 <main+0xa6>
 80002bc:	2300      	movs	r3, #0
 80002be:	e000      	b.n	80002c2 <main+0xa6>
 80002c0:	2301      	movs	r3, #1
 80002c2:	4a84      	ldr	r2, [pc, #528]	; (80004d4 <main+0x2b8>)
 80002c4:	7013      	strb	r3, [r2, #0]
		zstate = area>(zval+(zbdiff))?1:(area<(zval-(zdiff))?-1:0);//store zval state
 80002c6:	4b7e      	ldr	r3, [pc, #504]	; (80004c0 <main+0x2a4>)
 80002c8:	881b      	ldrh	r3, [r3, #0]
 80002ca:	461a      	mov	r2, r3
 80002cc:	4b7d      	ldr	r3, [pc, #500]	; (80004c4 <main+0x2a8>)
 80002ce:	881b      	ldrh	r3, [r3, #0]
 80002d0:	4619      	mov	r1, r3
 80002d2:	88fb      	ldrh	r3, [r7, #6]
 80002d4:	440b      	add	r3, r1
 80002d6:	429a      	cmp	r2, r3
 80002d8:	dc0e      	bgt.n	80002f8 <main+0xdc>
 80002da:	4b79      	ldr	r3, [pc, #484]	; (80004c0 <main+0x2a4>)
 80002dc:	881b      	ldrh	r3, [r3, #0]
 80002de:	461a      	mov	r2, r3
 80002e0:	4b78      	ldr	r3, [pc, #480]	; (80004c4 <main+0x2a8>)
 80002e2:	881b      	ldrh	r3, [r3, #0]
 80002e4:	4619      	mov	r1, r3
 80002e6:	88bb      	ldrh	r3, [r7, #4]
 80002e8:	1acb      	subs	r3, r1, r3
 80002ea:	429a      	cmp	r2, r3
 80002ec:	da02      	bge.n	80002f4 <main+0xd8>
 80002ee:	f04f 33ff 	mov.w	r3, #4294967295
 80002f2:	e002      	b.n	80002fa <main+0xde>
 80002f4:	2300      	movs	r3, #0
 80002f6:	e000      	b.n	80002fa <main+0xde>
 80002f8:	2301      	movs	r3, #1
 80002fa:	4a77      	ldr	r2, [pc, #476]	; (80004d8 <main+0x2bc>)
 80002fc:	7013      	strb	r3, [r2, #0]
		 * 	Variables review and tmp is to ensure smooth transition when algorithm is  *
		 *	switching between position states of the coloured object by ensuring       *
		 *	speed is set to zero before executing the respective movement commands     *
		 *******************************************************************************/
		// When the coloured object is moving away from the front of lite-kit
		if(zstate == -1 && xstate == 0) //x going left and z in bigger
 80002fe:	4b76      	ldr	r3, [pc, #472]	; (80004d8 <main+0x2bc>)
 8000300:	f993 3000 	ldrsb.w	r3, [r3]
 8000304:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000308:	d126      	bne.n	8000358 <main+0x13c>
 800030a:	4b72      	ldr	r3, [pc, #456]	; (80004d4 <main+0x2b8>)
 800030c:	f993 3000 	ldrsb.w	r3, [r3]
 8000310:	2b00      	cmp	r3, #0
 8000312:	d121      	bne.n	8000358 <main+0x13c>
		{
			review = 1;
 8000314:	4b71      	ldr	r3, [pc, #452]	; (80004dc <main+0x2c0>)
 8000316:	2201      	movs	r2, #1
 8000318:	701a      	strb	r2, [r3, #0]
			if(review!=tmp)
 800031a:	4b70      	ldr	r3, [pc, #448]	; (80004dc <main+0x2c0>)
 800031c:	781a      	ldrb	r2, [r3, #0]
 800031e:	4b70      	ldr	r3, [pc, #448]	; (80004e0 <main+0x2c4>)
 8000320:	781b      	ldrb	r3, [r3, #0]
 8000322:	429a      	cmp	r2, r3
 8000324:	d009      	beq.n	800033a <main+0x11e>
			{
				do
				{
					speed--;
 8000326:	4b6f      	ldr	r3, [pc, #444]	; (80004e4 <main+0x2c8>)
 8000328:	781b      	ldrb	r3, [r3, #0]
 800032a:	3b01      	subs	r3, #1
 800032c:	b2da      	uxtb	r2, r3
 800032e:	4b6d      	ldr	r3, [pc, #436]	; (80004e4 <main+0x2c8>)
 8000330:	701a      	strb	r2, [r3, #0]
				}while(speed>0);
 8000332:	4b6c      	ldr	r3, [pc, #432]	; (80004e4 <main+0x2c8>)
 8000334:	781b      	ldrb	r3, [r3, #0]
 8000336:	2b00      	cmp	r3, #0
 8000338:	d1f5      	bne.n	8000326 <main+0x10a>
			}
			tmp = review;
 800033a:	4b68      	ldr	r3, [pc, #416]	; (80004dc <main+0x2c0>)
 800033c:	781a      	ldrb	r2, [r3, #0]
 800033e:	4b68      	ldr	r3, [pc, #416]	; (80004e0 <main+0x2c4>)
 8000340:	701a      	strb	r2, [r3, #0]
			myprint("forward\n");
 8000342:	4869      	ldr	r0, [pc, #420]	; (80004e8 <main+0x2cc>)
 8000344:	f000 fa8e 	bl	8000864 <myprint>
			fspeed(); // set speed
 8000348:	f000 fa3c 	bl	80007c4 <fspeed>
			movel(fwd, cycle);//send direction and for 10 times
 800034c:	2302      	movs	r3, #2
 800034e:	4619      	mov	r1, r3
 8000350:	4866      	ldr	r0, [pc, #408]	; (80004ec <main+0x2d0>)
 8000352:	f000 f9a5 	bl	80006a0 <movel>
 8000356:	e17f      	b.n	8000658 <main+0x43c>
		}

		// When the coloured object is moving right and away from the front of lite-kit
		else if(zstate == -1 && xstate == 1)
 8000358:	4b5f      	ldr	r3, [pc, #380]	; (80004d8 <main+0x2bc>)
 800035a:	f993 3000 	ldrsb.w	r3, [r3]
 800035e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000362:	d126      	bne.n	80003b2 <main+0x196>
 8000364:	4b5b      	ldr	r3, [pc, #364]	; (80004d4 <main+0x2b8>)
 8000366:	f993 3000 	ldrsb.w	r3, [r3]
 800036a:	2b01      	cmp	r3, #1
 800036c:	d121      	bne.n	80003b2 <main+0x196>
		{
			review = 2;
 800036e:	4b5b      	ldr	r3, [pc, #364]	; (80004dc <main+0x2c0>)
 8000370:	2202      	movs	r2, #2
 8000372:	701a      	strb	r2, [r3, #0]
			if(review!=tmp)
 8000374:	4b59      	ldr	r3, [pc, #356]	; (80004dc <main+0x2c0>)
 8000376:	781a      	ldrb	r2, [r3, #0]
 8000378:	4b59      	ldr	r3, [pc, #356]	; (80004e0 <main+0x2c4>)
 800037a:	781b      	ldrb	r3, [r3, #0]
 800037c:	429a      	cmp	r2, r3
 800037e:	d009      	beq.n	8000394 <main+0x178>
			{
				do
				{
					speed--;
 8000380:	4b58      	ldr	r3, [pc, #352]	; (80004e4 <main+0x2c8>)
 8000382:	781b      	ldrb	r3, [r3, #0]
 8000384:	3b01      	subs	r3, #1
 8000386:	b2da      	uxtb	r2, r3
 8000388:	4b56      	ldr	r3, [pc, #344]	; (80004e4 <main+0x2c8>)
 800038a:	701a      	strb	r2, [r3, #0]
				}while(speed>0);
 800038c:	4b55      	ldr	r3, [pc, #340]	; (80004e4 <main+0x2c8>)
 800038e:	781b      	ldrb	r3, [r3, #0]
 8000390:	2b00      	cmp	r3, #0
 8000392:	d1f5      	bne.n	8000380 <main+0x164>
			}
			tmp = review;
 8000394:	4b51      	ldr	r3, [pc, #324]	; (80004dc <main+0x2c0>)
 8000396:	781a      	ldrb	r2, [r3, #0]
 8000398:	4b51      	ldr	r3, [pc, #324]	; (80004e0 <main+0x2c4>)
 800039a:	701a      	strb	r2, [r3, #0]
			myprint("top right\n");
 800039c:	4854      	ldr	r0, [pc, #336]	; (80004f0 <main+0x2d4>)
 800039e:	f000 fa61 	bl	8000864 <myprint>
			rspeed();// set speed
 80003a2:	f000 f9bf 	bl	8000724 <rspeed>
			movel(tright, cycle);//send direction and for 10 times
 80003a6:	2302      	movs	r3, #2
 80003a8:	4619      	mov	r1, r3
 80003aa:	4852      	ldr	r0, [pc, #328]	; (80004f4 <main+0x2d8>)
 80003ac:	f000 f978 	bl	80006a0 <movel>
 80003b0:	e152      	b.n	8000658 <main+0x43c>
		}
		// When the coloured object is moving towards the front of lite-kit
		else if(zstate == 1 && xstate == 0)
 80003b2:	4b49      	ldr	r3, [pc, #292]	; (80004d8 <main+0x2bc>)
 80003b4:	f993 3000 	ldrsb.w	r3, [r3]
 80003b8:	2b01      	cmp	r3, #1
 80003ba:	d126      	bne.n	800040a <main+0x1ee>
 80003bc:	4b45      	ldr	r3, [pc, #276]	; (80004d4 <main+0x2b8>)
 80003be:	f993 3000 	ldrsb.w	r3, [r3]
 80003c2:	2b00      	cmp	r3, #0
 80003c4:	d121      	bne.n	800040a <main+0x1ee>
		{
			review = 3;
 80003c6:	4b45      	ldr	r3, [pc, #276]	; (80004dc <main+0x2c0>)
 80003c8:	2203      	movs	r2, #3
 80003ca:	701a      	strb	r2, [r3, #0]
	//		speed=review!=tmp?0:speed;
			if(review!=tmp)
 80003cc:	4b43      	ldr	r3, [pc, #268]	; (80004dc <main+0x2c0>)
 80003ce:	781a      	ldrb	r2, [r3, #0]
 80003d0:	4b43      	ldr	r3, [pc, #268]	; (80004e0 <main+0x2c4>)
 80003d2:	781b      	ldrb	r3, [r3, #0]
 80003d4:	429a      	cmp	r2, r3
 80003d6:	d009      	beq.n	80003ec <main+0x1d0>
			{
				do
				{
					speed--;
 80003d8:	4b42      	ldr	r3, [pc, #264]	; (80004e4 <main+0x2c8>)
 80003da:	781b      	ldrb	r3, [r3, #0]
 80003dc:	3b01      	subs	r3, #1
 80003de:	b2da      	uxtb	r2, r3
 80003e0:	4b40      	ldr	r3, [pc, #256]	; (80004e4 <main+0x2c8>)
 80003e2:	701a      	strb	r2, [r3, #0]
				}while(speed>0);
 80003e4:	4b3f      	ldr	r3, [pc, #252]	; (80004e4 <main+0x2c8>)
 80003e6:	781b      	ldrb	r3, [r3, #0]
 80003e8:	2b00      	cmp	r3, #0
 80003ea:	d1f5      	bne.n	80003d8 <main+0x1bc>
			}
			tmp = review;
 80003ec:	4b3b      	ldr	r3, [pc, #236]	; (80004dc <main+0x2c0>)
 80003ee:	781a      	ldrb	r2, [r3, #0]
 80003f0:	4b3b      	ldr	r3, [pc, #236]	; (80004e0 <main+0x2c4>)
 80003f2:	701a      	strb	r2, [r3, #0]
			myprint("backwards\n");
 80003f4:	4840      	ldr	r0, [pc, #256]	; (80004f8 <main+0x2dc>)
 80003f6:	f000 fa35 	bl	8000864 <myprint>
			bspeed();// set speed
 80003fa:	f000 fa0b 	bl	8000814 <bspeed>
			movel(bck, cycle);//send direction and for 10 times
 80003fe:	2302      	movs	r3, #2
 8000400:	4619      	mov	r1, r3
 8000402:	483e      	ldr	r0, [pc, #248]	; (80004fc <main+0x2e0>)
 8000404:	f000 f94c 	bl	80006a0 <movel>
 8000408:	e126      	b.n	8000658 <main+0x43c>
		}
		// When the coloured object is moving left and away from the front of lite-kit
		else if(zstate == -1 && xstate ==-1)
 800040a:	4b33      	ldr	r3, [pc, #204]	; (80004d8 <main+0x2bc>)
 800040c:	f993 3000 	ldrsb.w	r3, [r3]
 8000410:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000414:	d127      	bne.n	8000466 <main+0x24a>
 8000416:	4b2f      	ldr	r3, [pc, #188]	; (80004d4 <main+0x2b8>)
 8000418:	f993 3000 	ldrsb.w	r3, [r3]
 800041c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000420:	d121      	bne.n	8000466 <main+0x24a>
		{
			review = 4;
 8000422:	4b2e      	ldr	r3, [pc, #184]	; (80004dc <main+0x2c0>)
 8000424:	2204      	movs	r2, #4
 8000426:	701a      	strb	r2, [r3, #0]
			if(review!=tmp)
 8000428:	4b2c      	ldr	r3, [pc, #176]	; (80004dc <main+0x2c0>)
 800042a:	781a      	ldrb	r2, [r3, #0]
 800042c:	4b2c      	ldr	r3, [pc, #176]	; (80004e0 <main+0x2c4>)
 800042e:	781b      	ldrb	r3, [r3, #0]
 8000430:	429a      	cmp	r2, r3
 8000432:	d009      	beq.n	8000448 <main+0x22c>
			{
				do
				{
					speed--;
 8000434:	4b2b      	ldr	r3, [pc, #172]	; (80004e4 <main+0x2c8>)
 8000436:	781b      	ldrb	r3, [r3, #0]
 8000438:	3b01      	subs	r3, #1
 800043a:	b2da      	uxtb	r2, r3
 800043c:	4b29      	ldr	r3, [pc, #164]	; (80004e4 <main+0x2c8>)
 800043e:	701a      	strb	r2, [r3, #0]
				}while(speed>0);
 8000440:	4b28      	ldr	r3, [pc, #160]	; (80004e4 <main+0x2c8>)
 8000442:	781b      	ldrb	r3, [r3, #0]
 8000444:	2b00      	cmp	r3, #0
 8000446:	d1f5      	bne.n	8000434 <main+0x218>
			}
			tmp = review;
 8000448:	4b24      	ldr	r3, [pc, #144]	; (80004dc <main+0x2c0>)
 800044a:	781a      	ldrb	r2, [r3, #0]
 800044c:	4b24      	ldr	r3, [pc, #144]	; (80004e0 <main+0x2c4>)
 800044e:	701a      	strb	r2, [r3, #0]
			myprint("top left\n");
 8000450:	482b      	ldr	r0, [pc, #172]	; (8000500 <main+0x2e4>)
 8000452:	f000 fa07 	bl	8000864 <myprint>
			lspeed();// set speed
 8000456:	f000 f98d 	bl	8000774 <lspeed>
			movel(tleft, cycle);//send direction and for 10 times
 800045a:	2302      	movs	r3, #2
 800045c:	4619      	mov	r1, r3
 800045e:	4829      	ldr	r0, [pc, #164]	; (8000504 <main+0x2e8>)
 8000460:	f000 f91e 	bl	80006a0 <movel>
 8000464:	e0f8      	b.n	8000658 <main+0x43c>
		}
		// When the coloured object is moving left and towards the front of lite-kit
		else if(zstate == 1 && xstate ==-1)
 8000466:	4b1c      	ldr	r3, [pc, #112]	; (80004d8 <main+0x2bc>)
 8000468:	f993 3000 	ldrsb.w	r3, [r3]
 800046c:	2b01      	cmp	r3, #1
 800046e:	d14f      	bne.n	8000510 <main+0x2f4>
 8000470:	4b18      	ldr	r3, [pc, #96]	; (80004d4 <main+0x2b8>)
 8000472:	f993 3000 	ldrsb.w	r3, [r3]
 8000476:	f1b3 3fff 	cmp.w	r3, #4294967295
 800047a:	d149      	bne.n	8000510 <main+0x2f4>
		{
			review = 5;
 800047c:	4b17      	ldr	r3, [pc, #92]	; (80004dc <main+0x2c0>)
 800047e:	2205      	movs	r2, #5
 8000480:	701a      	strb	r2, [r3, #0]
			if(review!=tmp)
 8000482:	4b16      	ldr	r3, [pc, #88]	; (80004dc <main+0x2c0>)
 8000484:	781a      	ldrb	r2, [r3, #0]
 8000486:	4b16      	ldr	r3, [pc, #88]	; (80004e0 <main+0x2c4>)
 8000488:	781b      	ldrb	r3, [r3, #0]
 800048a:	429a      	cmp	r2, r3
 800048c:	d009      	beq.n	80004a2 <main+0x286>
			{
				do
				{
					speed--;
 800048e:	4b15      	ldr	r3, [pc, #84]	; (80004e4 <main+0x2c8>)
 8000490:	781b      	ldrb	r3, [r3, #0]
 8000492:	3b01      	subs	r3, #1
 8000494:	b2da      	uxtb	r2, r3
 8000496:	4b13      	ldr	r3, [pc, #76]	; (80004e4 <main+0x2c8>)
 8000498:	701a      	strb	r2, [r3, #0]
				}while(speed>0);
 800049a:	4b12      	ldr	r3, [pc, #72]	; (80004e4 <main+0x2c8>)
 800049c:	781b      	ldrb	r3, [r3, #0]
 800049e:	2b00      	cmp	r3, #0
 80004a0:	d1f5      	bne.n	800048e <main+0x272>
			}
			tmp = review;
 80004a2:	4b0e      	ldr	r3, [pc, #56]	; (80004dc <main+0x2c0>)
 80004a4:	781a      	ldrb	r2, [r3, #0]
 80004a6:	4b0e      	ldr	r3, [pc, #56]	; (80004e0 <main+0x2c4>)
 80004a8:	701a      	strb	r2, [r3, #0]
			myprint("bottom left\n");
 80004aa:	4817      	ldr	r0, [pc, #92]	; (8000508 <main+0x2ec>)
 80004ac:	f000 f9da 	bl	8000864 <myprint>
			lspeed();// set speed
 80004b0:	f000 f960 	bl	8000774 <lspeed>
			movel(bleft, cycle);//send direction and for 10 times
 80004b4:	2302      	movs	r3, #2
 80004b6:	4619      	mov	r1, r3
 80004b8:	4814      	ldr	r0, [pc, #80]	; (800050c <main+0x2f0>)
 80004ba:	f000 f8f1 	bl	80006a0 <movel>
 80004be:	e0cb      	b.n	8000658 <main+0x43c>
 80004c0:	200001e4 	.word	0x200001e4
 80004c4:	200001e6 	.word	0x200001e6
 80004c8:	51eb851f 	.word	0x51eb851f
 80004cc:	200001dc 	.word	0x200001dc
 80004d0:	200001e8 	.word	0x200001e8
 80004d4:	200001ea 	.word	0x200001ea
 80004d8:	200001eb 	.word	0x200001eb
 80004dc:	200001f2 	.word	0x200001f2
 80004e0:	200001f1 	.word	0x200001f1
 80004e4:	200001f0 	.word	0x200001f0
 80004e8:	0800335c 	.word	0x0800335c
 80004ec:	2000001c 	.word	0x2000001c
 80004f0:	08003368 	.word	0x08003368
 80004f4:	20000030 	.word	0x20000030
 80004f8:	08003374 	.word	0x08003374
 80004fc:	20000020 	.word	0x20000020
 8000500:	08003380 	.word	0x08003380
 8000504:	2000002c 	.word	0x2000002c
 8000508:	0800338c 	.word	0x0800338c
 800050c:	20000034 	.word	0x20000034
		}
		// When the coloured object is moving right and towards the front of lite-kit
		else if(zstate == 1 && xstate == 1)
 8000510:	4b56      	ldr	r3, [pc, #344]	; (800066c <main+0x450>)
 8000512:	f993 3000 	ldrsb.w	r3, [r3]
 8000516:	2b01      	cmp	r3, #1
 8000518:	d126      	bne.n	8000568 <main+0x34c>
 800051a:	4b55      	ldr	r3, [pc, #340]	; (8000670 <main+0x454>)
 800051c:	f993 3000 	ldrsb.w	r3, [r3]
 8000520:	2b01      	cmp	r3, #1
 8000522:	d121      	bne.n	8000568 <main+0x34c>
		{
			review = 6;
 8000524:	4b53      	ldr	r3, [pc, #332]	; (8000674 <main+0x458>)
 8000526:	2206      	movs	r2, #6
 8000528:	701a      	strb	r2, [r3, #0]
			if(review!=tmp)
 800052a:	4b52      	ldr	r3, [pc, #328]	; (8000674 <main+0x458>)
 800052c:	781a      	ldrb	r2, [r3, #0]
 800052e:	4b52      	ldr	r3, [pc, #328]	; (8000678 <main+0x45c>)
 8000530:	781b      	ldrb	r3, [r3, #0]
 8000532:	429a      	cmp	r2, r3
 8000534:	d009      	beq.n	800054a <main+0x32e>
			{
				do
				{
					speed--;
 8000536:	4b51      	ldr	r3, [pc, #324]	; (800067c <main+0x460>)
 8000538:	781b      	ldrb	r3, [r3, #0]
 800053a:	3b01      	subs	r3, #1
 800053c:	b2da      	uxtb	r2, r3
 800053e:	4b4f      	ldr	r3, [pc, #316]	; (800067c <main+0x460>)
 8000540:	701a      	strb	r2, [r3, #0]
				}while(speed>0);
 8000542:	4b4e      	ldr	r3, [pc, #312]	; (800067c <main+0x460>)
 8000544:	781b      	ldrb	r3, [r3, #0]
 8000546:	2b00      	cmp	r3, #0
 8000548:	d1f5      	bne.n	8000536 <main+0x31a>
			}
			tmp = review;
 800054a:	4b4a      	ldr	r3, [pc, #296]	; (8000674 <main+0x458>)
 800054c:	781a      	ldrb	r2, [r3, #0]
 800054e:	4b4a      	ldr	r3, [pc, #296]	; (8000678 <main+0x45c>)
 8000550:	701a      	strb	r2, [r3, #0]
			myprint("bottom right\n");
 8000552:	484b      	ldr	r0, [pc, #300]	; (8000680 <main+0x464>)
 8000554:	f000 f986 	bl	8000864 <myprint>
			rspeed();// set speed
 8000558:	f000 f8e4 	bl	8000724 <rspeed>
			movel(bright, cycle);//send direction and for 10 times
 800055c:	2302      	movs	r3, #2
 800055e:	4619      	mov	r1, r3
 8000560:	4848      	ldr	r0, [pc, #288]	; (8000684 <main+0x468>)
 8000562:	f000 f89d 	bl	80006a0 <movel>
 8000566:	e077      	b.n	8000658 <main+0x43c>
		}
		// When the coloured object is moving right sideways
		else if(zstate == 0 && xstate == 1)
 8000568:	4b40      	ldr	r3, [pc, #256]	; (800066c <main+0x450>)
 800056a:	f993 3000 	ldrsb.w	r3, [r3]
 800056e:	2b00      	cmp	r3, #0
 8000570:	d126      	bne.n	80005c0 <main+0x3a4>
 8000572:	4b3f      	ldr	r3, [pc, #252]	; (8000670 <main+0x454>)
 8000574:	f993 3000 	ldrsb.w	r3, [r3]
 8000578:	2b01      	cmp	r3, #1
 800057a:	d121      	bne.n	80005c0 <main+0x3a4>
		{
			review = 7;
 800057c:	4b3d      	ldr	r3, [pc, #244]	; (8000674 <main+0x458>)
 800057e:	2207      	movs	r2, #7
 8000580:	701a      	strb	r2, [r3, #0]
			if(review!=tmp)
 8000582:	4b3c      	ldr	r3, [pc, #240]	; (8000674 <main+0x458>)
 8000584:	781a      	ldrb	r2, [r3, #0]
 8000586:	4b3c      	ldr	r3, [pc, #240]	; (8000678 <main+0x45c>)
 8000588:	781b      	ldrb	r3, [r3, #0]
 800058a:	429a      	cmp	r2, r3
 800058c:	d009      	beq.n	80005a2 <main+0x386>
			{
				do
				{
					speed--;
 800058e:	4b3b      	ldr	r3, [pc, #236]	; (800067c <main+0x460>)
 8000590:	781b      	ldrb	r3, [r3, #0]
 8000592:	3b01      	subs	r3, #1
 8000594:	b2da      	uxtb	r2, r3
 8000596:	4b39      	ldr	r3, [pc, #228]	; (800067c <main+0x460>)
 8000598:	701a      	strb	r2, [r3, #0]
				}while(speed>0);
 800059a:	4b38      	ldr	r3, [pc, #224]	; (800067c <main+0x460>)
 800059c:	781b      	ldrb	r3, [r3, #0]
 800059e:	2b00      	cmp	r3, #0
 80005a0:	d1f5      	bne.n	800058e <main+0x372>
			}
			tmp = review;
 80005a2:	4b34      	ldr	r3, [pc, #208]	; (8000674 <main+0x458>)
 80005a4:	781a      	ldrb	r2, [r3, #0]
 80005a6:	4b34      	ldr	r3, [pc, #208]	; (8000678 <main+0x45c>)
 80005a8:	701a      	strb	r2, [r3, #0]
			myprint("side right\n");
 80005aa:	4837      	ldr	r0, [pc, #220]	; (8000688 <main+0x46c>)
 80005ac:	f000 f95a 	bl	8000864 <myprint>
			rspeed();// set speed
 80005b0:	f000 f8b8 	bl	8000724 <rspeed>
			movel(sright, cycle);//send direction and for 10 times
 80005b4:	2302      	movs	r3, #2
 80005b6:	4619      	mov	r1, r3
 80005b8:	4834      	ldr	r0, [pc, #208]	; (800068c <main+0x470>)
 80005ba:	f000 f871 	bl	80006a0 <movel>
 80005be:	e04b      	b.n	8000658 <main+0x43c>
	//		movex(sright);
		}
		// When the coloured object is moving left sideways
		else if(zstate == 0 && xstate == -1)
 80005c0:	4b2a      	ldr	r3, [pc, #168]	; (800066c <main+0x450>)
 80005c2:	f993 3000 	ldrsb.w	r3, [r3]
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d127      	bne.n	800061a <main+0x3fe>
 80005ca:	4b29      	ldr	r3, [pc, #164]	; (8000670 <main+0x454>)
 80005cc:	f993 3000 	ldrsb.w	r3, [r3]
 80005d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80005d4:	d121      	bne.n	800061a <main+0x3fe>
		{
			review = 8;
 80005d6:	4b27      	ldr	r3, [pc, #156]	; (8000674 <main+0x458>)
 80005d8:	2208      	movs	r2, #8
 80005da:	701a      	strb	r2, [r3, #0]
			if(review!=tmp)
 80005dc:	4b25      	ldr	r3, [pc, #148]	; (8000674 <main+0x458>)
 80005de:	781a      	ldrb	r2, [r3, #0]
 80005e0:	4b25      	ldr	r3, [pc, #148]	; (8000678 <main+0x45c>)
 80005e2:	781b      	ldrb	r3, [r3, #0]
 80005e4:	429a      	cmp	r2, r3
 80005e6:	d009      	beq.n	80005fc <main+0x3e0>
			{
				do
				{
					speed--;
 80005e8:	4b24      	ldr	r3, [pc, #144]	; (800067c <main+0x460>)
 80005ea:	781b      	ldrb	r3, [r3, #0]
 80005ec:	3b01      	subs	r3, #1
 80005ee:	b2da      	uxtb	r2, r3
 80005f0:	4b22      	ldr	r3, [pc, #136]	; (800067c <main+0x460>)
 80005f2:	701a      	strb	r2, [r3, #0]
				}while(speed>0);
 80005f4:	4b21      	ldr	r3, [pc, #132]	; (800067c <main+0x460>)
 80005f6:	781b      	ldrb	r3, [r3, #0]
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d1f5      	bne.n	80005e8 <main+0x3cc>
			}
			tmp = review;
 80005fc:	4b1d      	ldr	r3, [pc, #116]	; (8000674 <main+0x458>)
 80005fe:	781a      	ldrb	r2, [r3, #0]
 8000600:	4b1d      	ldr	r3, [pc, #116]	; (8000678 <main+0x45c>)
 8000602:	701a      	strb	r2, [r3, #0]
			myprint("side left\n");
 8000604:	4822      	ldr	r0, [pc, #136]	; (8000690 <main+0x474>)
 8000606:	f000 f92d 	bl	8000864 <myprint>
			lspeed();// set speed
 800060a:	f000 f8b3 	bl	8000774 <lspeed>
			movel(sleft, cycle);//send direction and for 10 times
 800060e:	2302      	movs	r3, #2
 8000610:	4619      	mov	r1, r3
 8000612:	4820      	ldr	r0, [pc, #128]	; (8000694 <main+0x478>)
 8000614:	f000 f844 	bl	80006a0 <movel>
 8000618:	e01e      	b.n	8000658 <main+0x43c>
		}
		// When the coloured object stops moving, lite-kit stops
		else
		{
			review = 9;
 800061a:	4b16      	ldr	r3, [pc, #88]	; (8000674 <main+0x458>)
 800061c:	2209      	movs	r2, #9
 800061e:	701a      	strb	r2, [r3, #0]
			if(review!=tmp)
 8000620:	4b14      	ldr	r3, [pc, #80]	; (8000674 <main+0x458>)
 8000622:	781a      	ldrb	r2, [r3, #0]
 8000624:	4b14      	ldr	r3, [pc, #80]	; (8000678 <main+0x45c>)
 8000626:	781b      	ldrb	r3, [r3, #0]
 8000628:	429a      	cmp	r2, r3
 800062a:	d009      	beq.n	8000640 <main+0x424>
			{
				do
				{
					speed--;
 800062c:	4b13      	ldr	r3, [pc, #76]	; (800067c <main+0x460>)
 800062e:	781b      	ldrb	r3, [r3, #0]
 8000630:	3b01      	subs	r3, #1
 8000632:	b2da      	uxtb	r2, r3
 8000634:	4b11      	ldr	r3, [pc, #68]	; (800067c <main+0x460>)
 8000636:	701a      	strb	r2, [r3, #0]
				}while(speed>0);
 8000638:	4b10      	ldr	r3, [pc, #64]	; (800067c <main+0x460>)
 800063a:	781b      	ldrb	r3, [r3, #0]
 800063c:	2b00      	cmp	r3, #0
 800063e:	d1f5      	bne.n	800062c <main+0x410>
			}
			tmp = review;
 8000640:	4b0c      	ldr	r3, [pc, #48]	; (8000674 <main+0x458>)
 8000642:	781a      	ldrb	r2, [r3, #0]
 8000644:	4b0c      	ldr	r3, [pc, #48]	; (8000678 <main+0x45c>)
 8000646:	701a      	strb	r2, [r3, #0]
			myprint("stop\n");
 8000648:	4813      	ldr	r0, [pc, #76]	; (8000698 <main+0x47c>)
 800064a:	f000 f90b 	bl	8000864 <myprint>
			movel(stop, cycle);//send direction and for 10 times
 800064e:	2302      	movs	r3, #2
 8000650:	4619      	mov	r1, r3
 8000652:	4812      	ldr	r0, [pc, #72]	; (800069c <main+0x480>)
 8000654:	f000 f824 	bl	80006a0 <movel>
			// no speed required
		}
		HAL_Delay(5);
 8000658:	2005      	movs	r0, #5
 800065a:	f000 fffb 	bl	8001654 <HAL_Delay>
	  {
 800065e:	e5f2      	b.n	8000246 <main+0x2a>
 8000660:	2300      	movs	r3, #0
	  }

	}
}
 8000662:	4618      	mov	r0, r3
 8000664:	3708      	adds	r7, #8
 8000666:	46bd      	mov	sp, r7
 8000668:	bd80      	pop	{r7, pc}
 800066a:	bf00      	nop
 800066c:	200001eb 	.word	0x200001eb
 8000670:	200001ea 	.word	0x200001ea
 8000674:	200001f2 	.word	0x200001f2
 8000678:	200001f1 	.word	0x200001f1
 800067c:	200001f0 	.word	0x200001f0
 8000680:	0800339c 	.word	0x0800339c
 8000684:	20000038 	.word	0x20000038
 8000688:	080033ac 	.word	0x080033ac
 800068c:	20000028 	.word	0x20000028
 8000690:	080033b8 	.word	0x080033b8
 8000694:	20000024 	.word	0x20000024
 8000698:	080033c4 	.word	0x080033c4
 800069c:	2000003c 	.word	0x2000003c

080006a0 <movel>:
		HAL_Delay(20);
		HAL_UART_Transmit(&huart1, move, sizeof(move), 100);
	}
}
int movel(uint8_t* move, int duration)//movel is move long, used for all other movements
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b084      	sub	sp, #16
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	6078      	str	r0, [r7, #4]
 80006a8:	6039      	str	r1, [r7, #0]
	move[2] = speed; //store speed
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	3302      	adds	r3, #2
 80006ae:	4a1b      	ldr	r2, [pc, #108]	; (800071c <movel+0x7c>)
 80006b0:	7812      	ldrb	r2, [r2, #0]
 80006b2:	701a      	strb	r2, [r3, #0]
	move[3] = move[0] + move[1] + move[2];//store check sum by addition as total val is below 255
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	781a      	ldrb	r2, [r3, #0]
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	3301      	adds	r3, #1
 80006bc:	781b      	ldrb	r3, [r3, #0]
 80006be:	4413      	add	r3, r2
 80006c0:	b2d9      	uxtb	r1, r3
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	3302      	adds	r3, #2
 80006c6:	781a      	ldrb	r2, [r3, #0]
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	3303      	adds	r3, #3
 80006cc:	440a      	add	r2, r1
 80006ce:	b2d2      	uxtb	r2, r2
 80006d0:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i<duration;)//loop for
 80006d2:	2300      	movs	r3, #0
 80006d4:	60fb      	str	r3, [r7, #12]
 80006d6:	e017      	b.n	8000708 <movel+0x68>
	{
		HAL_Delay(1);
 80006d8:	2001      	movs	r0, #1
 80006da:	f000 ffbb 	bl	8001654 <HAL_Delay>
		uint8_t state = 0x0E; //initial state is notok aka ntok
 80006de:	230e      	movs	r3, #14
 80006e0:	72fb      	strb	r3, [r7, #11]
		HAL_UART_Receive(&huart1, &state, sizeof(state), 10); //receive and store
 80006e2:	f107 010b 	add.w	r1, r7, #11
 80006e6:	230a      	movs	r3, #10
 80006e8:	2201      	movs	r2, #1
 80006ea:	480d      	ldr	r0, [pc, #52]	; (8000720 <movel+0x80>)
 80006ec:	f001 ff9b 	bl	8002626 <HAL_UART_Receive>
		HAL_UART_Transmit(&huart1, move, sizeof(move), 10);//transmit movement to comm2control
 80006f0:	230a      	movs	r3, #10
 80006f2:	2204      	movs	r2, #4
 80006f4:	6879      	ldr	r1, [r7, #4]
 80006f6:	480a      	ldr	r0, [pc, #40]	; (8000720 <movel+0x80>)
 80006f8:	f001 ff03 	bl	8002502 <HAL_UART_Transmit>
		if(state == 0x0F)//check state so that transmission only occurs when no obstacle
 80006fc:	7afb      	ldrb	r3, [r7, #11]
 80006fe:	2b0f      	cmp	r3, #15
 8000700:	d102      	bne.n	8000708 <movel+0x68>
		{
			i++; //increment only if transmitted
 8000702:	68fb      	ldr	r3, [r7, #12]
 8000704:	3301      	adds	r3, #1
 8000706:	60fb      	str	r3, [r7, #12]
	for(int i = 0; i<duration;)//loop for
 8000708:	68fa      	ldr	r2, [r7, #12]
 800070a:	683b      	ldr	r3, [r7, #0]
 800070c:	429a      	cmp	r2, r3
 800070e:	dbe3      	blt.n	80006d8 <movel+0x38>
		}
	}
	return 1;
 8000710:	2301      	movs	r3, #1
}
 8000712:	4618      	mov	r0, r3
 8000714:	3710      	adds	r7, #16
 8000716:	46bd      	mov	sp, r7
 8000718:	bd80      	pop	{r7, pc}
 800071a:	bf00      	nop
 800071c:	200001f0 	.word	0x200001f0
 8000720:	200000cc 	.word	0x200000cc

08000724 <rspeed>:
	tspeed = 0;
	return 1;
}

void rspeed(void)//right speed calculation
{
 8000724:	b480      	push	{r7}
 8000726:	af00      	add	r7, sp, #0
	//can be multipled with other values to get different value for testing
	//speed = 10;//(((X_BlkPix - xval)/10)*10 - xdiff);//calculate change for acceleration
	if(X_BlkPix>xval)
 8000728:	4b0f      	ldr	r3, [pc, #60]	; (8000768 <rspeed+0x44>)
 800072a:	881a      	ldrh	r2, [r3, #0]
 800072c:	4b0f      	ldr	r3, [pc, #60]	; (800076c <rspeed+0x48>)
 800072e:	881b      	ldrh	r3, [r3, #0]
 8000730:	429a      	cmp	r2, r3
 8000732:	d906      	bls.n	8000742 <rspeed+0x1e>
	{
		speed+=2;
 8000734:	4b0e      	ldr	r3, [pc, #56]	; (8000770 <rspeed+0x4c>)
 8000736:	781b      	ldrb	r3, [r3, #0]
 8000738:	3302      	adds	r3, #2
 800073a:	b2da      	uxtb	r2, r3
 800073c:	4b0c      	ldr	r3, [pc, #48]	; (8000770 <rspeed+0x4c>)
 800073e:	701a      	strb	r2, [r3, #0]
 8000740:	e005      	b.n	800074e <rspeed+0x2a>
	}
	else// if(X_BlkPix<xval)
	{
		speed-=2;
 8000742:	4b0b      	ldr	r3, [pc, #44]	; (8000770 <rspeed+0x4c>)
 8000744:	781b      	ldrb	r3, [r3, #0]
 8000746:	3b02      	subs	r3, #2
 8000748:	b2da      	uxtb	r2, r3
 800074a:	4b09      	ldr	r3, [pc, #36]	; (8000770 <rspeed+0x4c>)
 800074c:	701a      	strb	r2, [r3, #0]
	}
	speed = speed>speedcap?speedcap:speed;//cap speed at 30
 800074e:	4b08      	ldr	r3, [pc, #32]	; (8000770 <rspeed+0x4c>)
 8000750:	781b      	ldrb	r3, [r3, #0]
 8000752:	221e      	movs	r2, #30
 8000754:	4293      	cmp	r3, r2
 8000756:	bf28      	it	cs
 8000758:	4613      	movcs	r3, r2
 800075a:	b2da      	uxtb	r2, r3
 800075c:	4b04      	ldr	r3, [pc, #16]	; (8000770 <rspeed+0x4c>)
 800075e:	701a      	strb	r2, [r3, #0]
	//should implement if case for speed to = 0;
}
 8000760:	bf00      	nop
 8000762:	46bd      	mov	sp, r7
 8000764:	bc80      	pop	{r7}
 8000766:	4770      	bx	lr
 8000768:	200001dc 	.word	0x200001dc
 800076c:	200001e8 	.word	0x200001e8
 8000770:	200001f0 	.word	0x200001f0

08000774 <lspeed>:
void lspeed(void)//left speed calculation
{
 8000774:	b480      	push	{r7}
 8000776:	af00      	add	r7, sp, #0
//	speed = 10;//(((xval - X_BlkPix)/10)*10-xdiff);//calculate change for acceleration
	if(X_BlkPix<xval)
 8000778:	4b0f      	ldr	r3, [pc, #60]	; (80007b8 <lspeed+0x44>)
 800077a:	881a      	ldrh	r2, [r3, #0]
 800077c:	4b0f      	ldr	r3, [pc, #60]	; (80007bc <lspeed+0x48>)
 800077e:	881b      	ldrh	r3, [r3, #0]
 8000780:	429a      	cmp	r2, r3
 8000782:	d206      	bcs.n	8000792 <lspeed+0x1e>
	{
		speed+=2;
 8000784:	4b0e      	ldr	r3, [pc, #56]	; (80007c0 <lspeed+0x4c>)
 8000786:	781b      	ldrb	r3, [r3, #0]
 8000788:	3302      	adds	r3, #2
 800078a:	b2da      	uxtb	r2, r3
 800078c:	4b0c      	ldr	r3, [pc, #48]	; (80007c0 <lspeed+0x4c>)
 800078e:	701a      	strb	r2, [r3, #0]
 8000790:	e005      	b.n	800079e <lspeed+0x2a>
	}
	else// if(X_BlkPix>xval)
	{
		speed-=2;
 8000792:	4b0b      	ldr	r3, [pc, #44]	; (80007c0 <lspeed+0x4c>)
 8000794:	781b      	ldrb	r3, [r3, #0]
 8000796:	3b02      	subs	r3, #2
 8000798:	b2da      	uxtb	r2, r3
 800079a:	4b09      	ldr	r3, [pc, #36]	; (80007c0 <lspeed+0x4c>)
 800079c:	701a      	strb	r2, [r3, #0]
	}
	speed = speed>speedcap?speedcap:speed;//cap speed at 30
 800079e:	4b08      	ldr	r3, [pc, #32]	; (80007c0 <lspeed+0x4c>)
 80007a0:	781b      	ldrb	r3, [r3, #0]
 80007a2:	221e      	movs	r2, #30
 80007a4:	4293      	cmp	r3, r2
 80007a6:	bf28      	it	cs
 80007a8:	4613      	movcs	r3, r2
 80007aa:	b2da      	uxtb	r2, r3
 80007ac:	4b04      	ldr	r3, [pc, #16]	; (80007c0 <lspeed+0x4c>)
 80007ae:	701a      	strb	r2, [r3, #0]
}
 80007b0:	bf00      	nop
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bc80      	pop	{r7}
 80007b6:	4770      	bx	lr
 80007b8:	200001dc 	.word	0x200001dc
 80007bc:	200001e8 	.word	0x200001e8
 80007c0:	200001f0 	.word	0x200001f0

080007c4 <fspeed>:
void fspeed(void)//front speed calculation
{
 80007c4:	b480      	push	{r7}
 80007c6:	af00      	add	r7, sp, #0
//	speed = 10;//((zval - area)/area) * 20;//calculate change for acceleration
	if(area<zval)
 80007c8:	4b0f      	ldr	r3, [pc, #60]	; (8000808 <fspeed+0x44>)
 80007ca:	881a      	ldrh	r2, [r3, #0]
 80007cc:	4b0f      	ldr	r3, [pc, #60]	; (800080c <fspeed+0x48>)
 80007ce:	881b      	ldrh	r3, [r3, #0]
 80007d0:	429a      	cmp	r2, r3
 80007d2:	d206      	bcs.n	80007e2 <fspeed+0x1e>
	{
		speed+=2;
 80007d4:	4b0e      	ldr	r3, [pc, #56]	; (8000810 <fspeed+0x4c>)
 80007d6:	781b      	ldrb	r3, [r3, #0]
 80007d8:	3302      	adds	r3, #2
 80007da:	b2da      	uxtb	r2, r3
 80007dc:	4b0c      	ldr	r3, [pc, #48]	; (8000810 <fspeed+0x4c>)
 80007de:	701a      	strb	r2, [r3, #0]
 80007e0:	e005      	b.n	80007ee <fspeed+0x2a>
	}
	else// if(area>zval)
	{
		speed-=2;
 80007e2:	4b0b      	ldr	r3, [pc, #44]	; (8000810 <fspeed+0x4c>)
 80007e4:	781b      	ldrb	r3, [r3, #0]
 80007e6:	3b02      	subs	r3, #2
 80007e8:	b2da      	uxtb	r2, r3
 80007ea:	4b09      	ldr	r3, [pc, #36]	; (8000810 <fspeed+0x4c>)
 80007ec:	701a      	strb	r2, [r3, #0]
	}
	speed = speed>speedcap?speedcap:speed;//cap speed at 30
 80007ee:	4b08      	ldr	r3, [pc, #32]	; (8000810 <fspeed+0x4c>)
 80007f0:	781b      	ldrb	r3, [r3, #0]
 80007f2:	221e      	movs	r2, #30
 80007f4:	4293      	cmp	r3, r2
 80007f6:	bf28      	it	cs
 80007f8:	4613      	movcs	r3, r2
 80007fa:	b2da      	uxtb	r2, r3
 80007fc:	4b04      	ldr	r3, [pc, #16]	; (8000810 <fspeed+0x4c>)
 80007fe:	701a      	strb	r2, [r3, #0]
}
 8000800:	bf00      	nop
 8000802:	46bd      	mov	sp, r7
 8000804:	bc80      	pop	{r7}
 8000806:	4770      	bx	lr
 8000808:	200001e4 	.word	0x200001e4
 800080c:	200001e6 	.word	0x200001e6
 8000810:	200001f0 	.word	0x200001f0

08000814 <bspeed>:
void bspeed(void)//Back speed calculation
{
 8000814:	b480      	push	{r7}
 8000816:	af00      	add	r7, sp, #0
	if(area>zval)
 8000818:	4b0f      	ldr	r3, [pc, #60]	; (8000858 <bspeed+0x44>)
 800081a:	881a      	ldrh	r2, [r3, #0]
 800081c:	4b0f      	ldr	r3, [pc, #60]	; (800085c <bspeed+0x48>)
 800081e:	881b      	ldrh	r3, [r3, #0]
 8000820:	429a      	cmp	r2, r3
 8000822:	d906      	bls.n	8000832 <bspeed+0x1e>
	{
		speed+=2;
 8000824:	4b0e      	ldr	r3, [pc, #56]	; (8000860 <bspeed+0x4c>)
 8000826:	781b      	ldrb	r3, [r3, #0]
 8000828:	3302      	adds	r3, #2
 800082a:	b2da      	uxtb	r2, r3
 800082c:	4b0c      	ldr	r3, [pc, #48]	; (8000860 <bspeed+0x4c>)
 800082e:	701a      	strb	r2, [r3, #0]
 8000830:	e005      	b.n	800083e <bspeed+0x2a>
	}
	else// if(area<zval)
	{
		speed-=2;
 8000832:	4b0b      	ldr	r3, [pc, #44]	; (8000860 <bspeed+0x4c>)
 8000834:	781b      	ldrb	r3, [r3, #0]
 8000836:	3b02      	subs	r3, #2
 8000838:	b2da      	uxtb	r2, r3
 800083a:	4b09      	ldr	r3, [pc, #36]	; (8000860 <bspeed+0x4c>)
 800083c:	701a      	strb	r2, [r3, #0]
	}
//	speed = 10;//((area - zval)/zval) * 20;//calculate change for acceleration
	speed = speed>speedcap?speedcap:speed;//cap speed at 30
 800083e:	4b08      	ldr	r3, [pc, #32]	; (8000860 <bspeed+0x4c>)
 8000840:	781b      	ldrb	r3, [r3, #0]
 8000842:	221e      	movs	r2, #30
 8000844:	4293      	cmp	r3, r2
 8000846:	bf28      	it	cs
 8000848:	4613      	movcs	r3, r2
 800084a:	b2da      	uxtb	r2, r3
 800084c:	4b04      	ldr	r3, [pc, #16]	; (8000860 <bspeed+0x4c>)
 800084e:	701a      	strb	r2, [r3, #0]
}
 8000850:	bf00      	nop
 8000852:	46bd      	mov	sp, r7
 8000854:	bc80      	pop	{r7}
 8000856:	4770      	bx	lr
 8000858:	200001e4 	.word	0x200001e4
 800085c:	200001e6 	.word	0x200001e6
 8000860:	200001f0 	.word	0x200001f0

08000864 <myprint>:
/*******************************************************************************
 * 	PRINT CHAR FUNCTION DESCRIPTION:									   	   *
 * 	Prints a string of maximum 50 characters								   *
 *******************************************************************************/
void myprint(char *str)//print a sting of max 50 char
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b090      	sub	sp, #64	; 0x40
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]
	char print[50] = {'\0'}; // buffer
 800086c:	2300      	movs	r3, #0
 800086e:	60fb      	str	r3, [r7, #12]
 8000870:	f107 0310 	add.w	r3, r7, #16
 8000874:	222e      	movs	r2, #46	; 0x2e
 8000876:	2100      	movs	r1, #0
 8000878:	4618      	mov	r0, r3
 800087a:	f002 f879 	bl	8002970 <memset>
	sprintf(print, "%s", str);
 800087e:	f107 030c 	add.w	r3, r7, #12
 8000882:	687a      	ldr	r2, [r7, #4]
 8000884:	490a      	ldr	r1, [pc, #40]	; (80008b0 <myprint+0x4c>)
 8000886:	4618      	mov	r0, r3
 8000888:	f002 f87a 	bl	8002980 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t *)print, strlen(print), 100);
 800088c:	f107 030c 	add.w	r3, r7, #12
 8000890:	4618      	mov	r0, r3
 8000892:	f7ff fc5b 	bl	800014c <strlen>
 8000896:	4603      	mov	r3, r0
 8000898:	b29a      	uxth	r2, r3
 800089a:	f107 010c 	add.w	r1, r7, #12
 800089e:	2364      	movs	r3, #100	; 0x64
 80008a0:	4804      	ldr	r0, [pc, #16]	; (80008b4 <myprint+0x50>)
 80008a2:	f001 fe2e 	bl	8002502 <HAL_UART_Transmit>

}
 80008a6:	bf00      	nop
 80008a8:	3740      	adds	r7, #64	; 0x40
 80008aa:	46bd      	mov	sp, r7
 80008ac:	bd80      	pop	{r7, pc}
 80008ae:	bf00      	nop
 80008b0:	080033cc 	.word	0x080033cc
 80008b4:	20000110 	.word	0x20000110

080008b8 <print_KANYEdata>:
/*******************************************************************************
 * 	PRINT unsigned int and char FUNCTION DESCRIPTION:						   *
 * 	Print char and uint16_t												       *
 * 	DIS BE COOL LIKE KANYE ALL OF THE LIGHTS ALL OF THE LIGHTS WHOOP WHOOP	   *
 *******************************************************************************/
void print_KANYEdata(void* data, int data_type){
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b090      	sub	sp, #64	; 0x40
 80008bc:	af00      	add	r7, sp, #0
 80008be:	6078      	str	r0, [r7, #4]
 80008c0:	6039      	str	r1, [r7, #0]
    char print[50] = {'\0'};
 80008c2:	2300      	movs	r3, #0
 80008c4:	60fb      	str	r3, [r7, #12]
 80008c6:	f107 0310 	add.w	r3, r7, #16
 80008ca:	222e      	movs	r2, #46	; 0x2e
 80008cc:	2100      	movs	r1, #0
 80008ce:	4618      	mov	r0, r3
 80008d0:	f002 f84e 	bl	8002970 <memset>
    if (data_type == DATA_STRING){
 80008d4:	683b      	ldr	r3, [r7, #0]
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d107      	bne.n	80008ea <print_KANYEdata+0x32>
        sprintf(print, "%s", (char*)data);
 80008da:	f107 030c 	add.w	r3, r7, #12
 80008de:	687a      	ldr	r2, [r7, #4]
 80008e0:	4917      	ldr	r1, [pc, #92]	; (8000940 <print_KANYEdata+0x88>)
 80008e2:	4618      	mov	r0, r3
 80008e4:	f002 f84c 	bl	8002980 <siprintf>
 80008e8:	e018      	b.n	800091c <print_KANYEdata+0x64>
    }else if (data_type == DATA_UINT16){
 80008ea:	683b      	ldr	r3, [r7, #0]
 80008ec:	2b01      	cmp	r3, #1
 80008ee:	d109      	bne.n	8000904 <print_KANYEdata+0x4c>
        sprintf(print, "%u", *((uint16_t*)data));
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	881b      	ldrh	r3, [r3, #0]
 80008f4:	461a      	mov	r2, r3
 80008f6:	f107 030c 	add.w	r3, r7, #12
 80008fa:	4912      	ldr	r1, [pc, #72]	; (8000944 <print_KANYEdata+0x8c>)
 80008fc:	4618      	mov	r0, r3
 80008fe:	f002 f83f 	bl	8002980 <siprintf>
 8000902:	e00b      	b.n	800091c <print_KANYEdata+0x64>
    }else if (data_type == DATA_UINT8){
 8000904:	683b      	ldr	r3, [r7, #0]
 8000906:	2b02      	cmp	r3, #2
 8000908:	d108      	bne.n	800091c <print_KANYEdata+0x64>
    	sprintf(print, "%u", *((uint8_t*)data));
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	781b      	ldrb	r3, [r3, #0]
 800090e:	461a      	mov	r2, r3
 8000910:	f107 030c 	add.w	r3, r7, #12
 8000914:	490b      	ldr	r1, [pc, #44]	; (8000944 <print_KANYEdata+0x8c>)
 8000916:	4618      	mov	r0, r3
 8000918:	f002 f832 	bl	8002980 <siprintf>
    }
    HAL_UART_Transmit(&huart2, (uint8_t *)print, strlen(print), 100);
 800091c:	f107 030c 	add.w	r3, r7, #12
 8000920:	4618      	mov	r0, r3
 8000922:	f7ff fc13 	bl	800014c <strlen>
 8000926:	4603      	mov	r3, r0
 8000928:	b29a      	uxth	r2, r3
 800092a:	f107 010c 	add.w	r1, r7, #12
 800092e:	2364      	movs	r3, #100	; 0x64
 8000930:	4805      	ldr	r0, [pc, #20]	; (8000948 <print_KANYEdata+0x90>)
 8000932:	f001 fde6 	bl	8002502 <HAL_UART_Transmit>
}
 8000936:	bf00      	nop
 8000938:	3740      	adds	r7, #64	; 0x40
 800093a:	46bd      	mov	sp, r7
 800093c:	bd80      	pop	{r7, pc}
 800093e:	bf00      	nop
 8000940:	080033cc 	.word	0x080033cc
 8000944:	080033d0 	.word	0x080033d0
 8000948:	20000110 	.word	0x20000110

0800094c <checksumcal>:
 * 	checksumcal(uint8_t* array) DESCRIPTION:						           *
 * 	Calculates the checksum for getVersion() and getResolution()               *
 * 	Function parameter array is the array of response bytes sent from PixyCam  *
 *******************************************************************************/
int8_t checksumcal(uint8_t* array)//calculate checksum of pixycam
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b084      	sub	sp, #16
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
	checksum = array[5] << 8 | array[4];
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	3305      	adds	r3, #5
 8000958:	781b      	ldrb	r3, [r3, #0]
 800095a:	021b      	lsls	r3, r3, #8
 800095c:	b21a      	sxth	r2, r3
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	3304      	adds	r3, #4
 8000962:	781b      	ldrb	r3, [r3, #0]
 8000964:	b21b      	sxth	r3, r3
 8000966:	4313      	orrs	r3, r2
 8000968:	b21b      	sxth	r3, r3
 800096a:	b29a      	uxth	r2, r3
 800096c:	4b38      	ldr	r3, [pc, #224]	; (8000a50 <checksumcal+0x104>)
 800096e:	801a      	strh	r2, [r3, #0]
	cal_checksum = 0;
 8000970:	4b38      	ldr	r3, [pc, #224]	; (8000a54 <checksumcal+0x108>)
 8000972:	2200      	movs	r2, #0
 8000974:	801a      	strh	r2, [r3, #0]
	for(int i = 6; i<22;i++)
 8000976:	2306      	movs	r3, #6
 8000978:	60fb      	str	r3, [r7, #12]
 800097a:	e00d      	b.n	8000998 <checksumcal+0x4c>
	{
		cal_checksum+=array[i];
 800097c:	68fb      	ldr	r3, [r7, #12]
 800097e:	687a      	ldr	r2, [r7, #4]
 8000980:	4413      	add	r3, r2
 8000982:	781b      	ldrb	r3, [r3, #0]
 8000984:	b29a      	uxth	r2, r3
 8000986:	4b33      	ldr	r3, [pc, #204]	; (8000a54 <checksumcal+0x108>)
 8000988:	881b      	ldrh	r3, [r3, #0]
 800098a:	4413      	add	r3, r2
 800098c:	b29a      	uxth	r2, r3
 800098e:	4b31      	ldr	r3, [pc, #196]	; (8000a54 <checksumcal+0x108>)
 8000990:	801a      	strh	r2, [r3, #0]
	for(int i = 6; i<22;i++)
 8000992:	68fb      	ldr	r3, [r7, #12]
 8000994:	3301      	adds	r3, #1
 8000996:	60fb      	str	r3, [r7, #12]
 8000998:	68fb      	ldr	r3, [r7, #12]
 800099a:	2b15      	cmp	r3, #21
 800099c:	ddee      	ble.n	800097c <checksumcal+0x30>
	}
	print_KANYEdata("PixyCam Checksum: ", DATA_STRING);
 800099e:	2100      	movs	r1, #0
 80009a0:	482d      	ldr	r0, [pc, #180]	; (8000a58 <checksumcal+0x10c>)
 80009a2:	f7ff ff89 	bl	80008b8 <print_KANYEdata>
	print_KANYEdata(&checksum, DATA_UINT16);
 80009a6:	2101      	movs	r1, #1
 80009a8:	4829      	ldr	r0, [pc, #164]	; (8000a50 <checksumcal+0x104>)
 80009aa:	f7ff ff85 	bl	80008b8 <print_KANYEdata>
	print_KANYEdata("\n", DATA_STRING);
 80009ae:	2100      	movs	r1, #0
 80009b0:	482a      	ldr	r0, [pc, #168]	; (8000a5c <checksumcal+0x110>)
 80009b2:	f7ff ff81 	bl	80008b8 <print_KANYEdata>

	print_KANYEdata("Checksum calculation of Payload Bytes: ", DATA_STRING);
 80009b6:	2100      	movs	r1, #0
 80009b8:	4829      	ldr	r0, [pc, #164]	; (8000a60 <checksumcal+0x114>)
 80009ba:	f7ff ff7d 	bl	80008b8 <print_KANYEdata>
	print_KANYEdata(&cal_checksum, DATA_UINT16);
 80009be:	2101      	movs	r1, #1
 80009c0:	4824      	ldr	r0, [pc, #144]	; (8000a54 <checksumcal+0x108>)
 80009c2:	f7ff ff79 	bl	80008b8 <print_KANYEdata>
	print_KANYEdata("\n", DATA_STRING);
 80009c6:	2100      	movs	r1, #0
 80009c8:	4824      	ldr	r0, [pc, #144]	; (8000a5c <checksumcal+0x110>)
 80009ca:	f7ff ff75 	bl	80008b8 <print_KANYEdata>

	print_KANYEdata("Can we get much higher?\n", DATA_STRING);
 80009ce:	2100      	movs	r1, #0
 80009d0:	4824      	ldr	r0, [pc, #144]	; (8000a64 <checksumcal+0x118>)
 80009d2:	f7ff ff71 	bl	80008b8 <print_KANYEdata>
	if(array == recV){
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	4a23      	ldr	r2, [pc, #140]	; (8000a68 <checksumcal+0x11c>)
 80009da:	4293      	cmp	r3, r2
 80009dc:	d113      	bne.n	8000a06 <checksumcal+0xba>
		if(checksum == cal_checksum){
 80009de:	4b1c      	ldr	r3, [pc, #112]	; (8000a50 <checksumcal+0x104>)
 80009e0:	881a      	ldrh	r2, [r3, #0]
 80009e2:	4b1c      	ldr	r3, [pc, #112]	; (8000a54 <checksumcal+0x108>)
 80009e4:	881b      	ldrh	r3, [r3, #0]
 80009e6:	429a      	cmp	r2, r3
 80009e8:	d108      	bne.n	80009fc <checksumcal+0xb0>
			print_KANYEdata("SO HIGH.... OH OH OH\n", DATA_STRING);
 80009ea:	2100      	movs	r1, #0
 80009ec:	481f      	ldr	r0, [pc, #124]	; (8000a6c <checksumcal+0x120>)
 80009ee:	f7ff ff63 	bl	80008b8 <print_KANYEdata>
			print_KANYEdata("getVersion PixyCam Checksum Validation SUCCESS\n", DATA_STRING);
 80009f2:	2100      	movs	r1, #0
 80009f4:	481e      	ldr	r0, [pc, #120]	; (8000a70 <checksumcal+0x124>)
 80009f6:	f7ff ff5f 	bl	80008b8 <print_KANYEdata>
 80009fa:	e01b      	b.n	8000a34 <checksumcal+0xe8>
		}else{
			print_KANYEdata("getVersion PixyCam Checksum Validation FAILED\nTRY AGAIN\n", DATA_STRING);
 80009fc:	2100      	movs	r1, #0
 80009fe:	481d      	ldr	r0, [pc, #116]	; (8000a74 <checksumcal+0x128>)
 8000a00:	f7ff ff5a 	bl	80008b8 <print_KANYEdata>
 8000a04:	e016      	b.n	8000a34 <checksumcal+0xe8>
		}
	}else if(array == recR){
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	4a1b      	ldr	r2, [pc, #108]	; (8000a78 <checksumcal+0x12c>)
 8000a0a:	4293      	cmp	r3, r2
 8000a0c:	d112      	bne.n	8000a34 <checksumcal+0xe8>
		if(checksum == cal_checksum){
 8000a0e:	4b10      	ldr	r3, [pc, #64]	; (8000a50 <checksumcal+0x104>)
 8000a10:	881a      	ldrh	r2, [r3, #0]
 8000a12:	4b10      	ldr	r3, [pc, #64]	; (8000a54 <checksumcal+0x108>)
 8000a14:	881b      	ldrh	r3, [r3, #0]
 8000a16:	429a      	cmp	r2, r3
 8000a18:	d108      	bne.n	8000a2c <checksumcal+0xe0>
			print_KANYEdata("SO HIGH.... OH OH OH\n", DATA_STRING);
 8000a1a:	2100      	movs	r1, #0
 8000a1c:	4813      	ldr	r0, [pc, #76]	; (8000a6c <checksumcal+0x120>)
 8000a1e:	f7ff ff4b 	bl	80008b8 <print_KANYEdata>
			print_KANYEdata("getResolution PixyCam Checksum Validation SUCCESS\n", DATA_STRING);
 8000a22:	2100      	movs	r1, #0
 8000a24:	4815      	ldr	r0, [pc, #84]	; (8000a7c <checksumcal+0x130>)
 8000a26:	f7ff ff47 	bl	80008b8 <print_KANYEdata>
 8000a2a:	e003      	b.n	8000a34 <checksumcal+0xe8>
		}else{
			print_KANYEdata("getResolution PixyCam Checksum Validation FAILED\nTRY AGAIN\n", DATA_STRING);
 8000a2c:	2100      	movs	r1, #0
 8000a2e:	4814      	ldr	r0, [pc, #80]	; (8000a80 <checksumcal+0x134>)
 8000a30:	f7ff ff42 	bl	80008b8 <print_KANYEdata>
		}
	}

	return checksum==cal_checksum?PIXY_RESULT_OK:PIXY_RESULT_ERROR;
 8000a34:	4b06      	ldr	r3, [pc, #24]	; (8000a50 <checksumcal+0x104>)
 8000a36:	881a      	ldrh	r2, [r3, #0]
 8000a38:	4b06      	ldr	r3, [pc, #24]	; (8000a54 <checksumcal+0x108>)
 8000a3a:	881b      	ldrh	r3, [r3, #0]
 8000a3c:	429a      	cmp	r2, r3
 8000a3e:	d101      	bne.n	8000a44 <checksumcal+0xf8>
 8000a40:	2300      	movs	r3, #0
 8000a42:	e001      	b.n	8000a48 <checksumcal+0xfc>
 8000a44:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000a48:	4618      	mov	r0, r3
 8000a4a:	3710      	adds	r7, #16
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	bd80      	pop	{r7, pc}
 8000a50:	200001ec 	.word	0x200001ec
 8000a54:	200001ee 	.word	0x200001ee
 8000a58:	080033d4 	.word	0x080033d4
 8000a5c:	080033e8 	.word	0x080033e8
 8000a60:	080033ec 	.word	0x080033ec
 8000a64:	08003414 	.word	0x08003414
 8000a68:	20000198 	.word	0x20000198
 8000a6c:	08003430 	.word	0x08003430
 8000a70:	08003448 	.word	0x08003448
 8000a74:	08003478 	.word	0x08003478
 8000a78:	200001b0 	.word	0x200001b0
 8000a7c:	080034b4 	.word	0x080034b4
 8000a80:	080034e8 	.word	0x080034e8

08000a84 <getVersion>:
 * 	- Firmware Build             											   *
 * 	- Firmware Type 														   *
 * 	- PixyCam Checksum														   *
 *******************************************************************************/
int8_t getVersion()//get the current version of  Pixy cam
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b084      	sub	sp, #16
 8000a88:	af00      	add	r7, sp, #0
	uint16_t hardwareVer = 0;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	81fb      	strh	r3, [r7, #14]
	uint16_t firmwareVerMajor = 0;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	81bb      	strh	r3, [r7, #12]
	uint16_t firmwareVerMinor = 0;
 8000a92:	2300      	movs	r3, #0
 8000a94:	817b      	strh	r3, [r7, #10]
	uint16_t firmwareBuild = 0;
 8000a96:	2300      	movs	r3, #0
 8000a98:	813b      	strh	r3, [r7, #8]
	uint16_t firmwareType = 0;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	80fb      	strh	r3, [r7, #6]

	HAL_UART_Transmit(&huart3, reqV, 4, 100);
 8000a9e:	2364      	movs	r3, #100	; 0x64
 8000aa0:	2204      	movs	r2, #4
 8000aa2:	493c      	ldr	r1, [pc, #240]	; (8000b94 <getVersion+0x110>)
 8000aa4:	483c      	ldr	r0, [pc, #240]	; (8000b98 <getVersion+0x114>)
 8000aa6:	f001 fd2c 	bl	8002502 <HAL_UART_Transmit>
	HAL_UART_Receive(&huart3, recV, PIXY_VERSION_BUFFERSIZE, 100);
 8000aaa:	2364      	movs	r3, #100	; 0x64
 8000aac:	2216      	movs	r2, #22
 8000aae:	493b      	ldr	r1, [pc, #236]	; (8000b9c <getVersion+0x118>)
 8000ab0:	4839      	ldr	r0, [pc, #228]	; (8000b98 <getVersion+0x114>)
 8000ab2:	f001 fdb8 	bl	8002626 <HAL_UART_Receive>
	hardwareVer = recV[7] << 8 | recV[6];
 8000ab6:	4b39      	ldr	r3, [pc, #228]	; (8000b9c <getVersion+0x118>)
 8000ab8:	79db      	ldrb	r3, [r3, #7]
 8000aba:	021b      	lsls	r3, r3, #8
 8000abc:	b21a      	sxth	r2, r3
 8000abe:	4b37      	ldr	r3, [pc, #220]	; (8000b9c <getVersion+0x118>)
 8000ac0:	799b      	ldrb	r3, [r3, #6]
 8000ac2:	b21b      	sxth	r3, r3
 8000ac4:	4313      	orrs	r3, r2
 8000ac6:	b21b      	sxth	r3, r3
 8000ac8:	b29b      	uxth	r3, r3
 8000aca:	81fb      	strh	r3, [r7, #14]
	firmwareVerMajor = recV[8];
 8000acc:	4b33      	ldr	r3, [pc, #204]	; (8000b9c <getVersion+0x118>)
 8000ace:	7a1b      	ldrb	r3, [r3, #8]
 8000ad0:	b29b      	uxth	r3, r3
 8000ad2:	81bb      	strh	r3, [r7, #12]
	firmwareVerMinor = recV[9];
 8000ad4:	4b31      	ldr	r3, [pc, #196]	; (8000b9c <getVersion+0x118>)
 8000ad6:	7a5b      	ldrb	r3, [r3, #9]
 8000ad8:	b29b      	uxth	r3, r3
 8000ada:	817b      	strh	r3, [r7, #10]
	firmwareBuild = recV[11] << 8 | recV[10];
 8000adc:	4b2f      	ldr	r3, [pc, #188]	; (8000b9c <getVersion+0x118>)
 8000ade:	7adb      	ldrb	r3, [r3, #11]
 8000ae0:	021b      	lsls	r3, r3, #8
 8000ae2:	b21a      	sxth	r2, r3
 8000ae4:	4b2d      	ldr	r3, [pc, #180]	; (8000b9c <getVersion+0x118>)
 8000ae6:	7a9b      	ldrb	r3, [r3, #10]
 8000ae8:	b21b      	sxth	r3, r3
 8000aea:	4313      	orrs	r3, r2
 8000aec:	b21b      	sxth	r3, r3
 8000aee:	b29b      	uxth	r3, r3
 8000af0:	813b      	strh	r3, [r7, #8]

	print_KANYEdata("Hardware Version: ", DATA_STRING);
 8000af2:	2100      	movs	r1, #0
 8000af4:	482a      	ldr	r0, [pc, #168]	; (8000ba0 <getVersion+0x11c>)
 8000af6:	f7ff fedf 	bl	80008b8 <print_KANYEdata>
	print_KANYEdata(&hardwareVer, DATA_UINT16);
 8000afa:	f107 030e 	add.w	r3, r7, #14
 8000afe:	2101      	movs	r1, #1
 8000b00:	4618      	mov	r0, r3
 8000b02:	f7ff fed9 	bl	80008b8 <print_KANYEdata>
	print_KANYEdata("\n", DATA_STRING);
 8000b06:	2100      	movs	r1, #0
 8000b08:	4826      	ldr	r0, [pc, #152]	; (8000ba4 <getVersion+0x120>)
 8000b0a:	f7ff fed5 	bl	80008b8 <print_KANYEdata>

	print_KANYEdata("Firmware version major: ", DATA_STRING);
 8000b0e:	2100      	movs	r1, #0
 8000b10:	4825      	ldr	r0, [pc, #148]	; (8000ba8 <getVersion+0x124>)
 8000b12:	f7ff fed1 	bl	80008b8 <print_KANYEdata>
	print_KANYEdata(&firmwareVerMajor, DATA_UINT16);
 8000b16:	f107 030c 	add.w	r3, r7, #12
 8000b1a:	2101      	movs	r1, #1
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	f7ff fecb 	bl	80008b8 <print_KANYEdata>
	print_KANYEdata("\n", DATA_STRING);
 8000b22:	2100      	movs	r1, #0
 8000b24:	481f      	ldr	r0, [pc, #124]	; (8000ba4 <getVersion+0x120>)
 8000b26:	f7ff fec7 	bl	80008b8 <print_KANYEdata>

	print_KANYEdata("Firmware version minor: ", DATA_STRING);
 8000b2a:	2100      	movs	r1, #0
 8000b2c:	481f      	ldr	r0, [pc, #124]	; (8000bac <getVersion+0x128>)
 8000b2e:	f7ff fec3 	bl	80008b8 <print_KANYEdata>
	print_KANYEdata(&firmwareVerMinor, DATA_UINT16);
 8000b32:	f107 030a 	add.w	r3, r7, #10
 8000b36:	2101      	movs	r1, #1
 8000b38:	4618      	mov	r0, r3
 8000b3a:	f7ff febd 	bl	80008b8 <print_KANYEdata>
	print_KANYEdata("\n", DATA_STRING);
 8000b3e:	2100      	movs	r1, #0
 8000b40:	4818      	ldr	r0, [pc, #96]	; (8000ba4 <getVersion+0x120>)
 8000b42:	f7ff feb9 	bl	80008b8 <print_KANYEdata>

	print_KANYEdata("Firmware Build: ", DATA_STRING);
 8000b46:	2100      	movs	r1, #0
 8000b48:	4819      	ldr	r0, [pc, #100]	; (8000bb0 <getVersion+0x12c>)
 8000b4a:	f7ff feb5 	bl	80008b8 <print_KANYEdata>
	print_KANYEdata(&firmwareBuild, DATA_UINT16);
 8000b4e:	f107 0308 	add.w	r3, r7, #8
 8000b52:	2101      	movs	r1, #1
 8000b54:	4618      	mov	r0, r3
 8000b56:	f7ff feaf 	bl	80008b8 <print_KANYEdata>
	print_KANYEdata("\n", DATA_STRING);
 8000b5a:	2100      	movs	r1, #0
 8000b5c:	4811      	ldr	r0, [pc, #68]	; (8000ba4 <getVersion+0x120>)
 8000b5e:	f7ff feab 	bl	80008b8 <print_KANYEdata>

	print_KANYEdata("Firmware Type: ", DATA_STRING);
 8000b62:	2100      	movs	r1, #0
 8000b64:	4813      	ldr	r0, [pc, #76]	; (8000bb4 <getVersion+0x130>)
 8000b66:	f7ff fea7 	bl	80008b8 <print_KANYEdata>
	print_KANYEdata(&firmwareType, DATA_UINT16);
 8000b6a:	1dbb      	adds	r3, r7, #6
 8000b6c:	2101      	movs	r1, #1
 8000b6e:	4618      	mov	r0, r3
 8000b70:	f7ff fea2 	bl	80008b8 <print_KANYEdata>
	print_KANYEdata("\n", DATA_STRING);
 8000b74:	2100      	movs	r1, #0
 8000b76:	480b      	ldr	r0, [pc, #44]	; (8000ba4 <getVersion+0x120>)
 8000b78:	f7ff fe9e 	bl	80008b8 <print_KANYEdata>

	// Checksum sent from PixyCam and Checksum validation result will be printed from
	// checksumcal and validate_PIXYchecksum() function

	HAL_Delay(1);
 8000b7c:	2001      	movs	r0, #1
 8000b7e:	f000 fd69 	bl	8001654 <HAL_Delay>
	return checksumcal(recV);
 8000b82:	4806      	ldr	r0, [pc, #24]	; (8000b9c <getVersion+0x118>)
 8000b84:	f7ff fee2 	bl	800094c <checksumcal>
 8000b88:	4603      	mov	r3, r0
	//if loop to check error;
}
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	3710      	adds	r7, #16
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	bf00      	nop
 8000b94:	20000000 	.word	0x20000000
 8000b98:	20000154 	.word	0x20000154
 8000b9c:	20000198 	.word	0x20000198
 8000ba0:	08003524 	.word	0x08003524
 8000ba4:	080033e8 	.word	0x080033e8
 8000ba8:	08003538 	.word	0x08003538
 8000bac:	08003554 	.word	0x08003554
 8000bb0:	08003570 	.word	0x08003570
 8000bb4:	08003584 	.word	0x08003584

08000bb8 <getResolution>:
 * 	- Frame Height															   *
 * 	- PixyCam Checksum														   *
 *******************************************************************************/
// getResolution gets the width and height of the frames used by the current program
int8_t getResolution()//get the resolution of  Pixy cam
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b082      	sub	sp, #8
 8000bbc:	af00      	add	r7, sp, #0
	uint16_t ResWidth = 0;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	80fb      	strh	r3, [r7, #6]
	uint16_t ResHeight = 0;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	80bb      	strh	r3, [r7, #4]
	HAL_UART_Transmit(&huart3, reqR, 5, 100);
 8000bc6:	2364      	movs	r3, #100	; 0x64
 8000bc8:	2205      	movs	r2, #5
 8000bca:	4922      	ldr	r1, [pc, #136]	; (8000c54 <getResolution+0x9c>)
 8000bcc:	4822      	ldr	r0, [pc, #136]	; (8000c58 <getResolution+0xa0>)
 8000bce:	f001 fc98 	bl	8002502 <HAL_UART_Transmit>
	HAL_UART_Receive(&huart3, recR, 10, 100);
 8000bd2:	2364      	movs	r3, #100	; 0x64
 8000bd4:	220a      	movs	r2, #10
 8000bd6:	4921      	ldr	r1, [pc, #132]	; (8000c5c <getResolution+0xa4>)
 8000bd8:	481f      	ldr	r0, [pc, #124]	; (8000c58 <getResolution+0xa0>)
 8000bda:	f001 fd24 	bl	8002626 <HAL_UART_Receive>

	ResWidth = recR[7] << 8 | recR[6];
 8000bde:	4b1f      	ldr	r3, [pc, #124]	; (8000c5c <getResolution+0xa4>)
 8000be0:	79db      	ldrb	r3, [r3, #7]
 8000be2:	021b      	lsls	r3, r3, #8
 8000be4:	b21a      	sxth	r2, r3
 8000be6:	4b1d      	ldr	r3, [pc, #116]	; (8000c5c <getResolution+0xa4>)
 8000be8:	799b      	ldrb	r3, [r3, #6]
 8000bea:	b21b      	sxth	r3, r3
 8000bec:	4313      	orrs	r3, r2
 8000bee:	b21b      	sxth	r3, r3
 8000bf0:	b29b      	uxth	r3, r3
 8000bf2:	80fb      	strh	r3, [r7, #6]
	ResHeight = recR[9] << 8 | recR[8];
 8000bf4:	4b19      	ldr	r3, [pc, #100]	; (8000c5c <getResolution+0xa4>)
 8000bf6:	7a5b      	ldrb	r3, [r3, #9]
 8000bf8:	021b      	lsls	r3, r3, #8
 8000bfa:	b21a      	sxth	r2, r3
 8000bfc:	4b17      	ldr	r3, [pc, #92]	; (8000c5c <getResolution+0xa4>)
 8000bfe:	7a1b      	ldrb	r3, [r3, #8]
 8000c00:	b21b      	sxth	r3, r3
 8000c02:	4313      	orrs	r3, r2
 8000c04:	b21b      	sxth	r3, r3
 8000c06:	b29b      	uxth	r3, r3
 8000c08:	80bb      	strh	r3, [r7, #4]

	print_KANYEdata("PixyCam Resolution Width: ", DATA_STRING);
 8000c0a:	2100      	movs	r1, #0
 8000c0c:	4814      	ldr	r0, [pc, #80]	; (8000c60 <getResolution+0xa8>)
 8000c0e:	f7ff fe53 	bl	80008b8 <print_KANYEdata>
	print_KANYEdata(&ResWidth, DATA_UINT16);
 8000c12:	1dbb      	adds	r3, r7, #6
 8000c14:	2101      	movs	r1, #1
 8000c16:	4618      	mov	r0, r3
 8000c18:	f7ff fe4e 	bl	80008b8 <print_KANYEdata>
	print_KANYEdata("\n", DATA_STRING);
 8000c1c:	2100      	movs	r1, #0
 8000c1e:	4811      	ldr	r0, [pc, #68]	; (8000c64 <getResolution+0xac>)
 8000c20:	f7ff fe4a 	bl	80008b8 <print_KANYEdata>

	print_KANYEdata("PixyCam Resolution Height: ", DATA_STRING);
 8000c24:	2100      	movs	r1, #0
 8000c26:	4810      	ldr	r0, [pc, #64]	; (8000c68 <getResolution+0xb0>)
 8000c28:	f7ff fe46 	bl	80008b8 <print_KANYEdata>
	print_KANYEdata(&ResHeight, DATA_UINT16);
 8000c2c:	1d3b      	adds	r3, r7, #4
 8000c2e:	2101      	movs	r1, #1
 8000c30:	4618      	mov	r0, r3
 8000c32:	f7ff fe41 	bl	80008b8 <print_KANYEdata>
	print_KANYEdata("\n", DATA_STRING);
 8000c36:	2100      	movs	r1, #0
 8000c38:	480a      	ldr	r0, [pc, #40]	; (8000c64 <getResolution+0xac>)
 8000c3a:	f7ff fe3d 	bl	80008b8 <print_KANYEdata>

	// Checksum sent from PixyCam and Checksum validation result will be printed from
	// checksumcal and validate_PIXYchecksum() function

	HAL_Delay(1);
 8000c3e:	2001      	movs	r0, #1
 8000c40:	f000 fd08 	bl	8001654 <HAL_Delay>
	return checksumcal(recR);
 8000c44:	4805      	ldr	r0, [pc, #20]	; (8000c5c <getResolution+0xa4>)
 8000c46:	f7ff fe81 	bl	800094c <checksumcal>
 8000c4a:	4603      	mov	r3, r0
}
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	3708      	adds	r7, #8
 8000c50:	46bd      	mov	sp, r7
 8000c52:	bd80      	pop	{r7, pc}
 8000c54:	20000004 	.word	0x20000004
 8000c58:	20000154 	.word	0x20000154
 8000c5c:	200001b0 	.word	0x200001b0
 8000c60:	08003594 	.word	0x08003594
 8000c64:	080033e8 	.word	0x080033e8
 8000c68:	080035b0 	.word	0x080035b0

08000c6c <setCameraBrightness>:
// Taken from Pixy camera docu: sets the relative exposure level of Pixy2's image sensor. Higher values result in a brighter (more exposed) image.
// Verify brightness response packet
// Order: 8 bit sync byte, 8 bit sync byte, types of packet, length of payload, 4-5 16 bit checksum, 6-9 32 bit brightness
uint8_t VerBright[] = {0xC1, 0xAF, 0x01, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
int8_t setCameraBrightness(uint8_t setbright)//set the current brightness of  Pixy cam, set to 100 for testing
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b084      	sub	sp, #16
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	4603      	mov	r3, r0
 8000c74:	71fb      	strb	r3, [r7, #7]
	print_KANYEdata("Brightness set to: ", DATA_STRING);
 8000c76:	2100      	movs	r1, #0
 8000c78:	4827      	ldr	r0, [pc, #156]	; (8000d18 <setCameraBrightness+0xac>)
 8000c7a:	f7ff fe1d 	bl	80008b8 <print_KANYEdata>
	print_KANYEdata(&setbright, DATA_UINT8);
 8000c7e:	1dfb      	adds	r3, r7, #7
 8000c80:	2102      	movs	r1, #2
 8000c82:	4618      	mov	r0, r3
 8000c84:	f7ff fe18 	bl	80008b8 <print_KANYEdata>
	print_KANYEdata("\n", DATA_STRING);
 8000c88:	2100      	movs	r1, #0
 8000c8a:	4824      	ldr	r0, [pc, #144]	; (8000d1c <setCameraBrightness+0xb0>)
 8000c8c:	f7ff fe14 	bl	80008b8 <print_KANYEdata>

	reqB[4] = setbright;//store brightness value
 8000c90:	79fa      	ldrb	r2, [r7, #7]
 8000c92:	4b23      	ldr	r3, [pc, #140]	; (8000d20 <setCameraBrightness+0xb4>)
 8000c94:	711a      	strb	r2, [r3, #4]
	HAL_UART_Transmit(&huart3, reqB, 5, 100);
 8000c96:	2364      	movs	r3, #100	; 0x64
 8000c98:	2205      	movs	r2, #5
 8000c9a:	4921      	ldr	r1, [pc, #132]	; (8000d20 <setCameraBrightness+0xb4>)
 8000c9c:	4821      	ldr	r0, [pc, #132]	; (8000d24 <setCameraBrightness+0xb8>)
 8000c9e:	f001 fc30 	bl	8002502 <HAL_UART_Transmit>
	HAL_UART_Receive(&huart3, recB, 10, 100);
 8000ca2:	2364      	movs	r3, #100	; 0x64
 8000ca4:	220a      	movs	r2, #10
 8000ca6:	4920      	ldr	r1, [pc, #128]	; (8000d28 <setCameraBrightness+0xbc>)
 8000ca8:	481e      	ldr	r0, [pc, #120]	; (8000d24 <setCameraBrightness+0xb8>)
 8000caa:	f001 fcbc 	bl	8002626 <HAL_UART_Receive>
	HAL_Delay(1);
 8000cae:	2001      	movs	r0, #1
 8000cb0:	f000 fcd0 	bl	8001654 <HAL_Delay>
	checksum = recB[5] << 8 | recB[4];
 8000cb4:	4b1c      	ldr	r3, [pc, #112]	; (8000d28 <setCameraBrightness+0xbc>)
 8000cb6:	795b      	ldrb	r3, [r3, #5]
 8000cb8:	021b      	lsls	r3, r3, #8
 8000cba:	b21a      	sxth	r2, r3
 8000cbc:	4b1a      	ldr	r3, [pc, #104]	; (8000d28 <setCameraBrightness+0xbc>)
 8000cbe:	791b      	ldrb	r3, [r3, #4]
 8000cc0:	b21b      	sxth	r3, r3
 8000cc2:	4313      	orrs	r3, r2
 8000cc4:	b21b      	sxth	r3, r3
 8000cc6:	b29a      	uxth	r2, r3
 8000cc8:	4b18      	ldr	r3, [pc, #96]	; (8000d2c <setCameraBrightness+0xc0>)
 8000cca:	801a      	strh	r2, [r3, #0]
	cal_checksum = 0;
 8000ccc:	4b18      	ldr	r3, [pc, #96]	; (8000d30 <setCameraBrightness+0xc4>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	801a      	strh	r2, [r3, #0]
	for(int i = 6; i<sizeof(recB);i++)
 8000cd2:	2306      	movs	r3, #6
 8000cd4:	60fb      	str	r3, [r7, #12]
 8000cd6:	e00d      	b.n	8000cf4 <setCameraBrightness+0x88>
	{
		cal_checksum+=recB[i];
 8000cd8:	4a13      	ldr	r2, [pc, #76]	; (8000d28 <setCameraBrightness+0xbc>)
 8000cda:	68fb      	ldr	r3, [r7, #12]
 8000cdc:	4413      	add	r3, r2
 8000cde:	781b      	ldrb	r3, [r3, #0]
 8000ce0:	b29a      	uxth	r2, r3
 8000ce2:	4b13      	ldr	r3, [pc, #76]	; (8000d30 <setCameraBrightness+0xc4>)
 8000ce4:	881b      	ldrh	r3, [r3, #0]
 8000ce6:	4413      	add	r3, r2
 8000ce8:	b29a      	uxth	r2, r3
 8000cea:	4b11      	ldr	r3, [pc, #68]	; (8000d30 <setCameraBrightness+0xc4>)
 8000cec:	801a      	strh	r2, [r3, #0]
	for(int i = 6; i<sizeof(recB);i++)
 8000cee:	68fb      	ldr	r3, [r7, #12]
 8000cf0:	3301      	adds	r3, #1
 8000cf2:	60fb      	str	r3, [r7, #12]
 8000cf4:	68fb      	ldr	r3, [r7, #12]
 8000cf6:	2b09      	cmp	r3, #9
 8000cf8:	d9ee      	bls.n	8000cd8 <setCameraBrightness+0x6c>
	}
	// Checksum sent from PixyCam and Checksum validation result will be printed from
	// checksumcal and validate_PIXYchecksum() function
	return checksum==cal_checksum?PIXY_RESULT_OK:PIXY_RESULT_ERROR;
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	; (8000d2c <setCameraBrightness+0xc0>)
 8000cfc:	881a      	ldrh	r2, [r3, #0]
 8000cfe:	4b0c      	ldr	r3, [pc, #48]	; (8000d30 <setCameraBrightness+0xc4>)
 8000d00:	881b      	ldrh	r3, [r3, #0]
 8000d02:	429a      	cmp	r2, r3
 8000d04:	d101      	bne.n	8000d0a <setCameraBrightness+0x9e>
 8000d06:	2300      	movs	r3, #0
 8000d08:	e001      	b.n	8000d0e <setCameraBrightness+0xa2>
 8000d0a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d0e:	4618      	mov	r0, r3
 8000d10:	3710      	adds	r7, #16
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bd80      	pop	{r7, pc}
 8000d16:	bf00      	nop
 8000d18:	080035cc 	.word	0x080035cc
 8000d1c:	080033e8 	.word	0x080033e8
 8000d20:	2000000c 	.word	0x2000000c
 8000d24:	20000154 	.word	0x20000154
 8000d28:	200001bc 	.word	0x200001bc
 8000d2c:	200001ec 	.word	0x200001ec
 8000d30:	200001ee 	.word	0x200001ee

08000d34 <getBlocks>:
 * 	- 16-bit Angle of color-code in degrees									   *
 * 	- Tracking index of block												   *
 * 	- Age - number of frames this block has been tracked					   *
 *******************************************************************************/
int8_t getBlocks(uint8_t sigmap, uint8_t maxBlocks)//getblocks function to get X,Y coordinates and Calculate Area
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b086      	sub	sp, #24
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	460a      	mov	r2, r1
 8000d3e:	71fb      	strb	r3, [r7, #7]
 8000d40:	4613      	mov	r3, r2
 8000d42:	71bb      	strb	r3, [r7, #6]
	print_KANYEdata("Signature Map selected: ", DATA_STRING);
 8000d44:	2100      	movs	r1, #0
 8000d46:	489d      	ldr	r0, [pc, #628]	; (8000fbc <getBlocks+0x288>)
 8000d48:	f7ff fdb6 	bl	80008b8 <print_KANYEdata>
	print_KANYEdata(&sigmap, DATA_UINT8);
 8000d4c:	1dfb      	adds	r3, r7, #7
 8000d4e:	2102      	movs	r1, #2
 8000d50:	4618      	mov	r0, r3
 8000d52:	f7ff fdb1 	bl	80008b8 <print_KANYEdata>
	print_KANYEdata("\n", DATA_STRING);
 8000d56:	2100      	movs	r1, #0
 8000d58:	4899      	ldr	r0, [pc, #612]	; (8000fc0 <getBlocks+0x28c>)
 8000d5a:	f7ff fdad 	bl	80008b8 <print_KANYEdata>

	print_KANYEdata("Maximum number of blocks to be detected: ", DATA_STRING);
 8000d5e:	2100      	movs	r1, #0
 8000d60:	4898      	ldr	r0, [pc, #608]	; (8000fc4 <getBlocks+0x290>)
 8000d62:	f7ff fda9 	bl	80008b8 <print_KANYEdata>
	print_KANYEdata(&maxBlocks, DATA_UINT8);
 8000d66:	1dbb      	adds	r3, r7, #6
 8000d68:	2102      	movs	r1, #2
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	f7ff fda4 	bl	80008b8 <print_KANYEdata>
	print_KANYEdata("\n", DATA_STRING);
 8000d70:	2100      	movs	r1, #0
 8000d72:	4893      	ldr	r0, [pc, #588]	; (8000fc0 <getBlocks+0x28c>)
 8000d74:	f7ff fda0 	bl	80008b8 <print_KANYEdata>

	HAL_UART_Transmit(&huart3, reqG, 6, 100);
 8000d78:	2364      	movs	r3, #100	; 0x64
 8000d7a:	2206      	movs	r2, #6
 8000d7c:	4992      	ldr	r1, [pc, #584]	; (8000fc8 <getBlocks+0x294>)
 8000d7e:	4893      	ldr	r0, [pc, #588]	; (8000fcc <getBlocks+0x298>)
 8000d80:	f001 fbbf 	bl	8002502 <HAL_UART_Transmit>
	HAL_UART_Receive(&huart3, recG, 20, 100);
 8000d84:	2364      	movs	r3, #100	; 0x64
 8000d86:	2214      	movs	r2, #20
 8000d88:	4991      	ldr	r1, [pc, #580]	; (8000fd0 <getBlocks+0x29c>)
 8000d8a:	4890      	ldr	r0, [pc, #576]	; (8000fcc <getBlocks+0x298>)
 8000d8c:	f001 fc4b 	bl	8002626 <HAL_UART_Receive>
	uint16_t sig_colour = ((uint16_t)recG[7] << 8)| recG[6];
 8000d90:	4b8f      	ldr	r3, [pc, #572]	; (8000fd0 <getBlocks+0x29c>)
 8000d92:	79db      	ldrb	r3, [r3, #7]
 8000d94:	021b      	lsls	r3, r3, #8
 8000d96:	b21a      	sxth	r2, r3
 8000d98:	4b8d      	ldr	r3, [pc, #564]	; (8000fd0 <getBlocks+0x29c>)
 8000d9a:	799b      	ldrb	r3, [r3, #6]
 8000d9c:	b21b      	sxth	r3, r3
 8000d9e:	4313      	orrs	r3, r2
 8000da0:	b21b      	sxth	r3, r3
 8000da2:	b29b      	uxth	r3, r3
 8000da4:	827b      	strh	r3, [r7, #18]
	X_BlkPix = ((uint16_t)recG[9] << 8)| recG[8];//Bitshift to find x Val
 8000da6:	4b8a      	ldr	r3, [pc, #552]	; (8000fd0 <getBlocks+0x29c>)
 8000da8:	7a5b      	ldrb	r3, [r3, #9]
 8000daa:	021b      	lsls	r3, r3, #8
 8000dac:	b21a      	sxth	r2, r3
 8000dae:	4b88      	ldr	r3, [pc, #544]	; (8000fd0 <getBlocks+0x29c>)
 8000db0:	7a1b      	ldrb	r3, [r3, #8]
 8000db2:	b21b      	sxth	r3, r3
 8000db4:	4313      	orrs	r3, r2
 8000db6:	b21b      	sxth	r3, r3
 8000db8:	b29a      	uxth	r2, r3
 8000dba:	4b86      	ldr	r3, [pc, #536]	; (8000fd4 <getBlocks+0x2a0>)
 8000dbc:	801a      	strh	r2, [r3, #0]
	Y_BlkPix = ((uint16_t)recG[11] << 8)| recG[10];//Bitshift to find Y Val
 8000dbe:	4b84      	ldr	r3, [pc, #528]	; (8000fd0 <getBlocks+0x29c>)
 8000dc0:	7adb      	ldrb	r3, [r3, #11]
 8000dc2:	021b      	lsls	r3, r3, #8
 8000dc4:	b21a      	sxth	r2, r3
 8000dc6:	4b82      	ldr	r3, [pc, #520]	; (8000fd0 <getBlocks+0x29c>)
 8000dc8:	7a9b      	ldrb	r3, [r3, #10]
 8000dca:	b21b      	sxth	r3, r3
 8000dcc:	4313      	orrs	r3, r2
 8000dce:	b21b      	sxth	r3, r3
 8000dd0:	b29a      	uxth	r2, r3
 8000dd2:	4b81      	ldr	r3, [pc, #516]	; (8000fd8 <getBlocks+0x2a4>)
 8000dd4:	801a      	strh	r2, [r3, #0]
	WidthPix = ((uint16_t)recG[13] << 8)| recG[12];//Bitshift to find Width
 8000dd6:	4b7e      	ldr	r3, [pc, #504]	; (8000fd0 <getBlocks+0x29c>)
 8000dd8:	7b5b      	ldrb	r3, [r3, #13]
 8000dda:	021b      	lsls	r3, r3, #8
 8000ddc:	b21a      	sxth	r2, r3
 8000dde:	4b7c      	ldr	r3, [pc, #496]	; (8000fd0 <getBlocks+0x29c>)
 8000de0:	7b1b      	ldrb	r3, [r3, #12]
 8000de2:	b21b      	sxth	r3, r3
 8000de4:	4313      	orrs	r3, r2
 8000de6:	b21b      	sxth	r3, r3
 8000de8:	b29a      	uxth	r2, r3
 8000dea:	4b7c      	ldr	r3, [pc, #496]	; (8000fdc <getBlocks+0x2a8>)
 8000dec:	801a      	strh	r2, [r3, #0]
	HeightPix = ((uint16_t)recG[15] << 8)| recG[14];//Bitshift to find Height
 8000dee:	4b78      	ldr	r3, [pc, #480]	; (8000fd0 <getBlocks+0x29c>)
 8000df0:	7bdb      	ldrb	r3, [r3, #15]
 8000df2:	021b      	lsls	r3, r3, #8
 8000df4:	b21a      	sxth	r2, r3
 8000df6:	4b76      	ldr	r3, [pc, #472]	; (8000fd0 <getBlocks+0x29c>)
 8000df8:	7b9b      	ldrb	r3, [r3, #14]
 8000dfa:	b21b      	sxth	r3, r3
 8000dfc:	4313      	orrs	r3, r2
 8000dfe:	b21b      	sxth	r3, r3
 8000e00:	b29a      	uxth	r2, r3
 8000e02:	4b77      	ldr	r3, [pc, #476]	; (8000fe0 <getBlocks+0x2ac>)
 8000e04:	801a      	strh	r2, [r3, #0]

	uint16_t color_deg = ((uint16_t)recG[17] << 8)| recG[16];
 8000e06:	4b72      	ldr	r3, [pc, #456]	; (8000fd0 <getBlocks+0x29c>)
 8000e08:	7c5b      	ldrb	r3, [r3, #17]
 8000e0a:	021b      	lsls	r3, r3, #8
 8000e0c:	b21a      	sxth	r2, r3
 8000e0e:	4b70      	ldr	r3, [pc, #448]	; (8000fd0 <getBlocks+0x29c>)
 8000e10:	7c1b      	ldrb	r3, [r3, #16]
 8000e12:	b21b      	sxth	r3, r3
 8000e14:	4313      	orrs	r3, r2
 8000e16:	b21b      	sxth	r3, r3
 8000e18:	b29b      	uxth	r3, r3
 8000e1a:	823b      	strh	r3, [r7, #16]
	uint8_t track_idx = recG[18];
 8000e1c:	4b6c      	ldr	r3, [pc, #432]	; (8000fd0 <getBlocks+0x29c>)
 8000e1e:	7c9b      	ldrb	r3, [r3, #18]
 8000e20:	73fb      	strb	r3, [r7, #15]
	uint8_t blk_age = recG[19];
 8000e22:	4b6b      	ldr	r3, [pc, #428]	; (8000fd0 <getBlocks+0x29c>)
 8000e24:	7cdb      	ldrb	r3, [r3, #19]
 8000e26:	73bb      	strb	r3, [r7, #14]

	area = WidthPix*HeightPix;// Calculate and store area
 8000e28:	4b6c      	ldr	r3, [pc, #432]	; (8000fdc <getBlocks+0x2a8>)
 8000e2a:	881b      	ldrh	r3, [r3, #0]
 8000e2c:	4a6c      	ldr	r2, [pc, #432]	; (8000fe0 <getBlocks+0x2ac>)
 8000e2e:	8812      	ldrh	r2, [r2, #0]
 8000e30:	fb02 f303 	mul.w	r3, r2, r3
 8000e34:	b29a      	uxth	r2, r3
 8000e36:	4b6b      	ldr	r3, [pc, #428]	; (8000fe4 <getBlocks+0x2b0>)
 8000e38:	801a      	strh	r2, [r3, #0]
	checksum = recG[5] << 8 | recG[4];
 8000e3a:	4b65      	ldr	r3, [pc, #404]	; (8000fd0 <getBlocks+0x29c>)
 8000e3c:	795b      	ldrb	r3, [r3, #5]
 8000e3e:	021b      	lsls	r3, r3, #8
 8000e40:	b21a      	sxth	r2, r3
 8000e42:	4b63      	ldr	r3, [pc, #396]	; (8000fd0 <getBlocks+0x29c>)
 8000e44:	791b      	ldrb	r3, [r3, #4]
 8000e46:	b21b      	sxth	r3, r3
 8000e48:	4313      	orrs	r3, r2
 8000e4a:	b21b      	sxth	r3, r3
 8000e4c:	b29a      	uxth	r2, r3
 8000e4e:	4b66      	ldr	r3, [pc, #408]	; (8000fe8 <getBlocks+0x2b4>)
 8000e50:	801a      	strh	r2, [r3, #0]
	cal_checksum = 0;
 8000e52:	4b66      	ldr	r3, [pc, #408]	; (8000fec <getBlocks+0x2b8>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	801a      	strh	r2, [r3, #0]
	for(int i = 6; i<sizeof(recG);i++)
 8000e58:	2306      	movs	r3, #6
 8000e5a:	617b      	str	r3, [r7, #20]
 8000e5c:	e00d      	b.n	8000e7a <getBlocks+0x146>
	{
		cal_checksum+=recG[i];
 8000e5e:	4a5c      	ldr	r2, [pc, #368]	; (8000fd0 <getBlocks+0x29c>)
 8000e60:	697b      	ldr	r3, [r7, #20]
 8000e62:	4413      	add	r3, r2
 8000e64:	781b      	ldrb	r3, [r3, #0]
 8000e66:	b29a      	uxth	r2, r3
 8000e68:	4b60      	ldr	r3, [pc, #384]	; (8000fec <getBlocks+0x2b8>)
 8000e6a:	881b      	ldrh	r3, [r3, #0]
 8000e6c:	4413      	add	r3, r2
 8000e6e:	b29a      	uxth	r2, r3
 8000e70:	4b5e      	ldr	r3, [pc, #376]	; (8000fec <getBlocks+0x2b8>)
 8000e72:	801a      	strh	r2, [r3, #0]
	for(int i = 6; i<sizeof(recG);i++)
 8000e74:	697b      	ldr	r3, [r7, #20]
 8000e76:	3301      	adds	r3, #1
 8000e78:	617b      	str	r3, [r7, #20]
 8000e7a:	697b      	ldr	r3, [r7, #20]
 8000e7c:	2b13      	cmp	r3, #19
 8000e7e:	d9ee      	bls.n	8000e5e <getBlocks+0x12a>
	}

	print_KANYEdata("PixyCam Checksum: ", DATA_STRING);
 8000e80:	2100      	movs	r1, #0
 8000e82:	485b      	ldr	r0, [pc, #364]	; (8000ff0 <getBlocks+0x2bc>)
 8000e84:	f7ff fd18 	bl	80008b8 <print_KANYEdata>
	print_KANYEdata(&checksum, DATA_UINT16);
 8000e88:	2101      	movs	r1, #1
 8000e8a:	4857      	ldr	r0, [pc, #348]	; (8000fe8 <getBlocks+0x2b4>)
 8000e8c:	f7ff fd14 	bl	80008b8 <print_KANYEdata>
	print_KANYEdata("\n", DATA_STRING);
 8000e90:	2100      	movs	r1, #0
 8000e92:	484b      	ldr	r0, [pc, #300]	; (8000fc0 <getBlocks+0x28c>)
 8000e94:	f7ff fd10 	bl	80008b8 <print_KANYEdata>

	print_KANYEdata("Signature Color code number: ", DATA_STRING);
 8000e98:	2100      	movs	r1, #0
 8000e9a:	4856      	ldr	r0, [pc, #344]	; (8000ff4 <getBlocks+0x2c0>)
 8000e9c:	f7ff fd0c 	bl	80008b8 <print_KANYEdata>
	print_KANYEdata(&sig_colour, DATA_UINT16);
 8000ea0:	f107 0312 	add.w	r3, r7, #18
 8000ea4:	2101      	movs	r1, #1
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	f7ff fd06 	bl	80008b8 <print_KANYEdata>
	print_KANYEdata("\n", DATA_STRING);
 8000eac:	2100      	movs	r1, #0
 8000eae:	4844      	ldr	r0, [pc, #272]	; (8000fc0 <getBlocks+0x28c>)
 8000eb0:	f7ff fd02 	bl	80008b8 <print_KANYEdata>

	print_KANYEdata("X center of block in pixels: ", DATA_STRING);
 8000eb4:	2100      	movs	r1, #0
 8000eb6:	4850      	ldr	r0, [pc, #320]	; (8000ff8 <getBlocks+0x2c4>)
 8000eb8:	f7ff fcfe 	bl	80008b8 <print_KANYEdata>
	print_KANYEdata(&X_BlkPix, DATA_UINT16);
 8000ebc:	2101      	movs	r1, #1
 8000ebe:	4845      	ldr	r0, [pc, #276]	; (8000fd4 <getBlocks+0x2a0>)
 8000ec0:	f7ff fcfa 	bl	80008b8 <print_KANYEdata>
	print_KANYEdata("\n", DATA_STRING);
 8000ec4:	2100      	movs	r1, #0
 8000ec6:	483e      	ldr	r0, [pc, #248]	; (8000fc0 <getBlocks+0x28c>)
 8000ec8:	f7ff fcf6 	bl	80008b8 <print_KANYEdata>

	print_KANYEdata("Y center of block in pixels: ", DATA_STRING);
 8000ecc:	2100      	movs	r1, #0
 8000ece:	484b      	ldr	r0, [pc, #300]	; (8000ffc <getBlocks+0x2c8>)
 8000ed0:	f7ff fcf2 	bl	80008b8 <print_KANYEdata>
	print_KANYEdata(&Y_BlkPix, DATA_UINT16);
 8000ed4:	2101      	movs	r1, #1
 8000ed6:	4840      	ldr	r0, [pc, #256]	; (8000fd8 <getBlocks+0x2a4>)
 8000ed8:	f7ff fcee 	bl	80008b8 <print_KANYEdata>
	print_KANYEdata("\n", DATA_STRING);
 8000edc:	2100      	movs	r1, #0
 8000ede:	4838      	ldr	r0, [pc, #224]	; (8000fc0 <getBlocks+0x28c>)
 8000ee0:	f7ff fcea 	bl	80008b8 <print_KANYEdata>

	print_KANYEdata("Width of block in pixels: ", DATA_STRING);
 8000ee4:	2100      	movs	r1, #0
 8000ee6:	4846      	ldr	r0, [pc, #280]	; (8001000 <getBlocks+0x2cc>)
 8000ee8:	f7ff fce6 	bl	80008b8 <print_KANYEdata>
	print_KANYEdata(&WidthPix, DATA_UINT16);
 8000eec:	2101      	movs	r1, #1
 8000eee:	483b      	ldr	r0, [pc, #236]	; (8000fdc <getBlocks+0x2a8>)
 8000ef0:	f7ff fce2 	bl	80008b8 <print_KANYEdata>
	print_KANYEdata("\n", DATA_STRING);
 8000ef4:	2100      	movs	r1, #0
 8000ef6:	4832      	ldr	r0, [pc, #200]	; (8000fc0 <getBlocks+0x28c>)
 8000ef8:	f7ff fcde 	bl	80008b8 <print_KANYEdata>

	print_KANYEdata("Height of block in pixels: ", DATA_STRING);
 8000efc:	2100      	movs	r1, #0
 8000efe:	4841      	ldr	r0, [pc, #260]	; (8001004 <getBlocks+0x2d0>)
 8000f00:	f7ff fcda 	bl	80008b8 <print_KANYEdata>
	print_KANYEdata(&HeightPix, DATA_UINT16);
 8000f04:	2101      	movs	r1, #1
 8000f06:	4836      	ldr	r0, [pc, #216]	; (8000fe0 <getBlocks+0x2ac>)
 8000f08:	f7ff fcd6 	bl	80008b8 <print_KANYEdata>
	print_KANYEdata("\n", DATA_STRING);
 8000f0c:	2100      	movs	r1, #0
 8000f0e:	482c      	ldr	r0, [pc, #176]	; (8000fc0 <getBlocks+0x28c>)
 8000f10:	f7ff fcd2 	bl	80008b8 <print_KANYEdata>

	print_KANYEdata("Area of detected object: ", DATA_STRING);
 8000f14:	2100      	movs	r1, #0
 8000f16:	483c      	ldr	r0, [pc, #240]	; (8001008 <getBlocks+0x2d4>)
 8000f18:	f7ff fcce 	bl	80008b8 <print_KANYEdata>
	print_KANYEdata(&area, DATA_UINT16);
 8000f1c:	2101      	movs	r1, #1
 8000f1e:	4831      	ldr	r0, [pc, #196]	; (8000fe4 <getBlocks+0x2b0>)
 8000f20:	f7ff fcca 	bl	80008b8 <print_KANYEdata>
	print_KANYEdata("\n", DATA_STRING);
 8000f24:	2100      	movs	r1, #0
 8000f26:	4826      	ldr	r0, [pc, #152]	; (8000fc0 <getBlocks+0x28c>)
 8000f28:	f7ff fcc6 	bl	80008b8 <print_KANYEdata>

	print_KANYEdata("Angle of color code in degrees: ", DATA_STRING);
 8000f2c:	2100      	movs	r1, #0
 8000f2e:	4837      	ldr	r0, [pc, #220]	; (800100c <getBlocks+0x2d8>)
 8000f30:	f7ff fcc2 	bl	80008b8 <print_KANYEdata>
	print_KANYEdata(&color_deg, DATA_UINT16);
 8000f34:	f107 0310 	add.w	r3, r7, #16
 8000f38:	2101      	movs	r1, #1
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	f7ff fcbc 	bl	80008b8 <print_KANYEdata>
	print_KANYEdata("\n", DATA_STRING);
 8000f40:	2100      	movs	r1, #0
 8000f42:	481f      	ldr	r0, [pc, #124]	; (8000fc0 <getBlocks+0x28c>)
 8000f44:	f7ff fcb8 	bl	80008b8 <print_KANYEdata>

	print_KANYEdata("Tracking index of block: ", DATA_STRING);
 8000f48:	2100      	movs	r1, #0
 8000f4a:	4831      	ldr	r0, [pc, #196]	; (8001010 <getBlocks+0x2dc>)
 8000f4c:	f7ff fcb4 	bl	80008b8 <print_KANYEdata>
	print_KANYEdata(&track_idx, DATA_UINT16);
 8000f50:	f107 030f 	add.w	r3, r7, #15
 8000f54:	2101      	movs	r1, #1
 8000f56:	4618      	mov	r0, r3
 8000f58:	f7ff fcae 	bl	80008b8 <print_KANYEdata>
	print_KANYEdata("\n", DATA_STRING);
 8000f5c:	2100      	movs	r1, #0
 8000f5e:	4818      	ldr	r0, [pc, #96]	; (8000fc0 <getBlocks+0x28c>)
 8000f60:	f7ff fcaa 	bl	80008b8 <print_KANYEdata>

	print_KANYEdata("Age - number of frames this block has been tracked: ", DATA_STRING);
 8000f64:	2100      	movs	r1, #0
 8000f66:	482b      	ldr	r0, [pc, #172]	; (8001014 <getBlocks+0x2e0>)
 8000f68:	f7ff fca6 	bl	80008b8 <print_KANYEdata>
	print_KANYEdata(&blk_age, DATA_UINT16);
 8000f6c:	f107 030e 	add.w	r3, r7, #14
 8000f70:	2101      	movs	r1, #1
 8000f72:	4618      	mov	r0, r3
 8000f74:	f7ff fca0 	bl	80008b8 <print_KANYEdata>
	print_KANYEdata("\n", DATA_STRING);
 8000f78:	2100      	movs	r1, #0
 8000f7a:	4811      	ldr	r0, [pc, #68]	; (8000fc0 <getBlocks+0x28c>)
 8000f7c:	f7ff fc9c 	bl	80008b8 <print_KANYEdata>

	if(checksum == cal_checksum){
 8000f80:	4b19      	ldr	r3, [pc, #100]	; (8000fe8 <getBlocks+0x2b4>)
 8000f82:	881a      	ldrh	r2, [r3, #0]
 8000f84:	4b19      	ldr	r3, [pc, #100]	; (8000fec <getBlocks+0x2b8>)
 8000f86:	881b      	ldrh	r3, [r3, #0]
 8000f88:	429a      	cmp	r2, r3
 8000f8a:	d104      	bne.n	8000f96 <getBlocks+0x262>
		print_KANYEdata("getBlocks function checksum VALIDATION SUCCESS\n", DATA_STRING);
 8000f8c:	2100      	movs	r1, #0
 8000f8e:	4822      	ldr	r0, [pc, #136]	; (8001018 <getBlocks+0x2e4>)
 8000f90:	f7ff fc92 	bl	80008b8 <print_KANYEdata>
 8000f94:	e003      	b.n	8000f9e <getBlocks+0x26a>
	}else{
		print_KANYEdata("getBlocks function checksum VALIDATION FAILED\n", DATA_STRING);
 8000f96:	2100      	movs	r1, #0
 8000f98:	4820      	ldr	r0, [pc, #128]	; (800101c <getBlocks+0x2e8>)
 8000f9a:	f7ff fc8d 	bl	80008b8 <print_KANYEdata>
	}

	return checksum==cal_checksum?PIXY_RESULT_OK:PIXY_RESULT_ERROR;
 8000f9e:	4b12      	ldr	r3, [pc, #72]	; (8000fe8 <getBlocks+0x2b4>)
 8000fa0:	881a      	ldrh	r2, [r3, #0]
 8000fa2:	4b12      	ldr	r3, [pc, #72]	; (8000fec <getBlocks+0x2b8>)
 8000fa4:	881b      	ldrh	r3, [r3, #0]
 8000fa6:	429a      	cmp	r2, r3
 8000fa8:	d101      	bne.n	8000fae <getBlocks+0x27a>
 8000faa:	2300      	movs	r3, #0
 8000fac:	e001      	b.n	8000fb2 <getBlocks+0x27e>
 8000fae:	f04f 33ff 	mov.w	r3, #4294967295

}
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	3718      	adds	r7, #24
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	080035e0 	.word	0x080035e0
 8000fc0:	080033e8 	.word	0x080033e8
 8000fc4:	080035fc 	.word	0x080035fc
 8000fc8:	20000014 	.word	0x20000014
 8000fcc:	20000154 	.word	0x20000154
 8000fd0:	200001c8 	.word	0x200001c8
 8000fd4:	200001dc 	.word	0x200001dc
 8000fd8:	200001de 	.word	0x200001de
 8000fdc:	200001e0 	.word	0x200001e0
 8000fe0:	200001e2 	.word	0x200001e2
 8000fe4:	200001e4 	.word	0x200001e4
 8000fe8:	200001ec 	.word	0x200001ec
 8000fec:	200001ee 	.word	0x200001ee
 8000ff0:	080033d4 	.word	0x080033d4
 8000ff4:	08003628 	.word	0x08003628
 8000ff8:	08003648 	.word	0x08003648
 8000ffc:	08003668 	.word	0x08003668
 8001000:	08003688 	.word	0x08003688
 8001004:	080036a4 	.word	0x080036a4
 8001008:	080036c0 	.word	0x080036c0
 800100c:	080036dc 	.word	0x080036dc
 8001010:	08003700 	.word	0x08003700
 8001014:	0800371c 	.word	0x0800371c
 8001018:	08003754 	.word	0x08003754
 800101c:	0800332c 	.word	0x0800332c

08001020 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b090      	sub	sp, #64	; 0x40
 8001024:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001026:	f107 0318 	add.w	r3, r7, #24
 800102a:	2228      	movs	r2, #40	; 0x28
 800102c:	2100      	movs	r1, #0
 800102e:	4618      	mov	r0, r3
 8001030:	f001 fc9e 	bl	8002970 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001034:	1d3b      	adds	r3, r7, #4
 8001036:	2200      	movs	r2, #0
 8001038:	601a      	str	r2, [r3, #0]
 800103a:	605a      	str	r2, [r3, #4]
 800103c:	609a      	str	r2, [r3, #8]
 800103e:	60da      	str	r2, [r3, #12]
 8001040:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001042:	2302      	movs	r3, #2
 8001044:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001046:	2301      	movs	r3, #1
 8001048:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800104a:	2310      	movs	r3, #16
 800104c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800104e:	2302      	movs	r3, #2
 8001050:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8001052:	2300      	movs	r3, #0
 8001054:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8001056:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 800105a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800105c:	f107 0318 	add.w	r3, r7, #24
 8001060:	4618      	mov	r0, r3
 8001062:	f000 fde7 	bl	8001c34 <HAL_RCC_OscConfig>
 8001066:	4603      	mov	r3, r0
 8001068:	2b00      	cmp	r3, #0
 800106a:	d001      	beq.n	8001070 <SystemClock_Config+0x50>
  {
	Error_Handler();
 800106c:	f000 f906 	bl	800127c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001070:	230f      	movs	r3, #15
 8001072:	607b      	str	r3, [r7, #4]
							  |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001074:	2302      	movs	r3, #2
 8001076:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001078:	2300      	movs	r3, #0
 800107a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800107c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001080:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001082:	2300      	movs	r3, #0
 8001084:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001086:	1d3b      	adds	r3, r7, #4
 8001088:	2102      	movs	r1, #2
 800108a:	4618      	mov	r0, r3
 800108c:	f001 f854 	bl	8002138 <HAL_RCC_ClockConfig>
 8001090:	4603      	mov	r3, r0
 8001092:	2b00      	cmp	r3, #0
 8001094:	d001      	beq.n	800109a <SystemClock_Config+0x7a>
  {
	Error_Handler();
 8001096:	f000 f8f1 	bl	800127c <Error_Handler>
  }
}
 800109a:	bf00      	nop
 800109c:	3740      	adds	r7, #64	; 0x40
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}
	...

080010a4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80010a8:	4b11      	ldr	r3, [pc, #68]	; (80010f0 <MX_USART1_UART_Init+0x4c>)
 80010aa:	4a12      	ldr	r2, [pc, #72]	; (80010f4 <MX_USART1_UART_Init+0x50>)
 80010ac:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80010ae:	4b10      	ldr	r3, [pc, #64]	; (80010f0 <MX_USART1_UART_Init+0x4c>)
 80010b0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80010b4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80010b6:	4b0e      	ldr	r3, [pc, #56]	; (80010f0 <MX_USART1_UART_Init+0x4c>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80010bc:	4b0c      	ldr	r3, [pc, #48]	; (80010f0 <MX_USART1_UART_Init+0x4c>)
 80010be:	2200      	movs	r2, #0
 80010c0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80010c2:	4b0b      	ldr	r3, [pc, #44]	; (80010f0 <MX_USART1_UART_Init+0x4c>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80010c8:	4b09      	ldr	r3, [pc, #36]	; (80010f0 <MX_USART1_UART_Init+0x4c>)
 80010ca:	220c      	movs	r2, #12
 80010cc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010ce:	4b08      	ldr	r3, [pc, #32]	; (80010f0 <MX_USART1_UART_Init+0x4c>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80010d4:	4b06      	ldr	r3, [pc, #24]	; (80010f0 <MX_USART1_UART_Init+0x4c>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80010da:	4805      	ldr	r0, [pc, #20]	; (80010f0 <MX_USART1_UART_Init+0x4c>)
 80010dc:	f001 f9c4 	bl	8002468 <HAL_UART_Init>
 80010e0:	4603      	mov	r3, r0
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d001      	beq.n	80010ea <MX_USART1_UART_Init+0x46>
  {
	Error_Handler();
 80010e6:	f000 f8c9 	bl	800127c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80010ea:	bf00      	nop
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	200000cc 	.word	0x200000cc
 80010f4:	40013800 	.word	0x40013800

080010f8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80010fc:	4b11      	ldr	r3, [pc, #68]	; (8001144 <MX_USART2_UART_Init+0x4c>)
 80010fe:	4a12      	ldr	r2, [pc, #72]	; (8001148 <MX_USART2_UART_Init+0x50>)
 8001100:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001102:	4b10      	ldr	r3, [pc, #64]	; (8001144 <MX_USART2_UART_Init+0x4c>)
 8001104:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001108:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800110a:	4b0e      	ldr	r3, [pc, #56]	; (8001144 <MX_USART2_UART_Init+0x4c>)
 800110c:	2200      	movs	r2, #0
 800110e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001110:	4b0c      	ldr	r3, [pc, #48]	; (8001144 <MX_USART2_UART_Init+0x4c>)
 8001112:	2200      	movs	r2, #0
 8001114:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001116:	4b0b      	ldr	r3, [pc, #44]	; (8001144 <MX_USART2_UART_Init+0x4c>)
 8001118:	2200      	movs	r2, #0
 800111a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800111c:	4b09      	ldr	r3, [pc, #36]	; (8001144 <MX_USART2_UART_Init+0x4c>)
 800111e:	220c      	movs	r2, #12
 8001120:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001122:	4b08      	ldr	r3, [pc, #32]	; (8001144 <MX_USART2_UART_Init+0x4c>)
 8001124:	2200      	movs	r2, #0
 8001126:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001128:	4b06      	ldr	r3, [pc, #24]	; (8001144 <MX_USART2_UART_Init+0x4c>)
 800112a:	2200      	movs	r2, #0
 800112c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800112e:	4805      	ldr	r0, [pc, #20]	; (8001144 <MX_USART2_UART_Init+0x4c>)
 8001130:	f001 f99a 	bl	8002468 <HAL_UART_Init>
 8001134:	4603      	mov	r3, r0
 8001136:	2b00      	cmp	r3, #0
 8001138:	d001      	beq.n	800113e <MX_USART2_UART_Init+0x46>
  {
	Error_Handler();
 800113a:	f000 f89f 	bl	800127c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800113e:	bf00      	nop
 8001140:	bd80      	pop	{r7, pc}
 8001142:	bf00      	nop
 8001144:	20000110 	.word	0x20000110
 8001148:	40004400 	.word	0x40004400

0800114c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001150:	4b11      	ldr	r3, [pc, #68]	; (8001198 <MX_USART3_UART_Init+0x4c>)
 8001152:	4a12      	ldr	r2, [pc, #72]	; (800119c <MX_USART3_UART_Init+0x50>)
 8001154:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001156:	4b10      	ldr	r3, [pc, #64]	; (8001198 <MX_USART3_UART_Init+0x4c>)
 8001158:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800115c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800115e:	4b0e      	ldr	r3, [pc, #56]	; (8001198 <MX_USART3_UART_Init+0x4c>)
 8001160:	2200      	movs	r2, #0
 8001162:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001164:	4b0c      	ldr	r3, [pc, #48]	; (8001198 <MX_USART3_UART_Init+0x4c>)
 8001166:	2200      	movs	r2, #0
 8001168:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800116a:	4b0b      	ldr	r3, [pc, #44]	; (8001198 <MX_USART3_UART_Init+0x4c>)
 800116c:	2200      	movs	r2, #0
 800116e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001170:	4b09      	ldr	r3, [pc, #36]	; (8001198 <MX_USART3_UART_Init+0x4c>)
 8001172:	220c      	movs	r2, #12
 8001174:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001176:	4b08      	ldr	r3, [pc, #32]	; (8001198 <MX_USART3_UART_Init+0x4c>)
 8001178:	2200      	movs	r2, #0
 800117a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800117c:	4b06      	ldr	r3, [pc, #24]	; (8001198 <MX_USART3_UART_Init+0x4c>)
 800117e:	2200      	movs	r2, #0
 8001180:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001182:	4805      	ldr	r0, [pc, #20]	; (8001198 <MX_USART3_UART_Init+0x4c>)
 8001184:	f001 f970 	bl	8002468 <HAL_UART_Init>
 8001188:	4603      	mov	r3, r0
 800118a:	2b00      	cmp	r3, #0
 800118c:	d001      	beq.n	8001192 <MX_USART3_UART_Init+0x46>
  {
	Error_Handler();
 800118e:	f000 f875 	bl	800127c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001192:	bf00      	nop
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	20000154 	.word	0x20000154
 800119c:	40004800 	.word	0x40004800

080011a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b088      	sub	sp, #32
 80011a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011a6:	f107 0310 	add.w	r3, r7, #16
 80011aa:	2200      	movs	r2, #0
 80011ac:	601a      	str	r2, [r3, #0]
 80011ae:	605a      	str	r2, [r3, #4]
 80011b0:	609a      	str	r2, [r3, #8]
 80011b2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011b4:	4b2d      	ldr	r3, [pc, #180]	; (800126c <MX_GPIO_Init+0xcc>)
 80011b6:	699b      	ldr	r3, [r3, #24]
 80011b8:	4a2c      	ldr	r2, [pc, #176]	; (800126c <MX_GPIO_Init+0xcc>)
 80011ba:	f043 0310 	orr.w	r3, r3, #16
 80011be:	6193      	str	r3, [r2, #24]
 80011c0:	4b2a      	ldr	r3, [pc, #168]	; (800126c <MX_GPIO_Init+0xcc>)
 80011c2:	699b      	ldr	r3, [r3, #24]
 80011c4:	f003 0310 	and.w	r3, r3, #16
 80011c8:	60fb      	str	r3, [r7, #12]
 80011ca:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80011cc:	4b27      	ldr	r3, [pc, #156]	; (800126c <MX_GPIO_Init+0xcc>)
 80011ce:	699b      	ldr	r3, [r3, #24]
 80011d0:	4a26      	ldr	r2, [pc, #152]	; (800126c <MX_GPIO_Init+0xcc>)
 80011d2:	f043 0320 	orr.w	r3, r3, #32
 80011d6:	6193      	str	r3, [r2, #24]
 80011d8:	4b24      	ldr	r3, [pc, #144]	; (800126c <MX_GPIO_Init+0xcc>)
 80011da:	699b      	ldr	r3, [r3, #24]
 80011dc:	f003 0320 	and.w	r3, r3, #32
 80011e0:	60bb      	str	r3, [r7, #8]
 80011e2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011e4:	4b21      	ldr	r3, [pc, #132]	; (800126c <MX_GPIO_Init+0xcc>)
 80011e6:	699b      	ldr	r3, [r3, #24]
 80011e8:	4a20      	ldr	r2, [pc, #128]	; (800126c <MX_GPIO_Init+0xcc>)
 80011ea:	f043 0304 	orr.w	r3, r3, #4
 80011ee:	6193      	str	r3, [r2, #24]
 80011f0:	4b1e      	ldr	r3, [pc, #120]	; (800126c <MX_GPIO_Init+0xcc>)
 80011f2:	699b      	ldr	r3, [r3, #24]
 80011f4:	f003 0304 	and.w	r3, r3, #4
 80011f8:	607b      	str	r3, [r7, #4]
 80011fa:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011fc:	4b1b      	ldr	r3, [pc, #108]	; (800126c <MX_GPIO_Init+0xcc>)
 80011fe:	699b      	ldr	r3, [r3, #24]
 8001200:	4a1a      	ldr	r2, [pc, #104]	; (800126c <MX_GPIO_Init+0xcc>)
 8001202:	f043 0308 	orr.w	r3, r3, #8
 8001206:	6193      	str	r3, [r2, #24]
 8001208:	4b18      	ldr	r3, [pc, #96]	; (800126c <MX_GPIO_Init+0xcc>)
 800120a:	699b      	ldr	r3, [r3, #24]
 800120c:	f003 0308 	and.w	r3, r3, #8
 8001210:	603b      	str	r3, [r7, #0]
 8001212:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001214:	2200      	movs	r2, #0
 8001216:	2120      	movs	r1, #32
 8001218:	4815      	ldr	r0, [pc, #84]	; (8001270 <MX_GPIO_Init+0xd0>)
 800121a:	f000 fcd1 	bl	8001bc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800121e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001222:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001224:	4b13      	ldr	r3, [pc, #76]	; (8001274 <MX_GPIO_Init+0xd4>)
 8001226:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001228:	2300      	movs	r3, #0
 800122a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800122c:	f107 0310 	add.w	r3, r7, #16
 8001230:	4619      	mov	r1, r3
 8001232:	4811      	ldr	r0, [pc, #68]	; (8001278 <MX_GPIO_Init+0xd8>)
 8001234:	f000 fb40 	bl	80018b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001238:	2320      	movs	r3, #32
 800123a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800123c:	2301      	movs	r3, #1
 800123e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001240:	2300      	movs	r3, #0
 8001242:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001244:	2302      	movs	r3, #2
 8001246:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001248:	f107 0310 	add.w	r3, r7, #16
 800124c:	4619      	mov	r1, r3
 800124e:	4808      	ldr	r0, [pc, #32]	; (8001270 <MX_GPIO_Init+0xd0>)
 8001250:	f000 fb32 	bl	80018b8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001254:	2200      	movs	r2, #0
 8001256:	2100      	movs	r1, #0
 8001258:	2028      	movs	r0, #40	; 0x28
 800125a:	f000 faf6 	bl	800184a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800125e:	2028      	movs	r0, #40	; 0x28
 8001260:	f000 fb0f 	bl	8001882 <HAL_NVIC_EnableIRQ>

}
 8001264:	bf00      	nop
 8001266:	3720      	adds	r7, #32
 8001268:	46bd      	mov	sp, r7
 800126a:	bd80      	pop	{r7, pc}
 800126c:	40021000 	.word	0x40021000
 8001270:	40010800 	.word	0x40010800
 8001274:	10110000 	.word	0x10110000
 8001278:	40011000 	.word	0x40011000

0800127c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800127c:	b480      	push	{r7}
 800127e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001280:	b672      	cpsid	i
}
 8001282:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001284:	e7fe      	b.n	8001284 <Error_Handler+0x8>
	...

08001288 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001288:	b480      	push	{r7}
 800128a:	b085      	sub	sp, #20
 800128c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800128e:	4b15      	ldr	r3, [pc, #84]	; (80012e4 <HAL_MspInit+0x5c>)
 8001290:	699b      	ldr	r3, [r3, #24]
 8001292:	4a14      	ldr	r2, [pc, #80]	; (80012e4 <HAL_MspInit+0x5c>)
 8001294:	f043 0301 	orr.w	r3, r3, #1
 8001298:	6193      	str	r3, [r2, #24]
 800129a:	4b12      	ldr	r3, [pc, #72]	; (80012e4 <HAL_MspInit+0x5c>)
 800129c:	699b      	ldr	r3, [r3, #24]
 800129e:	f003 0301 	and.w	r3, r3, #1
 80012a2:	60bb      	str	r3, [r7, #8]
 80012a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012a6:	4b0f      	ldr	r3, [pc, #60]	; (80012e4 <HAL_MspInit+0x5c>)
 80012a8:	69db      	ldr	r3, [r3, #28]
 80012aa:	4a0e      	ldr	r2, [pc, #56]	; (80012e4 <HAL_MspInit+0x5c>)
 80012ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012b0:	61d3      	str	r3, [r2, #28]
 80012b2:	4b0c      	ldr	r3, [pc, #48]	; (80012e4 <HAL_MspInit+0x5c>)
 80012b4:	69db      	ldr	r3, [r3, #28]
 80012b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012ba:	607b      	str	r3, [r7, #4]
 80012bc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80012be:	4b0a      	ldr	r3, [pc, #40]	; (80012e8 <HAL_MspInit+0x60>)
 80012c0:	685b      	ldr	r3, [r3, #4]
 80012c2:	60fb      	str	r3, [r7, #12]
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80012ca:	60fb      	str	r3, [r7, #12]
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80012d2:	60fb      	str	r3, [r7, #12]
 80012d4:	4a04      	ldr	r2, [pc, #16]	; (80012e8 <HAL_MspInit+0x60>)
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012da:	bf00      	nop
 80012dc:	3714      	adds	r7, #20
 80012de:	46bd      	mov	sp, r7
 80012e0:	bc80      	pop	{r7}
 80012e2:	4770      	bx	lr
 80012e4:	40021000 	.word	0x40021000
 80012e8:	40010000 	.word	0x40010000

080012ec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b08c      	sub	sp, #48	; 0x30
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012f4:	f107 0320 	add.w	r3, r7, #32
 80012f8:	2200      	movs	r2, #0
 80012fa:	601a      	str	r2, [r3, #0]
 80012fc:	605a      	str	r2, [r3, #4]
 80012fe:	609a      	str	r2, [r3, #8]
 8001300:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	4a53      	ldr	r2, [pc, #332]	; (8001454 <HAL_UART_MspInit+0x168>)
 8001308:	4293      	cmp	r3, r2
 800130a:	d132      	bne.n	8001372 <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800130c:	4b52      	ldr	r3, [pc, #328]	; (8001458 <HAL_UART_MspInit+0x16c>)
 800130e:	699b      	ldr	r3, [r3, #24]
 8001310:	4a51      	ldr	r2, [pc, #324]	; (8001458 <HAL_UART_MspInit+0x16c>)
 8001312:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001316:	6193      	str	r3, [r2, #24]
 8001318:	4b4f      	ldr	r3, [pc, #316]	; (8001458 <HAL_UART_MspInit+0x16c>)
 800131a:	699b      	ldr	r3, [r3, #24]
 800131c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001320:	61fb      	str	r3, [r7, #28]
 8001322:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001324:	4b4c      	ldr	r3, [pc, #304]	; (8001458 <HAL_UART_MspInit+0x16c>)
 8001326:	699b      	ldr	r3, [r3, #24]
 8001328:	4a4b      	ldr	r2, [pc, #300]	; (8001458 <HAL_UART_MspInit+0x16c>)
 800132a:	f043 0304 	orr.w	r3, r3, #4
 800132e:	6193      	str	r3, [r2, #24]
 8001330:	4b49      	ldr	r3, [pc, #292]	; (8001458 <HAL_UART_MspInit+0x16c>)
 8001332:	699b      	ldr	r3, [r3, #24]
 8001334:	f003 0304 	and.w	r3, r3, #4
 8001338:	61bb      	str	r3, [r7, #24]
 800133a:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800133c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001340:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001342:	2302      	movs	r3, #2
 8001344:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001346:	2303      	movs	r3, #3
 8001348:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800134a:	f107 0320 	add.w	r3, r7, #32
 800134e:	4619      	mov	r1, r3
 8001350:	4842      	ldr	r0, [pc, #264]	; (800145c <HAL_UART_MspInit+0x170>)
 8001352:	f000 fab1 	bl	80018b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001356:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800135a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800135c:	2300      	movs	r3, #0
 800135e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001360:	2300      	movs	r3, #0
 8001362:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001364:	f107 0320 	add.w	r3, r7, #32
 8001368:	4619      	mov	r1, r3
 800136a:	483c      	ldr	r0, [pc, #240]	; (800145c <HAL_UART_MspInit+0x170>)
 800136c:	f000 faa4 	bl	80018b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001370:	e06c      	b.n	800144c <HAL_UART_MspInit+0x160>
  else if(huart->Instance==USART2)
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	4a3a      	ldr	r2, [pc, #232]	; (8001460 <HAL_UART_MspInit+0x174>)
 8001378:	4293      	cmp	r3, r2
 800137a:	d130      	bne.n	80013de <HAL_UART_MspInit+0xf2>
    __HAL_RCC_USART2_CLK_ENABLE();
 800137c:	4b36      	ldr	r3, [pc, #216]	; (8001458 <HAL_UART_MspInit+0x16c>)
 800137e:	69db      	ldr	r3, [r3, #28]
 8001380:	4a35      	ldr	r2, [pc, #212]	; (8001458 <HAL_UART_MspInit+0x16c>)
 8001382:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001386:	61d3      	str	r3, [r2, #28]
 8001388:	4b33      	ldr	r3, [pc, #204]	; (8001458 <HAL_UART_MspInit+0x16c>)
 800138a:	69db      	ldr	r3, [r3, #28]
 800138c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001390:	617b      	str	r3, [r7, #20]
 8001392:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001394:	4b30      	ldr	r3, [pc, #192]	; (8001458 <HAL_UART_MspInit+0x16c>)
 8001396:	699b      	ldr	r3, [r3, #24]
 8001398:	4a2f      	ldr	r2, [pc, #188]	; (8001458 <HAL_UART_MspInit+0x16c>)
 800139a:	f043 0304 	orr.w	r3, r3, #4
 800139e:	6193      	str	r3, [r2, #24]
 80013a0:	4b2d      	ldr	r3, [pc, #180]	; (8001458 <HAL_UART_MspInit+0x16c>)
 80013a2:	699b      	ldr	r3, [r3, #24]
 80013a4:	f003 0304 	and.w	r3, r3, #4
 80013a8:	613b      	str	r3, [r7, #16]
 80013aa:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = USART_TX_Pin;
 80013ac:	2304      	movs	r3, #4
 80013ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013b0:	2302      	movs	r3, #2
 80013b2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013b4:	2302      	movs	r3, #2
 80013b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(USART_TX_GPIO_Port, &GPIO_InitStruct);
 80013b8:	f107 0320 	add.w	r3, r7, #32
 80013bc:	4619      	mov	r1, r3
 80013be:	4827      	ldr	r0, [pc, #156]	; (800145c <HAL_UART_MspInit+0x170>)
 80013c0:	f000 fa7a 	bl	80018b8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80013c4:	2308      	movs	r3, #8
 80013c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013c8:	2300      	movs	r3, #0
 80013ca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013cc:	2300      	movs	r3, #0
 80013ce:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013d0:	f107 0320 	add.w	r3, r7, #32
 80013d4:	4619      	mov	r1, r3
 80013d6:	4821      	ldr	r0, [pc, #132]	; (800145c <HAL_UART_MspInit+0x170>)
 80013d8:	f000 fa6e 	bl	80018b8 <HAL_GPIO_Init>
}
 80013dc:	e036      	b.n	800144c <HAL_UART_MspInit+0x160>
  else if(huart->Instance==USART3)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	4a20      	ldr	r2, [pc, #128]	; (8001464 <HAL_UART_MspInit+0x178>)
 80013e4:	4293      	cmp	r3, r2
 80013e6:	d131      	bne.n	800144c <HAL_UART_MspInit+0x160>
    __HAL_RCC_USART3_CLK_ENABLE();
 80013e8:	4b1b      	ldr	r3, [pc, #108]	; (8001458 <HAL_UART_MspInit+0x16c>)
 80013ea:	69db      	ldr	r3, [r3, #28]
 80013ec:	4a1a      	ldr	r2, [pc, #104]	; (8001458 <HAL_UART_MspInit+0x16c>)
 80013ee:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80013f2:	61d3      	str	r3, [r2, #28]
 80013f4:	4b18      	ldr	r3, [pc, #96]	; (8001458 <HAL_UART_MspInit+0x16c>)
 80013f6:	69db      	ldr	r3, [r3, #28]
 80013f8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80013fc:	60fb      	str	r3, [r7, #12]
 80013fe:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001400:	4b15      	ldr	r3, [pc, #84]	; (8001458 <HAL_UART_MspInit+0x16c>)
 8001402:	699b      	ldr	r3, [r3, #24]
 8001404:	4a14      	ldr	r2, [pc, #80]	; (8001458 <HAL_UART_MspInit+0x16c>)
 8001406:	f043 0308 	orr.w	r3, r3, #8
 800140a:	6193      	str	r3, [r2, #24]
 800140c:	4b12      	ldr	r3, [pc, #72]	; (8001458 <HAL_UART_MspInit+0x16c>)
 800140e:	699b      	ldr	r3, [r3, #24]
 8001410:	f003 0308 	and.w	r3, r3, #8
 8001414:	60bb      	str	r3, [r7, #8]
 8001416:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001418:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800141c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800141e:	2302      	movs	r3, #2
 8001420:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001422:	2303      	movs	r3, #3
 8001424:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001426:	f107 0320 	add.w	r3, r7, #32
 800142a:	4619      	mov	r1, r3
 800142c:	480e      	ldr	r0, [pc, #56]	; (8001468 <HAL_UART_MspInit+0x17c>)
 800142e:	f000 fa43 	bl	80018b8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001432:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001436:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001438:	2300      	movs	r3, #0
 800143a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800143c:	2300      	movs	r3, #0
 800143e:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001440:	f107 0320 	add.w	r3, r7, #32
 8001444:	4619      	mov	r1, r3
 8001446:	4808      	ldr	r0, [pc, #32]	; (8001468 <HAL_UART_MspInit+0x17c>)
 8001448:	f000 fa36 	bl	80018b8 <HAL_GPIO_Init>
}
 800144c:	bf00      	nop
 800144e:	3730      	adds	r7, #48	; 0x30
 8001450:	46bd      	mov	sp, r7
 8001452:	bd80      	pop	{r7, pc}
 8001454:	40013800 	.word	0x40013800
 8001458:	40021000 	.word	0x40021000
 800145c:	40010800 	.word	0x40010800
 8001460:	40004400 	.word	0x40004400
 8001464:	40004800 	.word	0x40004800
 8001468:	40010c00 	.word	0x40010c00

0800146c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800146c:	b480      	push	{r7}
 800146e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001470:	e7fe      	b.n	8001470 <NMI_Handler+0x4>

08001472 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001472:	b480      	push	{r7}
 8001474:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001476:	e7fe      	b.n	8001476 <HardFault_Handler+0x4>

08001478 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001478:	b480      	push	{r7}
 800147a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800147c:	e7fe      	b.n	800147c <MemManage_Handler+0x4>

0800147e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800147e:	b480      	push	{r7}
 8001480:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001482:	e7fe      	b.n	8001482 <BusFault_Handler+0x4>

08001484 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001484:	b480      	push	{r7}
 8001486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001488:	e7fe      	b.n	8001488 <UsageFault_Handler+0x4>

0800148a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800148a:	b480      	push	{r7}
 800148c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800148e:	bf00      	nop
 8001490:	46bd      	mov	sp, r7
 8001492:	bc80      	pop	{r7}
 8001494:	4770      	bx	lr

08001496 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001496:	b480      	push	{r7}
 8001498:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800149a:	bf00      	nop
 800149c:	46bd      	mov	sp, r7
 800149e:	bc80      	pop	{r7}
 80014a0:	4770      	bx	lr

080014a2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014a2:	b480      	push	{r7}
 80014a4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014a6:	bf00      	nop
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bc80      	pop	{r7}
 80014ac:	4770      	bx	lr

080014ae <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014ae:	b580      	push	{r7, lr}
 80014b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014b2:	f000 f8b3 	bl	800161c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014b6:	bf00      	nop
 80014b8:	bd80      	pop	{r7, pc}

080014ba <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80014ba:	b580      	push	{r7, lr}
 80014bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80014be:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80014c2:	f000 fb95 	bl	8001bf0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80014c6:	bf00      	nop
 80014c8:	bd80      	pop	{r7, pc}
	...

080014cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b086      	sub	sp, #24
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80014d4:	4a14      	ldr	r2, [pc, #80]	; (8001528 <_sbrk+0x5c>)
 80014d6:	4b15      	ldr	r3, [pc, #84]	; (800152c <_sbrk+0x60>)
 80014d8:	1ad3      	subs	r3, r2, r3
 80014da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80014dc:	697b      	ldr	r3, [r7, #20]
 80014de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80014e0:	4b13      	ldr	r3, [pc, #76]	; (8001530 <_sbrk+0x64>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d102      	bne.n	80014ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80014e8:	4b11      	ldr	r3, [pc, #68]	; (8001530 <_sbrk+0x64>)
 80014ea:	4a12      	ldr	r2, [pc, #72]	; (8001534 <_sbrk+0x68>)
 80014ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80014ee:	4b10      	ldr	r3, [pc, #64]	; (8001530 <_sbrk+0x64>)
 80014f0:	681a      	ldr	r2, [r3, #0]
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	4413      	add	r3, r2
 80014f6:	693a      	ldr	r2, [r7, #16]
 80014f8:	429a      	cmp	r2, r3
 80014fa:	d207      	bcs.n	800150c <_sbrk+0x40>
  {
    errno = ENOMEM;
 80014fc:	f001 fa0e 	bl	800291c <__errno>
 8001500:	4603      	mov	r3, r0
 8001502:	220c      	movs	r2, #12
 8001504:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001506:	f04f 33ff 	mov.w	r3, #4294967295
 800150a:	e009      	b.n	8001520 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800150c:	4b08      	ldr	r3, [pc, #32]	; (8001530 <_sbrk+0x64>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001512:	4b07      	ldr	r3, [pc, #28]	; (8001530 <_sbrk+0x64>)
 8001514:	681a      	ldr	r2, [r3, #0]
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	4413      	add	r3, r2
 800151a:	4a05      	ldr	r2, [pc, #20]	; (8001530 <_sbrk+0x64>)
 800151c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800151e:	68fb      	ldr	r3, [r7, #12]
}
 8001520:	4618      	mov	r0, r3
 8001522:	3718      	adds	r7, #24
 8001524:	46bd      	mov	sp, r7
 8001526:	bd80      	pop	{r7, pc}
 8001528:	20005000 	.word	0x20005000
 800152c:	00000400 	.word	0x00000400
 8001530:	200001f4 	.word	0x200001f4
 8001534:	20000210 	.word	0x20000210

08001538 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001538:	b480      	push	{r7}
 800153a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800153c:	bf00      	nop
 800153e:	46bd      	mov	sp, r7
 8001540:	bc80      	pop	{r7}
 8001542:	4770      	bx	lr

08001544 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001544:	480c      	ldr	r0, [pc, #48]	; (8001578 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001546:	490d      	ldr	r1, [pc, #52]	; (800157c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001548:	4a0d      	ldr	r2, [pc, #52]	; (8001580 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800154a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800154c:	e002      	b.n	8001554 <LoopCopyDataInit>

0800154e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800154e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001550:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001552:	3304      	adds	r3, #4

08001554 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001554:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001556:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001558:	d3f9      	bcc.n	800154e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800155a:	4a0a      	ldr	r2, [pc, #40]	; (8001584 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800155c:	4c0a      	ldr	r4, [pc, #40]	; (8001588 <LoopFillZerobss+0x22>)
  movs r3, #0
 800155e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001560:	e001      	b.n	8001566 <LoopFillZerobss>

08001562 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001562:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001564:	3204      	adds	r2, #4

08001566 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001566:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001568:	d3fb      	bcc.n	8001562 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800156a:	f7ff ffe5 	bl	8001538 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800156e:	f001 f9db 	bl	8002928 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001572:	f7fe fe53 	bl	800021c <main>
  bx lr
 8001576:	4770      	bx	lr
  ldr r0, =_sdata
 8001578:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800157c:	200000b0 	.word	0x200000b0
  ldr r2, =_sidata
 8001580:	080037e8 	.word	0x080037e8
  ldr r2, =_sbss
 8001584:	200000b0 	.word	0x200000b0
  ldr r4, =_ebss
 8001588:	2000020c 	.word	0x2000020c

0800158c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800158c:	e7fe      	b.n	800158c <ADC1_2_IRQHandler>
	...

08001590 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001594:	4b08      	ldr	r3, [pc, #32]	; (80015b8 <HAL_Init+0x28>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	4a07      	ldr	r2, [pc, #28]	; (80015b8 <HAL_Init+0x28>)
 800159a:	f043 0310 	orr.w	r3, r3, #16
 800159e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015a0:	2003      	movs	r0, #3
 80015a2:	f000 f947 	bl	8001834 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015a6:	2000      	movs	r0, #0
 80015a8:	f000 f808 	bl	80015bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80015ac:	f7ff fe6c 	bl	8001288 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015b0:	2300      	movs	r3, #0
}
 80015b2:	4618      	mov	r0, r3
 80015b4:	bd80      	pop	{r7, pc}
 80015b6:	bf00      	nop
 80015b8:	40022000 	.word	0x40022000

080015bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b082      	sub	sp, #8
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80015c4:	4b12      	ldr	r3, [pc, #72]	; (8001610 <HAL_InitTick+0x54>)
 80015c6:	681a      	ldr	r2, [r3, #0]
 80015c8:	4b12      	ldr	r3, [pc, #72]	; (8001614 <HAL_InitTick+0x58>)
 80015ca:	781b      	ldrb	r3, [r3, #0]
 80015cc:	4619      	mov	r1, r3
 80015ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80015d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80015da:	4618      	mov	r0, r3
 80015dc:	f000 f95f 	bl	800189e <HAL_SYSTICK_Config>
 80015e0:	4603      	mov	r3, r0
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d001      	beq.n	80015ea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80015e6:	2301      	movs	r3, #1
 80015e8:	e00e      	b.n	8001608 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	2b0f      	cmp	r3, #15
 80015ee:	d80a      	bhi.n	8001606 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015f0:	2200      	movs	r2, #0
 80015f2:	6879      	ldr	r1, [r7, #4]
 80015f4:	f04f 30ff 	mov.w	r0, #4294967295
 80015f8:	f000 f927 	bl	800184a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015fc:	4a06      	ldr	r2, [pc, #24]	; (8001618 <HAL_InitTick+0x5c>)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001602:	2300      	movs	r3, #0
 8001604:	e000      	b.n	8001608 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001606:	2301      	movs	r3, #1
}
 8001608:	4618      	mov	r0, r3
 800160a:	3708      	adds	r7, #8
 800160c:	46bd      	mov	sp, r7
 800160e:	bd80      	pop	{r7, pc}
 8001610:	20000040 	.word	0x20000040
 8001614:	20000048 	.word	0x20000048
 8001618:	20000044 	.word	0x20000044

0800161c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800161c:	b480      	push	{r7}
 800161e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001620:	4b05      	ldr	r3, [pc, #20]	; (8001638 <HAL_IncTick+0x1c>)
 8001622:	781b      	ldrb	r3, [r3, #0]
 8001624:	461a      	mov	r2, r3
 8001626:	4b05      	ldr	r3, [pc, #20]	; (800163c <HAL_IncTick+0x20>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	4413      	add	r3, r2
 800162c:	4a03      	ldr	r2, [pc, #12]	; (800163c <HAL_IncTick+0x20>)
 800162e:	6013      	str	r3, [r2, #0]
}
 8001630:	bf00      	nop
 8001632:	46bd      	mov	sp, r7
 8001634:	bc80      	pop	{r7}
 8001636:	4770      	bx	lr
 8001638:	20000048 	.word	0x20000048
 800163c:	200001f8 	.word	0x200001f8

08001640 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001640:	b480      	push	{r7}
 8001642:	af00      	add	r7, sp, #0
  return uwTick;
 8001644:	4b02      	ldr	r3, [pc, #8]	; (8001650 <HAL_GetTick+0x10>)
 8001646:	681b      	ldr	r3, [r3, #0]
}
 8001648:	4618      	mov	r0, r3
 800164a:	46bd      	mov	sp, r7
 800164c:	bc80      	pop	{r7}
 800164e:	4770      	bx	lr
 8001650:	200001f8 	.word	0x200001f8

08001654 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b084      	sub	sp, #16
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800165c:	f7ff fff0 	bl	8001640 <HAL_GetTick>
 8001660:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	f1b3 3fff 	cmp.w	r3, #4294967295
 800166c:	d005      	beq.n	800167a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800166e:	4b0a      	ldr	r3, [pc, #40]	; (8001698 <HAL_Delay+0x44>)
 8001670:	781b      	ldrb	r3, [r3, #0]
 8001672:	461a      	mov	r2, r3
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	4413      	add	r3, r2
 8001678:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800167a:	bf00      	nop
 800167c:	f7ff ffe0 	bl	8001640 <HAL_GetTick>
 8001680:	4602      	mov	r2, r0
 8001682:	68bb      	ldr	r3, [r7, #8]
 8001684:	1ad3      	subs	r3, r2, r3
 8001686:	68fa      	ldr	r2, [r7, #12]
 8001688:	429a      	cmp	r2, r3
 800168a:	d8f7      	bhi.n	800167c <HAL_Delay+0x28>
  {
  }
}
 800168c:	bf00      	nop
 800168e:	bf00      	nop
 8001690:	3710      	adds	r7, #16
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}
 8001696:	bf00      	nop
 8001698:	20000048 	.word	0x20000048

0800169c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800169c:	b480      	push	{r7}
 800169e:	b085      	sub	sp, #20
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	f003 0307 	and.w	r3, r3, #7
 80016aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016ac:	4b0c      	ldr	r3, [pc, #48]	; (80016e0 <__NVIC_SetPriorityGrouping+0x44>)
 80016ae:	68db      	ldr	r3, [r3, #12]
 80016b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016b2:	68ba      	ldr	r2, [r7, #8]
 80016b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80016b8:	4013      	ands	r3, r2
 80016ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016c0:	68bb      	ldr	r3, [r7, #8]
 80016c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016c4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80016c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016ce:	4a04      	ldr	r2, [pc, #16]	; (80016e0 <__NVIC_SetPriorityGrouping+0x44>)
 80016d0:	68bb      	ldr	r3, [r7, #8]
 80016d2:	60d3      	str	r3, [r2, #12]
}
 80016d4:	bf00      	nop
 80016d6:	3714      	adds	r7, #20
 80016d8:	46bd      	mov	sp, r7
 80016da:	bc80      	pop	{r7}
 80016dc:	4770      	bx	lr
 80016de:	bf00      	nop
 80016e0:	e000ed00 	.word	0xe000ed00

080016e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016e4:	b480      	push	{r7}
 80016e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016e8:	4b04      	ldr	r3, [pc, #16]	; (80016fc <__NVIC_GetPriorityGrouping+0x18>)
 80016ea:	68db      	ldr	r3, [r3, #12]
 80016ec:	0a1b      	lsrs	r3, r3, #8
 80016ee:	f003 0307 	and.w	r3, r3, #7
}
 80016f2:	4618      	mov	r0, r3
 80016f4:	46bd      	mov	sp, r7
 80016f6:	bc80      	pop	{r7}
 80016f8:	4770      	bx	lr
 80016fa:	bf00      	nop
 80016fc:	e000ed00 	.word	0xe000ed00

08001700 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001700:	b480      	push	{r7}
 8001702:	b083      	sub	sp, #12
 8001704:	af00      	add	r7, sp, #0
 8001706:	4603      	mov	r3, r0
 8001708:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800170a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800170e:	2b00      	cmp	r3, #0
 8001710:	db0b      	blt.n	800172a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001712:	79fb      	ldrb	r3, [r7, #7]
 8001714:	f003 021f 	and.w	r2, r3, #31
 8001718:	4906      	ldr	r1, [pc, #24]	; (8001734 <__NVIC_EnableIRQ+0x34>)
 800171a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800171e:	095b      	lsrs	r3, r3, #5
 8001720:	2001      	movs	r0, #1
 8001722:	fa00 f202 	lsl.w	r2, r0, r2
 8001726:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800172a:	bf00      	nop
 800172c:	370c      	adds	r7, #12
 800172e:	46bd      	mov	sp, r7
 8001730:	bc80      	pop	{r7}
 8001732:	4770      	bx	lr
 8001734:	e000e100 	.word	0xe000e100

08001738 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001738:	b480      	push	{r7}
 800173a:	b083      	sub	sp, #12
 800173c:	af00      	add	r7, sp, #0
 800173e:	4603      	mov	r3, r0
 8001740:	6039      	str	r1, [r7, #0]
 8001742:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001744:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001748:	2b00      	cmp	r3, #0
 800174a:	db0a      	blt.n	8001762 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	b2da      	uxtb	r2, r3
 8001750:	490c      	ldr	r1, [pc, #48]	; (8001784 <__NVIC_SetPriority+0x4c>)
 8001752:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001756:	0112      	lsls	r2, r2, #4
 8001758:	b2d2      	uxtb	r2, r2
 800175a:	440b      	add	r3, r1
 800175c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001760:	e00a      	b.n	8001778 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001762:	683b      	ldr	r3, [r7, #0]
 8001764:	b2da      	uxtb	r2, r3
 8001766:	4908      	ldr	r1, [pc, #32]	; (8001788 <__NVIC_SetPriority+0x50>)
 8001768:	79fb      	ldrb	r3, [r7, #7]
 800176a:	f003 030f 	and.w	r3, r3, #15
 800176e:	3b04      	subs	r3, #4
 8001770:	0112      	lsls	r2, r2, #4
 8001772:	b2d2      	uxtb	r2, r2
 8001774:	440b      	add	r3, r1
 8001776:	761a      	strb	r2, [r3, #24]
}
 8001778:	bf00      	nop
 800177a:	370c      	adds	r7, #12
 800177c:	46bd      	mov	sp, r7
 800177e:	bc80      	pop	{r7}
 8001780:	4770      	bx	lr
 8001782:	bf00      	nop
 8001784:	e000e100 	.word	0xe000e100
 8001788:	e000ed00 	.word	0xe000ed00

0800178c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800178c:	b480      	push	{r7}
 800178e:	b089      	sub	sp, #36	; 0x24
 8001790:	af00      	add	r7, sp, #0
 8001792:	60f8      	str	r0, [r7, #12]
 8001794:	60b9      	str	r1, [r7, #8]
 8001796:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	f003 0307 	and.w	r3, r3, #7
 800179e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017a0:	69fb      	ldr	r3, [r7, #28]
 80017a2:	f1c3 0307 	rsb	r3, r3, #7
 80017a6:	2b04      	cmp	r3, #4
 80017a8:	bf28      	it	cs
 80017aa:	2304      	movcs	r3, #4
 80017ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017ae:	69fb      	ldr	r3, [r7, #28]
 80017b0:	3304      	adds	r3, #4
 80017b2:	2b06      	cmp	r3, #6
 80017b4:	d902      	bls.n	80017bc <NVIC_EncodePriority+0x30>
 80017b6:	69fb      	ldr	r3, [r7, #28]
 80017b8:	3b03      	subs	r3, #3
 80017ba:	e000      	b.n	80017be <NVIC_EncodePriority+0x32>
 80017bc:	2300      	movs	r3, #0
 80017be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017c0:	f04f 32ff 	mov.w	r2, #4294967295
 80017c4:	69bb      	ldr	r3, [r7, #24]
 80017c6:	fa02 f303 	lsl.w	r3, r2, r3
 80017ca:	43da      	mvns	r2, r3
 80017cc:	68bb      	ldr	r3, [r7, #8]
 80017ce:	401a      	ands	r2, r3
 80017d0:	697b      	ldr	r3, [r7, #20]
 80017d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017d4:	f04f 31ff 	mov.w	r1, #4294967295
 80017d8:	697b      	ldr	r3, [r7, #20]
 80017da:	fa01 f303 	lsl.w	r3, r1, r3
 80017de:	43d9      	mvns	r1, r3
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017e4:	4313      	orrs	r3, r2
         );
}
 80017e6:	4618      	mov	r0, r3
 80017e8:	3724      	adds	r7, #36	; 0x24
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bc80      	pop	{r7}
 80017ee:	4770      	bx	lr

080017f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b082      	sub	sp, #8
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	3b01      	subs	r3, #1
 80017fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001800:	d301      	bcc.n	8001806 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001802:	2301      	movs	r3, #1
 8001804:	e00f      	b.n	8001826 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001806:	4a0a      	ldr	r2, [pc, #40]	; (8001830 <SysTick_Config+0x40>)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	3b01      	subs	r3, #1
 800180c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800180e:	210f      	movs	r1, #15
 8001810:	f04f 30ff 	mov.w	r0, #4294967295
 8001814:	f7ff ff90 	bl	8001738 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001818:	4b05      	ldr	r3, [pc, #20]	; (8001830 <SysTick_Config+0x40>)
 800181a:	2200      	movs	r2, #0
 800181c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800181e:	4b04      	ldr	r3, [pc, #16]	; (8001830 <SysTick_Config+0x40>)
 8001820:	2207      	movs	r2, #7
 8001822:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001824:	2300      	movs	r3, #0
}
 8001826:	4618      	mov	r0, r3
 8001828:	3708      	adds	r7, #8
 800182a:	46bd      	mov	sp, r7
 800182c:	bd80      	pop	{r7, pc}
 800182e:	bf00      	nop
 8001830:	e000e010 	.word	0xe000e010

08001834 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b082      	sub	sp, #8
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800183c:	6878      	ldr	r0, [r7, #4]
 800183e:	f7ff ff2d 	bl	800169c <__NVIC_SetPriorityGrouping>
}
 8001842:	bf00      	nop
 8001844:	3708      	adds	r7, #8
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}

0800184a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800184a:	b580      	push	{r7, lr}
 800184c:	b086      	sub	sp, #24
 800184e:	af00      	add	r7, sp, #0
 8001850:	4603      	mov	r3, r0
 8001852:	60b9      	str	r1, [r7, #8]
 8001854:	607a      	str	r2, [r7, #4]
 8001856:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001858:	2300      	movs	r3, #0
 800185a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800185c:	f7ff ff42 	bl	80016e4 <__NVIC_GetPriorityGrouping>
 8001860:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001862:	687a      	ldr	r2, [r7, #4]
 8001864:	68b9      	ldr	r1, [r7, #8]
 8001866:	6978      	ldr	r0, [r7, #20]
 8001868:	f7ff ff90 	bl	800178c <NVIC_EncodePriority>
 800186c:	4602      	mov	r2, r0
 800186e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001872:	4611      	mov	r1, r2
 8001874:	4618      	mov	r0, r3
 8001876:	f7ff ff5f 	bl	8001738 <__NVIC_SetPriority>
}
 800187a:	bf00      	nop
 800187c:	3718      	adds	r7, #24
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}

08001882 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001882:	b580      	push	{r7, lr}
 8001884:	b082      	sub	sp, #8
 8001886:	af00      	add	r7, sp, #0
 8001888:	4603      	mov	r3, r0
 800188a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800188c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001890:	4618      	mov	r0, r3
 8001892:	f7ff ff35 	bl	8001700 <__NVIC_EnableIRQ>
}
 8001896:	bf00      	nop
 8001898:	3708      	adds	r7, #8
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}

0800189e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800189e:	b580      	push	{r7, lr}
 80018a0:	b082      	sub	sp, #8
 80018a2:	af00      	add	r7, sp, #0
 80018a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018a6:	6878      	ldr	r0, [r7, #4]
 80018a8:	f7ff ffa2 	bl	80017f0 <SysTick_Config>
 80018ac:	4603      	mov	r3, r0
}
 80018ae:	4618      	mov	r0, r3
 80018b0:	3708      	adds	r7, #8
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bd80      	pop	{r7, pc}
	...

080018b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018b8:	b480      	push	{r7}
 80018ba:	b08b      	sub	sp, #44	; 0x2c
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
 80018c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80018c2:	2300      	movs	r3, #0
 80018c4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80018c6:	2300      	movs	r3, #0
 80018c8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018ca:	e169      	b.n	8001ba0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80018cc:	2201      	movs	r2, #1
 80018ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018d0:	fa02 f303 	lsl.w	r3, r2, r3
 80018d4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80018d6:	683b      	ldr	r3, [r7, #0]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	69fa      	ldr	r2, [r7, #28]
 80018dc:	4013      	ands	r3, r2
 80018de:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80018e0:	69ba      	ldr	r2, [r7, #24]
 80018e2:	69fb      	ldr	r3, [r7, #28]
 80018e4:	429a      	cmp	r2, r3
 80018e6:	f040 8158 	bne.w	8001b9a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	685b      	ldr	r3, [r3, #4]
 80018ee:	4a9a      	ldr	r2, [pc, #616]	; (8001b58 <HAL_GPIO_Init+0x2a0>)
 80018f0:	4293      	cmp	r3, r2
 80018f2:	d05e      	beq.n	80019b2 <HAL_GPIO_Init+0xfa>
 80018f4:	4a98      	ldr	r2, [pc, #608]	; (8001b58 <HAL_GPIO_Init+0x2a0>)
 80018f6:	4293      	cmp	r3, r2
 80018f8:	d875      	bhi.n	80019e6 <HAL_GPIO_Init+0x12e>
 80018fa:	4a98      	ldr	r2, [pc, #608]	; (8001b5c <HAL_GPIO_Init+0x2a4>)
 80018fc:	4293      	cmp	r3, r2
 80018fe:	d058      	beq.n	80019b2 <HAL_GPIO_Init+0xfa>
 8001900:	4a96      	ldr	r2, [pc, #600]	; (8001b5c <HAL_GPIO_Init+0x2a4>)
 8001902:	4293      	cmp	r3, r2
 8001904:	d86f      	bhi.n	80019e6 <HAL_GPIO_Init+0x12e>
 8001906:	4a96      	ldr	r2, [pc, #600]	; (8001b60 <HAL_GPIO_Init+0x2a8>)
 8001908:	4293      	cmp	r3, r2
 800190a:	d052      	beq.n	80019b2 <HAL_GPIO_Init+0xfa>
 800190c:	4a94      	ldr	r2, [pc, #592]	; (8001b60 <HAL_GPIO_Init+0x2a8>)
 800190e:	4293      	cmp	r3, r2
 8001910:	d869      	bhi.n	80019e6 <HAL_GPIO_Init+0x12e>
 8001912:	4a94      	ldr	r2, [pc, #592]	; (8001b64 <HAL_GPIO_Init+0x2ac>)
 8001914:	4293      	cmp	r3, r2
 8001916:	d04c      	beq.n	80019b2 <HAL_GPIO_Init+0xfa>
 8001918:	4a92      	ldr	r2, [pc, #584]	; (8001b64 <HAL_GPIO_Init+0x2ac>)
 800191a:	4293      	cmp	r3, r2
 800191c:	d863      	bhi.n	80019e6 <HAL_GPIO_Init+0x12e>
 800191e:	4a92      	ldr	r2, [pc, #584]	; (8001b68 <HAL_GPIO_Init+0x2b0>)
 8001920:	4293      	cmp	r3, r2
 8001922:	d046      	beq.n	80019b2 <HAL_GPIO_Init+0xfa>
 8001924:	4a90      	ldr	r2, [pc, #576]	; (8001b68 <HAL_GPIO_Init+0x2b0>)
 8001926:	4293      	cmp	r3, r2
 8001928:	d85d      	bhi.n	80019e6 <HAL_GPIO_Init+0x12e>
 800192a:	2b12      	cmp	r3, #18
 800192c:	d82a      	bhi.n	8001984 <HAL_GPIO_Init+0xcc>
 800192e:	2b12      	cmp	r3, #18
 8001930:	d859      	bhi.n	80019e6 <HAL_GPIO_Init+0x12e>
 8001932:	a201      	add	r2, pc, #4	; (adr r2, 8001938 <HAL_GPIO_Init+0x80>)
 8001934:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001938:	080019b3 	.word	0x080019b3
 800193c:	0800198d 	.word	0x0800198d
 8001940:	0800199f 	.word	0x0800199f
 8001944:	080019e1 	.word	0x080019e1
 8001948:	080019e7 	.word	0x080019e7
 800194c:	080019e7 	.word	0x080019e7
 8001950:	080019e7 	.word	0x080019e7
 8001954:	080019e7 	.word	0x080019e7
 8001958:	080019e7 	.word	0x080019e7
 800195c:	080019e7 	.word	0x080019e7
 8001960:	080019e7 	.word	0x080019e7
 8001964:	080019e7 	.word	0x080019e7
 8001968:	080019e7 	.word	0x080019e7
 800196c:	080019e7 	.word	0x080019e7
 8001970:	080019e7 	.word	0x080019e7
 8001974:	080019e7 	.word	0x080019e7
 8001978:	080019e7 	.word	0x080019e7
 800197c:	08001995 	.word	0x08001995
 8001980:	080019a9 	.word	0x080019a9
 8001984:	4a79      	ldr	r2, [pc, #484]	; (8001b6c <HAL_GPIO_Init+0x2b4>)
 8001986:	4293      	cmp	r3, r2
 8001988:	d013      	beq.n	80019b2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800198a:	e02c      	b.n	80019e6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	68db      	ldr	r3, [r3, #12]
 8001990:	623b      	str	r3, [r7, #32]
          break;
 8001992:	e029      	b.n	80019e8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	68db      	ldr	r3, [r3, #12]
 8001998:	3304      	adds	r3, #4
 800199a:	623b      	str	r3, [r7, #32]
          break;
 800199c:	e024      	b.n	80019e8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	68db      	ldr	r3, [r3, #12]
 80019a2:	3308      	adds	r3, #8
 80019a4:	623b      	str	r3, [r7, #32]
          break;
 80019a6:	e01f      	b.n	80019e8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	68db      	ldr	r3, [r3, #12]
 80019ac:	330c      	adds	r3, #12
 80019ae:	623b      	str	r3, [r7, #32]
          break;
 80019b0:	e01a      	b.n	80019e8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	689b      	ldr	r3, [r3, #8]
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d102      	bne.n	80019c0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80019ba:	2304      	movs	r3, #4
 80019bc:	623b      	str	r3, [r7, #32]
          break;
 80019be:	e013      	b.n	80019e8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	689b      	ldr	r3, [r3, #8]
 80019c4:	2b01      	cmp	r3, #1
 80019c6:	d105      	bne.n	80019d4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80019c8:	2308      	movs	r3, #8
 80019ca:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	69fa      	ldr	r2, [r7, #28]
 80019d0:	611a      	str	r2, [r3, #16]
          break;
 80019d2:	e009      	b.n	80019e8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80019d4:	2308      	movs	r3, #8
 80019d6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	69fa      	ldr	r2, [r7, #28]
 80019dc:	615a      	str	r2, [r3, #20]
          break;
 80019de:	e003      	b.n	80019e8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80019e0:	2300      	movs	r3, #0
 80019e2:	623b      	str	r3, [r7, #32]
          break;
 80019e4:	e000      	b.n	80019e8 <HAL_GPIO_Init+0x130>
          break;
 80019e6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80019e8:	69bb      	ldr	r3, [r7, #24]
 80019ea:	2bff      	cmp	r3, #255	; 0xff
 80019ec:	d801      	bhi.n	80019f2 <HAL_GPIO_Init+0x13a>
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	e001      	b.n	80019f6 <HAL_GPIO_Init+0x13e>
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	3304      	adds	r3, #4
 80019f6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80019f8:	69bb      	ldr	r3, [r7, #24]
 80019fa:	2bff      	cmp	r3, #255	; 0xff
 80019fc:	d802      	bhi.n	8001a04 <HAL_GPIO_Init+0x14c>
 80019fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a00:	009b      	lsls	r3, r3, #2
 8001a02:	e002      	b.n	8001a0a <HAL_GPIO_Init+0x152>
 8001a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a06:	3b08      	subs	r3, #8
 8001a08:	009b      	lsls	r3, r3, #2
 8001a0a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001a0c:	697b      	ldr	r3, [r7, #20]
 8001a0e:	681a      	ldr	r2, [r3, #0]
 8001a10:	210f      	movs	r1, #15
 8001a12:	693b      	ldr	r3, [r7, #16]
 8001a14:	fa01 f303 	lsl.w	r3, r1, r3
 8001a18:	43db      	mvns	r3, r3
 8001a1a:	401a      	ands	r2, r3
 8001a1c:	6a39      	ldr	r1, [r7, #32]
 8001a1e:	693b      	ldr	r3, [r7, #16]
 8001a20:	fa01 f303 	lsl.w	r3, r1, r3
 8001a24:	431a      	orrs	r2, r3
 8001a26:	697b      	ldr	r3, [r7, #20]
 8001a28:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001a2a:	683b      	ldr	r3, [r7, #0]
 8001a2c:	685b      	ldr	r3, [r3, #4]
 8001a2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	f000 80b1 	beq.w	8001b9a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001a38:	4b4d      	ldr	r3, [pc, #308]	; (8001b70 <HAL_GPIO_Init+0x2b8>)
 8001a3a:	699b      	ldr	r3, [r3, #24]
 8001a3c:	4a4c      	ldr	r2, [pc, #304]	; (8001b70 <HAL_GPIO_Init+0x2b8>)
 8001a3e:	f043 0301 	orr.w	r3, r3, #1
 8001a42:	6193      	str	r3, [r2, #24]
 8001a44:	4b4a      	ldr	r3, [pc, #296]	; (8001b70 <HAL_GPIO_Init+0x2b8>)
 8001a46:	699b      	ldr	r3, [r3, #24]
 8001a48:	f003 0301 	and.w	r3, r3, #1
 8001a4c:	60bb      	str	r3, [r7, #8]
 8001a4e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001a50:	4a48      	ldr	r2, [pc, #288]	; (8001b74 <HAL_GPIO_Init+0x2bc>)
 8001a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a54:	089b      	lsrs	r3, r3, #2
 8001a56:	3302      	adds	r3, #2
 8001a58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a5c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a60:	f003 0303 	and.w	r3, r3, #3
 8001a64:	009b      	lsls	r3, r3, #2
 8001a66:	220f      	movs	r2, #15
 8001a68:	fa02 f303 	lsl.w	r3, r2, r3
 8001a6c:	43db      	mvns	r3, r3
 8001a6e:	68fa      	ldr	r2, [r7, #12]
 8001a70:	4013      	ands	r3, r2
 8001a72:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	4a40      	ldr	r2, [pc, #256]	; (8001b78 <HAL_GPIO_Init+0x2c0>)
 8001a78:	4293      	cmp	r3, r2
 8001a7a:	d013      	beq.n	8001aa4 <HAL_GPIO_Init+0x1ec>
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	4a3f      	ldr	r2, [pc, #252]	; (8001b7c <HAL_GPIO_Init+0x2c4>)
 8001a80:	4293      	cmp	r3, r2
 8001a82:	d00d      	beq.n	8001aa0 <HAL_GPIO_Init+0x1e8>
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	4a3e      	ldr	r2, [pc, #248]	; (8001b80 <HAL_GPIO_Init+0x2c8>)
 8001a88:	4293      	cmp	r3, r2
 8001a8a:	d007      	beq.n	8001a9c <HAL_GPIO_Init+0x1e4>
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	4a3d      	ldr	r2, [pc, #244]	; (8001b84 <HAL_GPIO_Init+0x2cc>)
 8001a90:	4293      	cmp	r3, r2
 8001a92:	d101      	bne.n	8001a98 <HAL_GPIO_Init+0x1e0>
 8001a94:	2303      	movs	r3, #3
 8001a96:	e006      	b.n	8001aa6 <HAL_GPIO_Init+0x1ee>
 8001a98:	2304      	movs	r3, #4
 8001a9a:	e004      	b.n	8001aa6 <HAL_GPIO_Init+0x1ee>
 8001a9c:	2302      	movs	r3, #2
 8001a9e:	e002      	b.n	8001aa6 <HAL_GPIO_Init+0x1ee>
 8001aa0:	2301      	movs	r3, #1
 8001aa2:	e000      	b.n	8001aa6 <HAL_GPIO_Init+0x1ee>
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001aa8:	f002 0203 	and.w	r2, r2, #3
 8001aac:	0092      	lsls	r2, r2, #2
 8001aae:	4093      	lsls	r3, r2
 8001ab0:	68fa      	ldr	r2, [r7, #12]
 8001ab2:	4313      	orrs	r3, r2
 8001ab4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001ab6:	492f      	ldr	r1, [pc, #188]	; (8001b74 <HAL_GPIO_Init+0x2bc>)
 8001ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aba:	089b      	lsrs	r3, r3, #2
 8001abc:	3302      	adds	r3, #2
 8001abe:	68fa      	ldr	r2, [r7, #12]
 8001ac0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	685b      	ldr	r3, [r3, #4]
 8001ac8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d006      	beq.n	8001ade <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001ad0:	4b2d      	ldr	r3, [pc, #180]	; (8001b88 <HAL_GPIO_Init+0x2d0>)
 8001ad2:	681a      	ldr	r2, [r3, #0]
 8001ad4:	492c      	ldr	r1, [pc, #176]	; (8001b88 <HAL_GPIO_Init+0x2d0>)
 8001ad6:	69bb      	ldr	r3, [r7, #24]
 8001ad8:	4313      	orrs	r3, r2
 8001ada:	600b      	str	r3, [r1, #0]
 8001adc:	e006      	b.n	8001aec <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001ade:	4b2a      	ldr	r3, [pc, #168]	; (8001b88 <HAL_GPIO_Init+0x2d0>)
 8001ae0:	681a      	ldr	r2, [r3, #0]
 8001ae2:	69bb      	ldr	r3, [r7, #24]
 8001ae4:	43db      	mvns	r3, r3
 8001ae6:	4928      	ldr	r1, [pc, #160]	; (8001b88 <HAL_GPIO_Init+0x2d0>)
 8001ae8:	4013      	ands	r3, r2
 8001aea:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	685b      	ldr	r3, [r3, #4]
 8001af0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d006      	beq.n	8001b06 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001af8:	4b23      	ldr	r3, [pc, #140]	; (8001b88 <HAL_GPIO_Init+0x2d0>)
 8001afa:	685a      	ldr	r2, [r3, #4]
 8001afc:	4922      	ldr	r1, [pc, #136]	; (8001b88 <HAL_GPIO_Init+0x2d0>)
 8001afe:	69bb      	ldr	r3, [r7, #24]
 8001b00:	4313      	orrs	r3, r2
 8001b02:	604b      	str	r3, [r1, #4]
 8001b04:	e006      	b.n	8001b14 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001b06:	4b20      	ldr	r3, [pc, #128]	; (8001b88 <HAL_GPIO_Init+0x2d0>)
 8001b08:	685a      	ldr	r2, [r3, #4]
 8001b0a:	69bb      	ldr	r3, [r7, #24]
 8001b0c:	43db      	mvns	r3, r3
 8001b0e:	491e      	ldr	r1, [pc, #120]	; (8001b88 <HAL_GPIO_Init+0x2d0>)
 8001b10:	4013      	ands	r3, r2
 8001b12:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d006      	beq.n	8001b2e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001b20:	4b19      	ldr	r3, [pc, #100]	; (8001b88 <HAL_GPIO_Init+0x2d0>)
 8001b22:	689a      	ldr	r2, [r3, #8]
 8001b24:	4918      	ldr	r1, [pc, #96]	; (8001b88 <HAL_GPIO_Init+0x2d0>)
 8001b26:	69bb      	ldr	r3, [r7, #24]
 8001b28:	4313      	orrs	r3, r2
 8001b2a:	608b      	str	r3, [r1, #8]
 8001b2c:	e006      	b.n	8001b3c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001b2e:	4b16      	ldr	r3, [pc, #88]	; (8001b88 <HAL_GPIO_Init+0x2d0>)
 8001b30:	689a      	ldr	r2, [r3, #8]
 8001b32:	69bb      	ldr	r3, [r7, #24]
 8001b34:	43db      	mvns	r3, r3
 8001b36:	4914      	ldr	r1, [pc, #80]	; (8001b88 <HAL_GPIO_Init+0x2d0>)
 8001b38:	4013      	ands	r3, r2
 8001b3a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	685b      	ldr	r3, [r3, #4]
 8001b40:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d021      	beq.n	8001b8c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001b48:	4b0f      	ldr	r3, [pc, #60]	; (8001b88 <HAL_GPIO_Init+0x2d0>)
 8001b4a:	68da      	ldr	r2, [r3, #12]
 8001b4c:	490e      	ldr	r1, [pc, #56]	; (8001b88 <HAL_GPIO_Init+0x2d0>)
 8001b4e:	69bb      	ldr	r3, [r7, #24]
 8001b50:	4313      	orrs	r3, r2
 8001b52:	60cb      	str	r3, [r1, #12]
 8001b54:	e021      	b.n	8001b9a <HAL_GPIO_Init+0x2e2>
 8001b56:	bf00      	nop
 8001b58:	10320000 	.word	0x10320000
 8001b5c:	10310000 	.word	0x10310000
 8001b60:	10220000 	.word	0x10220000
 8001b64:	10210000 	.word	0x10210000
 8001b68:	10120000 	.word	0x10120000
 8001b6c:	10110000 	.word	0x10110000
 8001b70:	40021000 	.word	0x40021000
 8001b74:	40010000 	.word	0x40010000
 8001b78:	40010800 	.word	0x40010800
 8001b7c:	40010c00 	.word	0x40010c00
 8001b80:	40011000 	.word	0x40011000
 8001b84:	40011400 	.word	0x40011400
 8001b88:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001b8c:	4b0b      	ldr	r3, [pc, #44]	; (8001bbc <HAL_GPIO_Init+0x304>)
 8001b8e:	68da      	ldr	r2, [r3, #12]
 8001b90:	69bb      	ldr	r3, [r7, #24]
 8001b92:	43db      	mvns	r3, r3
 8001b94:	4909      	ldr	r1, [pc, #36]	; (8001bbc <HAL_GPIO_Init+0x304>)
 8001b96:	4013      	ands	r3, r2
 8001b98:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b9c:	3301      	adds	r3, #1
 8001b9e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	681a      	ldr	r2, [r3, #0]
 8001ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ba6:	fa22 f303 	lsr.w	r3, r2, r3
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	f47f ae8e 	bne.w	80018cc <HAL_GPIO_Init+0x14>
  }
}
 8001bb0:	bf00      	nop
 8001bb2:	bf00      	nop
 8001bb4:	372c      	adds	r7, #44	; 0x2c
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bc80      	pop	{r7}
 8001bba:	4770      	bx	lr
 8001bbc:	40010400 	.word	0x40010400

08001bc0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	b083      	sub	sp, #12
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
 8001bc8:	460b      	mov	r3, r1
 8001bca:	807b      	strh	r3, [r7, #2]
 8001bcc:	4613      	mov	r3, r2
 8001bce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001bd0:	787b      	ldrb	r3, [r7, #1]
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d003      	beq.n	8001bde <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001bd6:	887a      	ldrh	r2, [r7, #2]
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001bdc:	e003      	b.n	8001be6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001bde:	887b      	ldrh	r3, [r7, #2]
 8001be0:	041a      	lsls	r2, r3, #16
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	611a      	str	r2, [r3, #16]
}
 8001be6:	bf00      	nop
 8001be8:	370c      	adds	r7, #12
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bc80      	pop	{r7}
 8001bee:	4770      	bx	lr

08001bf0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b082      	sub	sp, #8
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001bfa:	4b08      	ldr	r3, [pc, #32]	; (8001c1c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001bfc:	695a      	ldr	r2, [r3, #20]
 8001bfe:	88fb      	ldrh	r3, [r7, #6]
 8001c00:	4013      	ands	r3, r2
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d006      	beq.n	8001c14 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001c06:	4a05      	ldr	r2, [pc, #20]	; (8001c1c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001c08:	88fb      	ldrh	r3, [r7, #6]
 8001c0a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001c0c:	88fb      	ldrh	r3, [r7, #6]
 8001c0e:	4618      	mov	r0, r3
 8001c10:	f000 f806 	bl	8001c20 <HAL_GPIO_EXTI_Callback>
  }
}
 8001c14:	bf00      	nop
 8001c16:	3708      	adds	r7, #8
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	bd80      	pop	{r7, pc}
 8001c1c:	40010400 	.word	0x40010400

08001c20 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001c20:	b480      	push	{r7}
 8001c22:	b083      	sub	sp, #12
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	4603      	mov	r3, r0
 8001c28:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001c2a:	bf00      	nop
 8001c2c:	370c      	adds	r7, #12
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bc80      	pop	{r7}
 8001c32:	4770      	bx	lr

08001c34 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b086      	sub	sp, #24
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d101      	bne.n	8001c46 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c42:	2301      	movs	r3, #1
 8001c44:	e272      	b.n	800212c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f003 0301 	and.w	r3, r3, #1
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	f000 8087 	beq.w	8001d62 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001c54:	4b92      	ldr	r3, [pc, #584]	; (8001ea0 <HAL_RCC_OscConfig+0x26c>)
 8001c56:	685b      	ldr	r3, [r3, #4]
 8001c58:	f003 030c 	and.w	r3, r3, #12
 8001c5c:	2b04      	cmp	r3, #4
 8001c5e:	d00c      	beq.n	8001c7a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001c60:	4b8f      	ldr	r3, [pc, #572]	; (8001ea0 <HAL_RCC_OscConfig+0x26c>)
 8001c62:	685b      	ldr	r3, [r3, #4]
 8001c64:	f003 030c 	and.w	r3, r3, #12
 8001c68:	2b08      	cmp	r3, #8
 8001c6a:	d112      	bne.n	8001c92 <HAL_RCC_OscConfig+0x5e>
 8001c6c:	4b8c      	ldr	r3, [pc, #560]	; (8001ea0 <HAL_RCC_OscConfig+0x26c>)
 8001c6e:	685b      	ldr	r3, [r3, #4]
 8001c70:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c78:	d10b      	bne.n	8001c92 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c7a:	4b89      	ldr	r3, [pc, #548]	; (8001ea0 <HAL_RCC_OscConfig+0x26c>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d06c      	beq.n	8001d60 <HAL_RCC_OscConfig+0x12c>
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	685b      	ldr	r3, [r3, #4]
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d168      	bne.n	8001d60 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001c8e:	2301      	movs	r3, #1
 8001c90:	e24c      	b.n	800212c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	685b      	ldr	r3, [r3, #4]
 8001c96:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c9a:	d106      	bne.n	8001caa <HAL_RCC_OscConfig+0x76>
 8001c9c:	4b80      	ldr	r3, [pc, #512]	; (8001ea0 <HAL_RCC_OscConfig+0x26c>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	4a7f      	ldr	r2, [pc, #508]	; (8001ea0 <HAL_RCC_OscConfig+0x26c>)
 8001ca2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ca6:	6013      	str	r3, [r2, #0]
 8001ca8:	e02e      	b.n	8001d08 <HAL_RCC_OscConfig+0xd4>
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	685b      	ldr	r3, [r3, #4]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d10c      	bne.n	8001ccc <HAL_RCC_OscConfig+0x98>
 8001cb2:	4b7b      	ldr	r3, [pc, #492]	; (8001ea0 <HAL_RCC_OscConfig+0x26c>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	4a7a      	ldr	r2, [pc, #488]	; (8001ea0 <HAL_RCC_OscConfig+0x26c>)
 8001cb8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001cbc:	6013      	str	r3, [r2, #0]
 8001cbe:	4b78      	ldr	r3, [pc, #480]	; (8001ea0 <HAL_RCC_OscConfig+0x26c>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	4a77      	ldr	r2, [pc, #476]	; (8001ea0 <HAL_RCC_OscConfig+0x26c>)
 8001cc4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001cc8:	6013      	str	r3, [r2, #0]
 8001cca:	e01d      	b.n	8001d08 <HAL_RCC_OscConfig+0xd4>
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	685b      	ldr	r3, [r3, #4]
 8001cd0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001cd4:	d10c      	bne.n	8001cf0 <HAL_RCC_OscConfig+0xbc>
 8001cd6:	4b72      	ldr	r3, [pc, #456]	; (8001ea0 <HAL_RCC_OscConfig+0x26c>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	4a71      	ldr	r2, [pc, #452]	; (8001ea0 <HAL_RCC_OscConfig+0x26c>)
 8001cdc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ce0:	6013      	str	r3, [r2, #0]
 8001ce2:	4b6f      	ldr	r3, [pc, #444]	; (8001ea0 <HAL_RCC_OscConfig+0x26c>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	4a6e      	ldr	r2, [pc, #440]	; (8001ea0 <HAL_RCC_OscConfig+0x26c>)
 8001ce8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cec:	6013      	str	r3, [r2, #0]
 8001cee:	e00b      	b.n	8001d08 <HAL_RCC_OscConfig+0xd4>
 8001cf0:	4b6b      	ldr	r3, [pc, #428]	; (8001ea0 <HAL_RCC_OscConfig+0x26c>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4a6a      	ldr	r2, [pc, #424]	; (8001ea0 <HAL_RCC_OscConfig+0x26c>)
 8001cf6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001cfa:	6013      	str	r3, [r2, #0]
 8001cfc:	4b68      	ldr	r3, [pc, #416]	; (8001ea0 <HAL_RCC_OscConfig+0x26c>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4a67      	ldr	r2, [pc, #412]	; (8001ea0 <HAL_RCC_OscConfig+0x26c>)
 8001d02:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d06:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	685b      	ldr	r3, [r3, #4]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d013      	beq.n	8001d38 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d10:	f7ff fc96 	bl	8001640 <HAL_GetTick>
 8001d14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d16:	e008      	b.n	8001d2a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d18:	f7ff fc92 	bl	8001640 <HAL_GetTick>
 8001d1c:	4602      	mov	r2, r0
 8001d1e:	693b      	ldr	r3, [r7, #16]
 8001d20:	1ad3      	subs	r3, r2, r3
 8001d22:	2b64      	cmp	r3, #100	; 0x64
 8001d24:	d901      	bls.n	8001d2a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001d26:	2303      	movs	r3, #3
 8001d28:	e200      	b.n	800212c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d2a:	4b5d      	ldr	r3, [pc, #372]	; (8001ea0 <HAL_RCC_OscConfig+0x26c>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d0f0      	beq.n	8001d18 <HAL_RCC_OscConfig+0xe4>
 8001d36:	e014      	b.n	8001d62 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d38:	f7ff fc82 	bl	8001640 <HAL_GetTick>
 8001d3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d3e:	e008      	b.n	8001d52 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d40:	f7ff fc7e 	bl	8001640 <HAL_GetTick>
 8001d44:	4602      	mov	r2, r0
 8001d46:	693b      	ldr	r3, [r7, #16]
 8001d48:	1ad3      	subs	r3, r2, r3
 8001d4a:	2b64      	cmp	r3, #100	; 0x64
 8001d4c:	d901      	bls.n	8001d52 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001d4e:	2303      	movs	r3, #3
 8001d50:	e1ec      	b.n	800212c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d52:	4b53      	ldr	r3, [pc, #332]	; (8001ea0 <HAL_RCC_OscConfig+0x26c>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d1f0      	bne.n	8001d40 <HAL_RCC_OscConfig+0x10c>
 8001d5e:	e000      	b.n	8001d62 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d60:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f003 0302 	and.w	r3, r3, #2
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d063      	beq.n	8001e36 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001d6e:	4b4c      	ldr	r3, [pc, #304]	; (8001ea0 <HAL_RCC_OscConfig+0x26c>)
 8001d70:	685b      	ldr	r3, [r3, #4]
 8001d72:	f003 030c 	and.w	r3, r3, #12
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d00b      	beq.n	8001d92 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001d7a:	4b49      	ldr	r3, [pc, #292]	; (8001ea0 <HAL_RCC_OscConfig+0x26c>)
 8001d7c:	685b      	ldr	r3, [r3, #4]
 8001d7e:	f003 030c 	and.w	r3, r3, #12
 8001d82:	2b08      	cmp	r3, #8
 8001d84:	d11c      	bne.n	8001dc0 <HAL_RCC_OscConfig+0x18c>
 8001d86:	4b46      	ldr	r3, [pc, #280]	; (8001ea0 <HAL_RCC_OscConfig+0x26c>)
 8001d88:	685b      	ldr	r3, [r3, #4]
 8001d8a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d116      	bne.n	8001dc0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d92:	4b43      	ldr	r3, [pc, #268]	; (8001ea0 <HAL_RCC_OscConfig+0x26c>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f003 0302 	and.w	r3, r3, #2
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d005      	beq.n	8001daa <HAL_RCC_OscConfig+0x176>
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	691b      	ldr	r3, [r3, #16]
 8001da2:	2b01      	cmp	r3, #1
 8001da4:	d001      	beq.n	8001daa <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001da6:	2301      	movs	r3, #1
 8001da8:	e1c0      	b.n	800212c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001daa:	4b3d      	ldr	r3, [pc, #244]	; (8001ea0 <HAL_RCC_OscConfig+0x26c>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	695b      	ldr	r3, [r3, #20]
 8001db6:	00db      	lsls	r3, r3, #3
 8001db8:	4939      	ldr	r1, [pc, #228]	; (8001ea0 <HAL_RCC_OscConfig+0x26c>)
 8001dba:	4313      	orrs	r3, r2
 8001dbc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001dbe:	e03a      	b.n	8001e36 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	691b      	ldr	r3, [r3, #16]
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d020      	beq.n	8001e0a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001dc8:	4b36      	ldr	r3, [pc, #216]	; (8001ea4 <HAL_RCC_OscConfig+0x270>)
 8001dca:	2201      	movs	r2, #1
 8001dcc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dce:	f7ff fc37 	bl	8001640 <HAL_GetTick>
 8001dd2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dd4:	e008      	b.n	8001de8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001dd6:	f7ff fc33 	bl	8001640 <HAL_GetTick>
 8001dda:	4602      	mov	r2, r0
 8001ddc:	693b      	ldr	r3, [r7, #16]
 8001dde:	1ad3      	subs	r3, r2, r3
 8001de0:	2b02      	cmp	r3, #2
 8001de2:	d901      	bls.n	8001de8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001de4:	2303      	movs	r3, #3
 8001de6:	e1a1      	b.n	800212c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001de8:	4b2d      	ldr	r3, [pc, #180]	; (8001ea0 <HAL_RCC_OscConfig+0x26c>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f003 0302 	and.w	r3, r3, #2
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d0f0      	beq.n	8001dd6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001df4:	4b2a      	ldr	r3, [pc, #168]	; (8001ea0 <HAL_RCC_OscConfig+0x26c>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	695b      	ldr	r3, [r3, #20]
 8001e00:	00db      	lsls	r3, r3, #3
 8001e02:	4927      	ldr	r1, [pc, #156]	; (8001ea0 <HAL_RCC_OscConfig+0x26c>)
 8001e04:	4313      	orrs	r3, r2
 8001e06:	600b      	str	r3, [r1, #0]
 8001e08:	e015      	b.n	8001e36 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e0a:	4b26      	ldr	r3, [pc, #152]	; (8001ea4 <HAL_RCC_OscConfig+0x270>)
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e10:	f7ff fc16 	bl	8001640 <HAL_GetTick>
 8001e14:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e16:	e008      	b.n	8001e2a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e18:	f7ff fc12 	bl	8001640 <HAL_GetTick>
 8001e1c:	4602      	mov	r2, r0
 8001e1e:	693b      	ldr	r3, [r7, #16]
 8001e20:	1ad3      	subs	r3, r2, r3
 8001e22:	2b02      	cmp	r3, #2
 8001e24:	d901      	bls.n	8001e2a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001e26:	2303      	movs	r3, #3
 8001e28:	e180      	b.n	800212c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e2a:	4b1d      	ldr	r3, [pc, #116]	; (8001ea0 <HAL_RCC_OscConfig+0x26c>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f003 0302 	and.w	r3, r3, #2
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d1f0      	bne.n	8001e18 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f003 0308 	and.w	r3, r3, #8
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d03a      	beq.n	8001eb8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	699b      	ldr	r3, [r3, #24]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d019      	beq.n	8001e7e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e4a:	4b17      	ldr	r3, [pc, #92]	; (8001ea8 <HAL_RCC_OscConfig+0x274>)
 8001e4c:	2201      	movs	r2, #1
 8001e4e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e50:	f7ff fbf6 	bl	8001640 <HAL_GetTick>
 8001e54:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e56:	e008      	b.n	8001e6a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e58:	f7ff fbf2 	bl	8001640 <HAL_GetTick>
 8001e5c:	4602      	mov	r2, r0
 8001e5e:	693b      	ldr	r3, [r7, #16]
 8001e60:	1ad3      	subs	r3, r2, r3
 8001e62:	2b02      	cmp	r3, #2
 8001e64:	d901      	bls.n	8001e6a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001e66:	2303      	movs	r3, #3
 8001e68:	e160      	b.n	800212c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e6a:	4b0d      	ldr	r3, [pc, #52]	; (8001ea0 <HAL_RCC_OscConfig+0x26c>)
 8001e6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e6e:	f003 0302 	and.w	r3, r3, #2
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d0f0      	beq.n	8001e58 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001e76:	2001      	movs	r0, #1
 8001e78:	f000 fad8 	bl	800242c <RCC_Delay>
 8001e7c:	e01c      	b.n	8001eb8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e7e:	4b0a      	ldr	r3, [pc, #40]	; (8001ea8 <HAL_RCC_OscConfig+0x274>)
 8001e80:	2200      	movs	r2, #0
 8001e82:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e84:	f7ff fbdc 	bl	8001640 <HAL_GetTick>
 8001e88:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e8a:	e00f      	b.n	8001eac <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e8c:	f7ff fbd8 	bl	8001640 <HAL_GetTick>
 8001e90:	4602      	mov	r2, r0
 8001e92:	693b      	ldr	r3, [r7, #16]
 8001e94:	1ad3      	subs	r3, r2, r3
 8001e96:	2b02      	cmp	r3, #2
 8001e98:	d908      	bls.n	8001eac <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001e9a:	2303      	movs	r3, #3
 8001e9c:	e146      	b.n	800212c <HAL_RCC_OscConfig+0x4f8>
 8001e9e:	bf00      	nop
 8001ea0:	40021000 	.word	0x40021000
 8001ea4:	42420000 	.word	0x42420000
 8001ea8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001eac:	4b92      	ldr	r3, [pc, #584]	; (80020f8 <HAL_RCC_OscConfig+0x4c4>)
 8001eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eb0:	f003 0302 	and.w	r3, r3, #2
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d1e9      	bne.n	8001e8c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f003 0304 	and.w	r3, r3, #4
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	f000 80a6 	beq.w	8002012 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001eca:	4b8b      	ldr	r3, [pc, #556]	; (80020f8 <HAL_RCC_OscConfig+0x4c4>)
 8001ecc:	69db      	ldr	r3, [r3, #28]
 8001ece:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d10d      	bne.n	8001ef2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ed6:	4b88      	ldr	r3, [pc, #544]	; (80020f8 <HAL_RCC_OscConfig+0x4c4>)
 8001ed8:	69db      	ldr	r3, [r3, #28]
 8001eda:	4a87      	ldr	r2, [pc, #540]	; (80020f8 <HAL_RCC_OscConfig+0x4c4>)
 8001edc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ee0:	61d3      	str	r3, [r2, #28]
 8001ee2:	4b85      	ldr	r3, [pc, #532]	; (80020f8 <HAL_RCC_OscConfig+0x4c4>)
 8001ee4:	69db      	ldr	r3, [r3, #28]
 8001ee6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eea:	60bb      	str	r3, [r7, #8]
 8001eec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001eee:	2301      	movs	r3, #1
 8001ef0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ef2:	4b82      	ldr	r3, [pc, #520]	; (80020fc <HAL_RCC_OscConfig+0x4c8>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d118      	bne.n	8001f30 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001efe:	4b7f      	ldr	r3, [pc, #508]	; (80020fc <HAL_RCC_OscConfig+0x4c8>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	4a7e      	ldr	r2, [pc, #504]	; (80020fc <HAL_RCC_OscConfig+0x4c8>)
 8001f04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f08:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f0a:	f7ff fb99 	bl	8001640 <HAL_GetTick>
 8001f0e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f10:	e008      	b.n	8001f24 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f12:	f7ff fb95 	bl	8001640 <HAL_GetTick>
 8001f16:	4602      	mov	r2, r0
 8001f18:	693b      	ldr	r3, [r7, #16]
 8001f1a:	1ad3      	subs	r3, r2, r3
 8001f1c:	2b64      	cmp	r3, #100	; 0x64
 8001f1e:	d901      	bls.n	8001f24 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001f20:	2303      	movs	r3, #3
 8001f22:	e103      	b.n	800212c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f24:	4b75      	ldr	r3, [pc, #468]	; (80020fc <HAL_RCC_OscConfig+0x4c8>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d0f0      	beq.n	8001f12 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	68db      	ldr	r3, [r3, #12]
 8001f34:	2b01      	cmp	r3, #1
 8001f36:	d106      	bne.n	8001f46 <HAL_RCC_OscConfig+0x312>
 8001f38:	4b6f      	ldr	r3, [pc, #444]	; (80020f8 <HAL_RCC_OscConfig+0x4c4>)
 8001f3a:	6a1b      	ldr	r3, [r3, #32]
 8001f3c:	4a6e      	ldr	r2, [pc, #440]	; (80020f8 <HAL_RCC_OscConfig+0x4c4>)
 8001f3e:	f043 0301 	orr.w	r3, r3, #1
 8001f42:	6213      	str	r3, [r2, #32]
 8001f44:	e02d      	b.n	8001fa2 <HAL_RCC_OscConfig+0x36e>
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	68db      	ldr	r3, [r3, #12]
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d10c      	bne.n	8001f68 <HAL_RCC_OscConfig+0x334>
 8001f4e:	4b6a      	ldr	r3, [pc, #424]	; (80020f8 <HAL_RCC_OscConfig+0x4c4>)
 8001f50:	6a1b      	ldr	r3, [r3, #32]
 8001f52:	4a69      	ldr	r2, [pc, #420]	; (80020f8 <HAL_RCC_OscConfig+0x4c4>)
 8001f54:	f023 0301 	bic.w	r3, r3, #1
 8001f58:	6213      	str	r3, [r2, #32]
 8001f5a:	4b67      	ldr	r3, [pc, #412]	; (80020f8 <HAL_RCC_OscConfig+0x4c4>)
 8001f5c:	6a1b      	ldr	r3, [r3, #32]
 8001f5e:	4a66      	ldr	r2, [pc, #408]	; (80020f8 <HAL_RCC_OscConfig+0x4c4>)
 8001f60:	f023 0304 	bic.w	r3, r3, #4
 8001f64:	6213      	str	r3, [r2, #32]
 8001f66:	e01c      	b.n	8001fa2 <HAL_RCC_OscConfig+0x36e>
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	68db      	ldr	r3, [r3, #12]
 8001f6c:	2b05      	cmp	r3, #5
 8001f6e:	d10c      	bne.n	8001f8a <HAL_RCC_OscConfig+0x356>
 8001f70:	4b61      	ldr	r3, [pc, #388]	; (80020f8 <HAL_RCC_OscConfig+0x4c4>)
 8001f72:	6a1b      	ldr	r3, [r3, #32]
 8001f74:	4a60      	ldr	r2, [pc, #384]	; (80020f8 <HAL_RCC_OscConfig+0x4c4>)
 8001f76:	f043 0304 	orr.w	r3, r3, #4
 8001f7a:	6213      	str	r3, [r2, #32]
 8001f7c:	4b5e      	ldr	r3, [pc, #376]	; (80020f8 <HAL_RCC_OscConfig+0x4c4>)
 8001f7e:	6a1b      	ldr	r3, [r3, #32]
 8001f80:	4a5d      	ldr	r2, [pc, #372]	; (80020f8 <HAL_RCC_OscConfig+0x4c4>)
 8001f82:	f043 0301 	orr.w	r3, r3, #1
 8001f86:	6213      	str	r3, [r2, #32]
 8001f88:	e00b      	b.n	8001fa2 <HAL_RCC_OscConfig+0x36e>
 8001f8a:	4b5b      	ldr	r3, [pc, #364]	; (80020f8 <HAL_RCC_OscConfig+0x4c4>)
 8001f8c:	6a1b      	ldr	r3, [r3, #32]
 8001f8e:	4a5a      	ldr	r2, [pc, #360]	; (80020f8 <HAL_RCC_OscConfig+0x4c4>)
 8001f90:	f023 0301 	bic.w	r3, r3, #1
 8001f94:	6213      	str	r3, [r2, #32]
 8001f96:	4b58      	ldr	r3, [pc, #352]	; (80020f8 <HAL_RCC_OscConfig+0x4c4>)
 8001f98:	6a1b      	ldr	r3, [r3, #32]
 8001f9a:	4a57      	ldr	r2, [pc, #348]	; (80020f8 <HAL_RCC_OscConfig+0x4c4>)
 8001f9c:	f023 0304 	bic.w	r3, r3, #4
 8001fa0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	68db      	ldr	r3, [r3, #12]
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d015      	beq.n	8001fd6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001faa:	f7ff fb49 	bl	8001640 <HAL_GetTick>
 8001fae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fb0:	e00a      	b.n	8001fc8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fb2:	f7ff fb45 	bl	8001640 <HAL_GetTick>
 8001fb6:	4602      	mov	r2, r0
 8001fb8:	693b      	ldr	r3, [r7, #16]
 8001fba:	1ad3      	subs	r3, r2, r3
 8001fbc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fc0:	4293      	cmp	r3, r2
 8001fc2:	d901      	bls.n	8001fc8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001fc4:	2303      	movs	r3, #3
 8001fc6:	e0b1      	b.n	800212c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fc8:	4b4b      	ldr	r3, [pc, #300]	; (80020f8 <HAL_RCC_OscConfig+0x4c4>)
 8001fca:	6a1b      	ldr	r3, [r3, #32]
 8001fcc:	f003 0302 	and.w	r3, r3, #2
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d0ee      	beq.n	8001fb2 <HAL_RCC_OscConfig+0x37e>
 8001fd4:	e014      	b.n	8002000 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fd6:	f7ff fb33 	bl	8001640 <HAL_GetTick>
 8001fda:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fdc:	e00a      	b.n	8001ff4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fde:	f7ff fb2f 	bl	8001640 <HAL_GetTick>
 8001fe2:	4602      	mov	r2, r0
 8001fe4:	693b      	ldr	r3, [r7, #16]
 8001fe6:	1ad3      	subs	r3, r2, r3
 8001fe8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fec:	4293      	cmp	r3, r2
 8001fee:	d901      	bls.n	8001ff4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001ff0:	2303      	movs	r3, #3
 8001ff2:	e09b      	b.n	800212c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ff4:	4b40      	ldr	r3, [pc, #256]	; (80020f8 <HAL_RCC_OscConfig+0x4c4>)
 8001ff6:	6a1b      	ldr	r3, [r3, #32]
 8001ff8:	f003 0302 	and.w	r3, r3, #2
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d1ee      	bne.n	8001fde <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002000:	7dfb      	ldrb	r3, [r7, #23]
 8002002:	2b01      	cmp	r3, #1
 8002004:	d105      	bne.n	8002012 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002006:	4b3c      	ldr	r3, [pc, #240]	; (80020f8 <HAL_RCC_OscConfig+0x4c4>)
 8002008:	69db      	ldr	r3, [r3, #28]
 800200a:	4a3b      	ldr	r2, [pc, #236]	; (80020f8 <HAL_RCC_OscConfig+0x4c4>)
 800200c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002010:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	69db      	ldr	r3, [r3, #28]
 8002016:	2b00      	cmp	r3, #0
 8002018:	f000 8087 	beq.w	800212a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800201c:	4b36      	ldr	r3, [pc, #216]	; (80020f8 <HAL_RCC_OscConfig+0x4c4>)
 800201e:	685b      	ldr	r3, [r3, #4]
 8002020:	f003 030c 	and.w	r3, r3, #12
 8002024:	2b08      	cmp	r3, #8
 8002026:	d061      	beq.n	80020ec <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	69db      	ldr	r3, [r3, #28]
 800202c:	2b02      	cmp	r3, #2
 800202e:	d146      	bne.n	80020be <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002030:	4b33      	ldr	r3, [pc, #204]	; (8002100 <HAL_RCC_OscConfig+0x4cc>)
 8002032:	2200      	movs	r2, #0
 8002034:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002036:	f7ff fb03 	bl	8001640 <HAL_GetTick>
 800203a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800203c:	e008      	b.n	8002050 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800203e:	f7ff faff 	bl	8001640 <HAL_GetTick>
 8002042:	4602      	mov	r2, r0
 8002044:	693b      	ldr	r3, [r7, #16]
 8002046:	1ad3      	subs	r3, r2, r3
 8002048:	2b02      	cmp	r3, #2
 800204a:	d901      	bls.n	8002050 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800204c:	2303      	movs	r3, #3
 800204e:	e06d      	b.n	800212c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002050:	4b29      	ldr	r3, [pc, #164]	; (80020f8 <HAL_RCC_OscConfig+0x4c4>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002058:	2b00      	cmp	r3, #0
 800205a:	d1f0      	bne.n	800203e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6a1b      	ldr	r3, [r3, #32]
 8002060:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002064:	d108      	bne.n	8002078 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002066:	4b24      	ldr	r3, [pc, #144]	; (80020f8 <HAL_RCC_OscConfig+0x4c4>)
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	689b      	ldr	r3, [r3, #8]
 8002072:	4921      	ldr	r1, [pc, #132]	; (80020f8 <HAL_RCC_OscConfig+0x4c4>)
 8002074:	4313      	orrs	r3, r2
 8002076:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002078:	4b1f      	ldr	r3, [pc, #124]	; (80020f8 <HAL_RCC_OscConfig+0x4c4>)
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6a19      	ldr	r1, [r3, #32]
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002088:	430b      	orrs	r3, r1
 800208a:	491b      	ldr	r1, [pc, #108]	; (80020f8 <HAL_RCC_OscConfig+0x4c4>)
 800208c:	4313      	orrs	r3, r2
 800208e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002090:	4b1b      	ldr	r3, [pc, #108]	; (8002100 <HAL_RCC_OscConfig+0x4cc>)
 8002092:	2201      	movs	r2, #1
 8002094:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002096:	f7ff fad3 	bl	8001640 <HAL_GetTick>
 800209a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800209c:	e008      	b.n	80020b0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800209e:	f7ff facf 	bl	8001640 <HAL_GetTick>
 80020a2:	4602      	mov	r2, r0
 80020a4:	693b      	ldr	r3, [r7, #16]
 80020a6:	1ad3      	subs	r3, r2, r3
 80020a8:	2b02      	cmp	r3, #2
 80020aa:	d901      	bls.n	80020b0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80020ac:	2303      	movs	r3, #3
 80020ae:	e03d      	b.n	800212c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80020b0:	4b11      	ldr	r3, [pc, #68]	; (80020f8 <HAL_RCC_OscConfig+0x4c4>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d0f0      	beq.n	800209e <HAL_RCC_OscConfig+0x46a>
 80020bc:	e035      	b.n	800212a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020be:	4b10      	ldr	r3, [pc, #64]	; (8002100 <HAL_RCC_OscConfig+0x4cc>)
 80020c0:	2200      	movs	r2, #0
 80020c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020c4:	f7ff fabc 	bl	8001640 <HAL_GetTick>
 80020c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020ca:	e008      	b.n	80020de <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020cc:	f7ff fab8 	bl	8001640 <HAL_GetTick>
 80020d0:	4602      	mov	r2, r0
 80020d2:	693b      	ldr	r3, [r7, #16]
 80020d4:	1ad3      	subs	r3, r2, r3
 80020d6:	2b02      	cmp	r3, #2
 80020d8:	d901      	bls.n	80020de <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80020da:	2303      	movs	r3, #3
 80020dc:	e026      	b.n	800212c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020de:	4b06      	ldr	r3, [pc, #24]	; (80020f8 <HAL_RCC_OscConfig+0x4c4>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d1f0      	bne.n	80020cc <HAL_RCC_OscConfig+0x498>
 80020ea:	e01e      	b.n	800212a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	69db      	ldr	r3, [r3, #28]
 80020f0:	2b01      	cmp	r3, #1
 80020f2:	d107      	bne.n	8002104 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80020f4:	2301      	movs	r3, #1
 80020f6:	e019      	b.n	800212c <HAL_RCC_OscConfig+0x4f8>
 80020f8:	40021000 	.word	0x40021000
 80020fc:	40007000 	.word	0x40007000
 8002100:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002104:	4b0b      	ldr	r3, [pc, #44]	; (8002134 <HAL_RCC_OscConfig+0x500>)
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6a1b      	ldr	r3, [r3, #32]
 8002114:	429a      	cmp	r2, r3
 8002116:	d106      	bne.n	8002126 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002122:	429a      	cmp	r2, r3
 8002124:	d001      	beq.n	800212a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002126:	2301      	movs	r3, #1
 8002128:	e000      	b.n	800212c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800212a:	2300      	movs	r3, #0
}
 800212c:	4618      	mov	r0, r3
 800212e:	3718      	adds	r7, #24
 8002130:	46bd      	mov	sp, r7
 8002132:	bd80      	pop	{r7, pc}
 8002134:	40021000 	.word	0x40021000

08002138 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b084      	sub	sp, #16
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
 8002140:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	2b00      	cmp	r3, #0
 8002146:	d101      	bne.n	800214c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002148:	2301      	movs	r3, #1
 800214a:	e0d0      	b.n	80022ee <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800214c:	4b6a      	ldr	r3, [pc, #424]	; (80022f8 <HAL_RCC_ClockConfig+0x1c0>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f003 0307 	and.w	r3, r3, #7
 8002154:	683a      	ldr	r2, [r7, #0]
 8002156:	429a      	cmp	r2, r3
 8002158:	d910      	bls.n	800217c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800215a:	4b67      	ldr	r3, [pc, #412]	; (80022f8 <HAL_RCC_ClockConfig+0x1c0>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f023 0207 	bic.w	r2, r3, #7
 8002162:	4965      	ldr	r1, [pc, #404]	; (80022f8 <HAL_RCC_ClockConfig+0x1c0>)
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	4313      	orrs	r3, r2
 8002168:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800216a:	4b63      	ldr	r3, [pc, #396]	; (80022f8 <HAL_RCC_ClockConfig+0x1c0>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f003 0307 	and.w	r3, r3, #7
 8002172:	683a      	ldr	r2, [r7, #0]
 8002174:	429a      	cmp	r2, r3
 8002176:	d001      	beq.n	800217c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002178:	2301      	movs	r3, #1
 800217a:	e0b8      	b.n	80022ee <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f003 0302 	and.w	r3, r3, #2
 8002184:	2b00      	cmp	r3, #0
 8002186:	d020      	beq.n	80021ca <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f003 0304 	and.w	r3, r3, #4
 8002190:	2b00      	cmp	r3, #0
 8002192:	d005      	beq.n	80021a0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002194:	4b59      	ldr	r3, [pc, #356]	; (80022fc <HAL_RCC_ClockConfig+0x1c4>)
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	4a58      	ldr	r2, [pc, #352]	; (80022fc <HAL_RCC_ClockConfig+0x1c4>)
 800219a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800219e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f003 0308 	and.w	r3, r3, #8
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d005      	beq.n	80021b8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80021ac:	4b53      	ldr	r3, [pc, #332]	; (80022fc <HAL_RCC_ClockConfig+0x1c4>)
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	4a52      	ldr	r2, [pc, #328]	; (80022fc <HAL_RCC_ClockConfig+0x1c4>)
 80021b2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80021b6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021b8:	4b50      	ldr	r3, [pc, #320]	; (80022fc <HAL_RCC_ClockConfig+0x1c4>)
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	689b      	ldr	r3, [r3, #8]
 80021c4:	494d      	ldr	r1, [pc, #308]	; (80022fc <HAL_RCC_ClockConfig+0x1c4>)
 80021c6:	4313      	orrs	r3, r2
 80021c8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f003 0301 	and.w	r3, r3, #1
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d040      	beq.n	8002258 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	685b      	ldr	r3, [r3, #4]
 80021da:	2b01      	cmp	r3, #1
 80021dc:	d107      	bne.n	80021ee <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021de:	4b47      	ldr	r3, [pc, #284]	; (80022fc <HAL_RCC_ClockConfig+0x1c4>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d115      	bne.n	8002216 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021ea:	2301      	movs	r3, #1
 80021ec:	e07f      	b.n	80022ee <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	685b      	ldr	r3, [r3, #4]
 80021f2:	2b02      	cmp	r3, #2
 80021f4:	d107      	bne.n	8002206 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021f6:	4b41      	ldr	r3, [pc, #260]	; (80022fc <HAL_RCC_ClockConfig+0x1c4>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d109      	bne.n	8002216 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002202:	2301      	movs	r3, #1
 8002204:	e073      	b.n	80022ee <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002206:	4b3d      	ldr	r3, [pc, #244]	; (80022fc <HAL_RCC_ClockConfig+0x1c4>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f003 0302 	and.w	r3, r3, #2
 800220e:	2b00      	cmp	r3, #0
 8002210:	d101      	bne.n	8002216 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002212:	2301      	movs	r3, #1
 8002214:	e06b      	b.n	80022ee <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002216:	4b39      	ldr	r3, [pc, #228]	; (80022fc <HAL_RCC_ClockConfig+0x1c4>)
 8002218:	685b      	ldr	r3, [r3, #4]
 800221a:	f023 0203 	bic.w	r2, r3, #3
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	685b      	ldr	r3, [r3, #4]
 8002222:	4936      	ldr	r1, [pc, #216]	; (80022fc <HAL_RCC_ClockConfig+0x1c4>)
 8002224:	4313      	orrs	r3, r2
 8002226:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002228:	f7ff fa0a 	bl	8001640 <HAL_GetTick>
 800222c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800222e:	e00a      	b.n	8002246 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002230:	f7ff fa06 	bl	8001640 <HAL_GetTick>
 8002234:	4602      	mov	r2, r0
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	1ad3      	subs	r3, r2, r3
 800223a:	f241 3288 	movw	r2, #5000	; 0x1388
 800223e:	4293      	cmp	r3, r2
 8002240:	d901      	bls.n	8002246 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002242:	2303      	movs	r3, #3
 8002244:	e053      	b.n	80022ee <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002246:	4b2d      	ldr	r3, [pc, #180]	; (80022fc <HAL_RCC_ClockConfig+0x1c4>)
 8002248:	685b      	ldr	r3, [r3, #4]
 800224a:	f003 020c 	and.w	r2, r3, #12
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	009b      	lsls	r3, r3, #2
 8002254:	429a      	cmp	r2, r3
 8002256:	d1eb      	bne.n	8002230 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002258:	4b27      	ldr	r3, [pc, #156]	; (80022f8 <HAL_RCC_ClockConfig+0x1c0>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f003 0307 	and.w	r3, r3, #7
 8002260:	683a      	ldr	r2, [r7, #0]
 8002262:	429a      	cmp	r2, r3
 8002264:	d210      	bcs.n	8002288 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002266:	4b24      	ldr	r3, [pc, #144]	; (80022f8 <HAL_RCC_ClockConfig+0x1c0>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f023 0207 	bic.w	r2, r3, #7
 800226e:	4922      	ldr	r1, [pc, #136]	; (80022f8 <HAL_RCC_ClockConfig+0x1c0>)
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	4313      	orrs	r3, r2
 8002274:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002276:	4b20      	ldr	r3, [pc, #128]	; (80022f8 <HAL_RCC_ClockConfig+0x1c0>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f003 0307 	and.w	r3, r3, #7
 800227e:	683a      	ldr	r2, [r7, #0]
 8002280:	429a      	cmp	r2, r3
 8002282:	d001      	beq.n	8002288 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002284:	2301      	movs	r3, #1
 8002286:	e032      	b.n	80022ee <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f003 0304 	and.w	r3, r3, #4
 8002290:	2b00      	cmp	r3, #0
 8002292:	d008      	beq.n	80022a6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002294:	4b19      	ldr	r3, [pc, #100]	; (80022fc <HAL_RCC_ClockConfig+0x1c4>)
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	68db      	ldr	r3, [r3, #12]
 80022a0:	4916      	ldr	r1, [pc, #88]	; (80022fc <HAL_RCC_ClockConfig+0x1c4>)
 80022a2:	4313      	orrs	r3, r2
 80022a4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f003 0308 	and.w	r3, r3, #8
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d009      	beq.n	80022c6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80022b2:	4b12      	ldr	r3, [pc, #72]	; (80022fc <HAL_RCC_ClockConfig+0x1c4>)
 80022b4:	685b      	ldr	r3, [r3, #4]
 80022b6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	691b      	ldr	r3, [r3, #16]
 80022be:	00db      	lsls	r3, r3, #3
 80022c0:	490e      	ldr	r1, [pc, #56]	; (80022fc <HAL_RCC_ClockConfig+0x1c4>)
 80022c2:	4313      	orrs	r3, r2
 80022c4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80022c6:	f000 f821 	bl	800230c <HAL_RCC_GetSysClockFreq>
 80022ca:	4602      	mov	r2, r0
 80022cc:	4b0b      	ldr	r3, [pc, #44]	; (80022fc <HAL_RCC_ClockConfig+0x1c4>)
 80022ce:	685b      	ldr	r3, [r3, #4]
 80022d0:	091b      	lsrs	r3, r3, #4
 80022d2:	f003 030f 	and.w	r3, r3, #15
 80022d6:	490a      	ldr	r1, [pc, #40]	; (8002300 <HAL_RCC_ClockConfig+0x1c8>)
 80022d8:	5ccb      	ldrb	r3, [r1, r3]
 80022da:	fa22 f303 	lsr.w	r3, r2, r3
 80022de:	4a09      	ldr	r2, [pc, #36]	; (8002304 <HAL_RCC_ClockConfig+0x1cc>)
 80022e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80022e2:	4b09      	ldr	r3, [pc, #36]	; (8002308 <HAL_RCC_ClockConfig+0x1d0>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	4618      	mov	r0, r3
 80022e8:	f7ff f968 	bl	80015bc <HAL_InitTick>

  return HAL_OK;
 80022ec:	2300      	movs	r3, #0
}
 80022ee:	4618      	mov	r0, r3
 80022f0:	3710      	adds	r7, #16
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bd80      	pop	{r7, pc}
 80022f6:	bf00      	nop
 80022f8:	40022000 	.word	0x40022000
 80022fc:	40021000 	.word	0x40021000
 8002300:	08003794 	.word	0x08003794
 8002304:	20000040 	.word	0x20000040
 8002308:	20000044 	.word	0x20000044

0800230c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800230c:	b490      	push	{r4, r7}
 800230e:	b08a      	sub	sp, #40	; 0x28
 8002310:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002312:	4b29      	ldr	r3, [pc, #164]	; (80023b8 <HAL_RCC_GetSysClockFreq+0xac>)
 8002314:	1d3c      	adds	r4, r7, #4
 8002316:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002318:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800231c:	f240 2301 	movw	r3, #513	; 0x201
 8002320:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002322:	2300      	movs	r3, #0
 8002324:	61fb      	str	r3, [r7, #28]
 8002326:	2300      	movs	r3, #0
 8002328:	61bb      	str	r3, [r7, #24]
 800232a:	2300      	movs	r3, #0
 800232c:	627b      	str	r3, [r7, #36]	; 0x24
 800232e:	2300      	movs	r3, #0
 8002330:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002332:	2300      	movs	r3, #0
 8002334:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002336:	4b21      	ldr	r3, [pc, #132]	; (80023bc <HAL_RCC_GetSysClockFreq+0xb0>)
 8002338:	685b      	ldr	r3, [r3, #4]
 800233a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800233c:	69fb      	ldr	r3, [r7, #28]
 800233e:	f003 030c 	and.w	r3, r3, #12
 8002342:	2b04      	cmp	r3, #4
 8002344:	d002      	beq.n	800234c <HAL_RCC_GetSysClockFreq+0x40>
 8002346:	2b08      	cmp	r3, #8
 8002348:	d003      	beq.n	8002352 <HAL_RCC_GetSysClockFreq+0x46>
 800234a:	e02b      	b.n	80023a4 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800234c:	4b1c      	ldr	r3, [pc, #112]	; (80023c0 <HAL_RCC_GetSysClockFreq+0xb4>)
 800234e:	623b      	str	r3, [r7, #32]
      break;
 8002350:	e02b      	b.n	80023aa <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002352:	69fb      	ldr	r3, [r7, #28]
 8002354:	0c9b      	lsrs	r3, r3, #18
 8002356:	f003 030f 	and.w	r3, r3, #15
 800235a:	3328      	adds	r3, #40	; 0x28
 800235c:	443b      	add	r3, r7
 800235e:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002362:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002364:	69fb      	ldr	r3, [r7, #28]
 8002366:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800236a:	2b00      	cmp	r3, #0
 800236c:	d012      	beq.n	8002394 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800236e:	4b13      	ldr	r3, [pc, #76]	; (80023bc <HAL_RCC_GetSysClockFreq+0xb0>)
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	0c5b      	lsrs	r3, r3, #17
 8002374:	f003 0301 	and.w	r3, r3, #1
 8002378:	3328      	adds	r3, #40	; 0x28
 800237a:	443b      	add	r3, r7
 800237c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002380:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002382:	697b      	ldr	r3, [r7, #20]
 8002384:	4a0e      	ldr	r2, [pc, #56]	; (80023c0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002386:	fb03 f202 	mul.w	r2, r3, r2
 800238a:	69bb      	ldr	r3, [r7, #24]
 800238c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002390:	627b      	str	r3, [r7, #36]	; 0x24
 8002392:	e004      	b.n	800239e <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002394:	697b      	ldr	r3, [r7, #20]
 8002396:	4a0b      	ldr	r2, [pc, #44]	; (80023c4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002398:	fb02 f303 	mul.w	r3, r2, r3
 800239c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800239e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023a0:	623b      	str	r3, [r7, #32]
      break;
 80023a2:	e002      	b.n	80023aa <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80023a4:	4b06      	ldr	r3, [pc, #24]	; (80023c0 <HAL_RCC_GetSysClockFreq+0xb4>)
 80023a6:	623b      	str	r3, [r7, #32]
      break;
 80023a8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80023aa:	6a3b      	ldr	r3, [r7, #32]
}
 80023ac:	4618      	mov	r0, r3
 80023ae:	3728      	adds	r7, #40	; 0x28
 80023b0:	46bd      	mov	sp, r7
 80023b2:	bc90      	pop	{r4, r7}
 80023b4:	4770      	bx	lr
 80023b6:	bf00      	nop
 80023b8:	08003784 	.word	0x08003784
 80023bc:	40021000 	.word	0x40021000
 80023c0:	007a1200 	.word	0x007a1200
 80023c4:	003d0900 	.word	0x003d0900

080023c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80023c8:	b480      	push	{r7}
 80023ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80023cc:	4b02      	ldr	r3, [pc, #8]	; (80023d8 <HAL_RCC_GetHCLKFreq+0x10>)
 80023ce:	681b      	ldr	r3, [r3, #0]
}
 80023d0:	4618      	mov	r0, r3
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bc80      	pop	{r7}
 80023d6:	4770      	bx	lr
 80023d8:	20000040 	.word	0x20000040

080023dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80023e0:	f7ff fff2 	bl	80023c8 <HAL_RCC_GetHCLKFreq>
 80023e4:	4602      	mov	r2, r0
 80023e6:	4b05      	ldr	r3, [pc, #20]	; (80023fc <HAL_RCC_GetPCLK1Freq+0x20>)
 80023e8:	685b      	ldr	r3, [r3, #4]
 80023ea:	0a1b      	lsrs	r3, r3, #8
 80023ec:	f003 0307 	and.w	r3, r3, #7
 80023f0:	4903      	ldr	r1, [pc, #12]	; (8002400 <HAL_RCC_GetPCLK1Freq+0x24>)
 80023f2:	5ccb      	ldrb	r3, [r1, r3]
 80023f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80023f8:	4618      	mov	r0, r3
 80023fa:	bd80      	pop	{r7, pc}
 80023fc:	40021000 	.word	0x40021000
 8002400:	080037a4 	.word	0x080037a4

08002404 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002408:	f7ff ffde 	bl	80023c8 <HAL_RCC_GetHCLKFreq>
 800240c:	4602      	mov	r2, r0
 800240e:	4b05      	ldr	r3, [pc, #20]	; (8002424 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002410:	685b      	ldr	r3, [r3, #4]
 8002412:	0adb      	lsrs	r3, r3, #11
 8002414:	f003 0307 	and.w	r3, r3, #7
 8002418:	4903      	ldr	r1, [pc, #12]	; (8002428 <HAL_RCC_GetPCLK2Freq+0x24>)
 800241a:	5ccb      	ldrb	r3, [r1, r3]
 800241c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002420:	4618      	mov	r0, r3
 8002422:	bd80      	pop	{r7, pc}
 8002424:	40021000 	.word	0x40021000
 8002428:	080037a4 	.word	0x080037a4

0800242c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800242c:	b480      	push	{r7}
 800242e:	b085      	sub	sp, #20
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002434:	4b0a      	ldr	r3, [pc, #40]	; (8002460 <RCC_Delay+0x34>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	4a0a      	ldr	r2, [pc, #40]	; (8002464 <RCC_Delay+0x38>)
 800243a:	fba2 2303 	umull	r2, r3, r2, r3
 800243e:	0a5b      	lsrs	r3, r3, #9
 8002440:	687a      	ldr	r2, [r7, #4]
 8002442:	fb02 f303 	mul.w	r3, r2, r3
 8002446:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002448:	bf00      	nop
  }
  while (Delay --);
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	1e5a      	subs	r2, r3, #1
 800244e:	60fa      	str	r2, [r7, #12]
 8002450:	2b00      	cmp	r3, #0
 8002452:	d1f9      	bne.n	8002448 <RCC_Delay+0x1c>
}
 8002454:	bf00      	nop
 8002456:	bf00      	nop
 8002458:	3714      	adds	r7, #20
 800245a:	46bd      	mov	sp, r7
 800245c:	bc80      	pop	{r7}
 800245e:	4770      	bx	lr
 8002460:	20000040 	.word	0x20000040
 8002464:	10624dd3 	.word	0x10624dd3

08002468 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b082      	sub	sp, #8
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2b00      	cmp	r3, #0
 8002474:	d101      	bne.n	800247a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002476:	2301      	movs	r3, #1
 8002478:	e03f      	b.n	80024fa <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002480:	b2db      	uxtb	r3, r3
 8002482:	2b00      	cmp	r3, #0
 8002484:	d106      	bne.n	8002494 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	2200      	movs	r2, #0
 800248a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800248e:	6878      	ldr	r0, [r7, #4]
 8002490:	f7fe ff2c 	bl	80012ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2224      	movs	r2, #36	; 0x24
 8002498:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	68da      	ldr	r2, [r3, #12]
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80024aa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80024ac:	6878      	ldr	r0, [r7, #4]
 80024ae:	f000 f9a7 	bl	8002800 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	691a      	ldr	r2, [r3, #16]
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80024c0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	695a      	ldr	r2, [r3, #20]
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80024d0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	68da      	ldr	r2, [r3, #12]
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80024e0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	2200      	movs	r2, #0
 80024e6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2220      	movs	r2, #32
 80024ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2220      	movs	r2, #32
 80024f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80024f8:	2300      	movs	r3, #0
}
 80024fa:	4618      	mov	r0, r3
 80024fc:	3708      	adds	r7, #8
 80024fe:	46bd      	mov	sp, r7
 8002500:	bd80      	pop	{r7, pc}

08002502 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002502:	b580      	push	{r7, lr}
 8002504:	b08a      	sub	sp, #40	; 0x28
 8002506:	af02      	add	r7, sp, #8
 8002508:	60f8      	str	r0, [r7, #12]
 800250a:	60b9      	str	r1, [r7, #8]
 800250c:	603b      	str	r3, [r7, #0]
 800250e:	4613      	mov	r3, r2
 8002510:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002512:	2300      	movs	r3, #0
 8002514:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800251c:	b2db      	uxtb	r3, r3
 800251e:	2b20      	cmp	r3, #32
 8002520:	d17c      	bne.n	800261c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002522:	68bb      	ldr	r3, [r7, #8]
 8002524:	2b00      	cmp	r3, #0
 8002526:	d002      	beq.n	800252e <HAL_UART_Transmit+0x2c>
 8002528:	88fb      	ldrh	r3, [r7, #6]
 800252a:	2b00      	cmp	r3, #0
 800252c:	d101      	bne.n	8002532 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800252e:	2301      	movs	r3, #1
 8002530:	e075      	b.n	800261e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002538:	2b01      	cmp	r3, #1
 800253a:	d101      	bne.n	8002540 <HAL_UART_Transmit+0x3e>
 800253c:	2302      	movs	r3, #2
 800253e:	e06e      	b.n	800261e <HAL_UART_Transmit+0x11c>
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	2201      	movs	r2, #1
 8002544:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	2200      	movs	r2, #0
 800254c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	2221      	movs	r2, #33	; 0x21
 8002552:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002556:	f7ff f873 	bl	8001640 <HAL_GetTick>
 800255a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	88fa      	ldrh	r2, [r7, #6]
 8002560:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	88fa      	ldrh	r2, [r7, #6]
 8002566:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	689b      	ldr	r3, [r3, #8]
 800256c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002570:	d108      	bne.n	8002584 <HAL_UART_Transmit+0x82>
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	691b      	ldr	r3, [r3, #16]
 8002576:	2b00      	cmp	r3, #0
 8002578:	d104      	bne.n	8002584 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800257a:	2300      	movs	r3, #0
 800257c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800257e:	68bb      	ldr	r3, [r7, #8]
 8002580:	61bb      	str	r3, [r7, #24]
 8002582:	e003      	b.n	800258c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002584:	68bb      	ldr	r3, [r7, #8]
 8002586:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002588:	2300      	movs	r3, #0
 800258a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	2200      	movs	r2, #0
 8002590:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002594:	e02a      	b.n	80025ec <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	9300      	str	r3, [sp, #0]
 800259a:	697b      	ldr	r3, [r7, #20]
 800259c:	2200      	movs	r2, #0
 800259e:	2180      	movs	r1, #128	; 0x80
 80025a0:	68f8      	ldr	r0, [r7, #12]
 80025a2:	f000 f8e2 	bl	800276a <UART_WaitOnFlagUntilTimeout>
 80025a6:	4603      	mov	r3, r0
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d001      	beq.n	80025b0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80025ac:	2303      	movs	r3, #3
 80025ae:	e036      	b.n	800261e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80025b0:	69fb      	ldr	r3, [r7, #28]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d10b      	bne.n	80025ce <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80025b6:	69bb      	ldr	r3, [r7, #24]
 80025b8:	881b      	ldrh	r3, [r3, #0]
 80025ba:	461a      	mov	r2, r3
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80025c4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80025c6:	69bb      	ldr	r3, [r7, #24]
 80025c8:	3302      	adds	r3, #2
 80025ca:	61bb      	str	r3, [r7, #24]
 80025cc:	e007      	b.n	80025de <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80025ce:	69fb      	ldr	r3, [r7, #28]
 80025d0:	781a      	ldrb	r2, [r3, #0]
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80025d8:	69fb      	ldr	r3, [r7, #28]
 80025da:	3301      	adds	r3, #1
 80025dc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80025e2:	b29b      	uxth	r3, r3
 80025e4:	3b01      	subs	r3, #1
 80025e6:	b29a      	uxth	r2, r3
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80025f0:	b29b      	uxth	r3, r3
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d1cf      	bne.n	8002596 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	9300      	str	r3, [sp, #0]
 80025fa:	697b      	ldr	r3, [r7, #20]
 80025fc:	2200      	movs	r2, #0
 80025fe:	2140      	movs	r1, #64	; 0x40
 8002600:	68f8      	ldr	r0, [r7, #12]
 8002602:	f000 f8b2 	bl	800276a <UART_WaitOnFlagUntilTimeout>
 8002606:	4603      	mov	r3, r0
 8002608:	2b00      	cmp	r3, #0
 800260a:	d001      	beq.n	8002610 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800260c:	2303      	movs	r3, #3
 800260e:	e006      	b.n	800261e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	2220      	movs	r2, #32
 8002614:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002618:	2300      	movs	r3, #0
 800261a:	e000      	b.n	800261e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800261c:	2302      	movs	r3, #2
  }
}
 800261e:	4618      	mov	r0, r3
 8002620:	3720      	adds	r7, #32
 8002622:	46bd      	mov	sp, r7
 8002624:	bd80      	pop	{r7, pc}

08002626 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002626:	b580      	push	{r7, lr}
 8002628:	b08a      	sub	sp, #40	; 0x28
 800262a:	af02      	add	r7, sp, #8
 800262c:	60f8      	str	r0, [r7, #12]
 800262e:	60b9      	str	r1, [r7, #8]
 8002630:	603b      	str	r3, [r7, #0]
 8002632:	4613      	mov	r3, r2
 8002634:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002636:	2300      	movs	r3, #0
 8002638:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002640:	b2db      	uxtb	r3, r3
 8002642:	2b20      	cmp	r3, #32
 8002644:	f040 808c 	bne.w	8002760 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002648:	68bb      	ldr	r3, [r7, #8]
 800264a:	2b00      	cmp	r3, #0
 800264c:	d002      	beq.n	8002654 <HAL_UART_Receive+0x2e>
 800264e:	88fb      	ldrh	r3, [r7, #6]
 8002650:	2b00      	cmp	r3, #0
 8002652:	d101      	bne.n	8002658 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8002654:	2301      	movs	r3, #1
 8002656:	e084      	b.n	8002762 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800265e:	2b01      	cmp	r3, #1
 8002660:	d101      	bne.n	8002666 <HAL_UART_Receive+0x40>
 8002662:	2302      	movs	r3, #2
 8002664:	e07d      	b.n	8002762 <HAL_UART_Receive+0x13c>
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	2201      	movs	r2, #1
 800266a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	2200      	movs	r2, #0
 8002672:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	2222      	movs	r2, #34	; 0x22
 8002678:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	2200      	movs	r2, #0
 8002680:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002682:	f7fe ffdd 	bl	8001640 <HAL_GetTick>
 8002686:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	88fa      	ldrh	r2, [r7, #6]
 800268c:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	88fa      	ldrh	r2, [r7, #6]
 8002692:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	689b      	ldr	r3, [r3, #8]
 8002698:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800269c:	d108      	bne.n	80026b0 <HAL_UART_Receive+0x8a>
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	691b      	ldr	r3, [r3, #16]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d104      	bne.n	80026b0 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 80026a6:	2300      	movs	r3, #0
 80026a8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80026aa:	68bb      	ldr	r3, [r7, #8]
 80026ac:	61bb      	str	r3, [r7, #24]
 80026ae:	e003      	b.n	80026b8 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 80026b0:	68bb      	ldr	r3, [r7, #8]
 80026b2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80026b4:	2300      	movs	r3, #0
 80026b6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	2200      	movs	r2, #0
 80026bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80026c0:	e043      	b.n	800274a <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	9300      	str	r3, [sp, #0]
 80026c6:	697b      	ldr	r3, [r7, #20]
 80026c8:	2200      	movs	r2, #0
 80026ca:	2120      	movs	r1, #32
 80026cc:	68f8      	ldr	r0, [r7, #12]
 80026ce:	f000 f84c 	bl	800276a <UART_WaitOnFlagUntilTimeout>
 80026d2:	4603      	mov	r3, r0
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d001      	beq.n	80026dc <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 80026d8:	2303      	movs	r3, #3
 80026da:	e042      	b.n	8002762 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 80026dc:	69fb      	ldr	r3, [r7, #28]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d10c      	bne.n	80026fc <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	b29b      	uxth	r3, r3
 80026ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80026ee:	b29a      	uxth	r2, r3
 80026f0:	69bb      	ldr	r3, [r7, #24]
 80026f2:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80026f4:	69bb      	ldr	r3, [r7, #24]
 80026f6:	3302      	adds	r3, #2
 80026f8:	61bb      	str	r3, [r7, #24]
 80026fa:	e01f      	b.n	800273c <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	689b      	ldr	r3, [r3, #8]
 8002700:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002704:	d007      	beq.n	8002716 <HAL_UART_Receive+0xf0>
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	689b      	ldr	r3, [r3, #8]
 800270a:	2b00      	cmp	r3, #0
 800270c:	d10a      	bne.n	8002724 <HAL_UART_Receive+0xfe>
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	691b      	ldr	r3, [r3, #16]
 8002712:	2b00      	cmp	r3, #0
 8002714:	d106      	bne.n	8002724 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	685b      	ldr	r3, [r3, #4]
 800271c:	b2da      	uxtb	r2, r3
 800271e:	69fb      	ldr	r3, [r7, #28]
 8002720:	701a      	strb	r2, [r3, #0]
 8002722:	e008      	b.n	8002736 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	685b      	ldr	r3, [r3, #4]
 800272a:	b2db      	uxtb	r3, r3
 800272c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002730:	b2da      	uxtb	r2, r3
 8002732:	69fb      	ldr	r3, [r7, #28]
 8002734:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8002736:	69fb      	ldr	r3, [r7, #28]
 8002738:	3301      	adds	r3, #1
 800273a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002740:	b29b      	uxth	r3, r3
 8002742:	3b01      	subs	r3, #1
 8002744:	b29a      	uxth	r2, r3
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800274e:	b29b      	uxth	r3, r3
 8002750:	2b00      	cmp	r3, #0
 8002752:	d1b6      	bne.n	80026c2 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	2220      	movs	r2, #32
 8002758:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 800275c:	2300      	movs	r3, #0
 800275e:	e000      	b.n	8002762 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8002760:	2302      	movs	r3, #2
  }
}
 8002762:	4618      	mov	r0, r3
 8002764:	3720      	adds	r7, #32
 8002766:	46bd      	mov	sp, r7
 8002768:	bd80      	pop	{r7, pc}

0800276a <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800276a:	b580      	push	{r7, lr}
 800276c:	b084      	sub	sp, #16
 800276e:	af00      	add	r7, sp, #0
 8002770:	60f8      	str	r0, [r7, #12]
 8002772:	60b9      	str	r1, [r7, #8]
 8002774:	603b      	str	r3, [r7, #0]
 8002776:	4613      	mov	r3, r2
 8002778:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800277a:	e02c      	b.n	80027d6 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800277c:	69bb      	ldr	r3, [r7, #24]
 800277e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002782:	d028      	beq.n	80027d6 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002784:	69bb      	ldr	r3, [r7, #24]
 8002786:	2b00      	cmp	r3, #0
 8002788:	d007      	beq.n	800279a <UART_WaitOnFlagUntilTimeout+0x30>
 800278a:	f7fe ff59 	bl	8001640 <HAL_GetTick>
 800278e:	4602      	mov	r2, r0
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	1ad3      	subs	r3, r2, r3
 8002794:	69ba      	ldr	r2, [r7, #24]
 8002796:	429a      	cmp	r2, r3
 8002798:	d21d      	bcs.n	80027d6 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	68da      	ldr	r2, [r3, #12]
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80027a8:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	695a      	ldr	r2, [r3, #20]
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f022 0201 	bic.w	r2, r2, #1
 80027b8:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	2220      	movs	r2, #32
 80027be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	2220      	movs	r2, #32
 80027c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	2200      	movs	r2, #0
 80027ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80027d2:	2303      	movs	r3, #3
 80027d4:	e00f      	b.n	80027f6 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	681a      	ldr	r2, [r3, #0]
 80027dc:	68bb      	ldr	r3, [r7, #8]
 80027de:	4013      	ands	r3, r2
 80027e0:	68ba      	ldr	r2, [r7, #8]
 80027e2:	429a      	cmp	r2, r3
 80027e4:	bf0c      	ite	eq
 80027e6:	2301      	moveq	r3, #1
 80027e8:	2300      	movne	r3, #0
 80027ea:	b2db      	uxtb	r3, r3
 80027ec:	461a      	mov	r2, r3
 80027ee:	79fb      	ldrb	r3, [r7, #7]
 80027f0:	429a      	cmp	r2, r3
 80027f2:	d0c3      	beq.n	800277c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80027f4:	2300      	movs	r3, #0
}
 80027f6:	4618      	mov	r0, r3
 80027f8:	3710      	adds	r7, #16
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bd80      	pop	{r7, pc}
	...

08002800 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b084      	sub	sp, #16
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	691b      	ldr	r3, [r3, #16]
 800280e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	68da      	ldr	r2, [r3, #12]
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	430a      	orrs	r2, r1
 800281c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	689a      	ldr	r2, [r3, #8]
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	691b      	ldr	r3, [r3, #16]
 8002826:	431a      	orrs	r2, r3
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	695b      	ldr	r3, [r3, #20]
 800282c:	4313      	orrs	r3, r2
 800282e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	68db      	ldr	r3, [r3, #12]
 8002836:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800283a:	f023 030c 	bic.w	r3, r3, #12
 800283e:	687a      	ldr	r2, [r7, #4]
 8002840:	6812      	ldr	r2, [r2, #0]
 8002842:	68b9      	ldr	r1, [r7, #8]
 8002844:	430b      	orrs	r3, r1
 8002846:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	695b      	ldr	r3, [r3, #20]
 800284e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	699a      	ldr	r2, [r3, #24]
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	430a      	orrs	r2, r1
 800285c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4a2c      	ldr	r2, [pc, #176]	; (8002914 <UART_SetConfig+0x114>)
 8002864:	4293      	cmp	r3, r2
 8002866:	d103      	bne.n	8002870 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002868:	f7ff fdcc 	bl	8002404 <HAL_RCC_GetPCLK2Freq>
 800286c:	60f8      	str	r0, [r7, #12]
 800286e:	e002      	b.n	8002876 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002870:	f7ff fdb4 	bl	80023dc <HAL_RCC_GetPCLK1Freq>
 8002874:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002876:	68fa      	ldr	r2, [r7, #12]
 8002878:	4613      	mov	r3, r2
 800287a:	009b      	lsls	r3, r3, #2
 800287c:	4413      	add	r3, r2
 800287e:	009a      	lsls	r2, r3, #2
 8002880:	441a      	add	r2, r3
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	009b      	lsls	r3, r3, #2
 8002888:	fbb2 f3f3 	udiv	r3, r2, r3
 800288c:	4a22      	ldr	r2, [pc, #136]	; (8002918 <UART_SetConfig+0x118>)
 800288e:	fba2 2303 	umull	r2, r3, r2, r3
 8002892:	095b      	lsrs	r3, r3, #5
 8002894:	0119      	lsls	r1, r3, #4
 8002896:	68fa      	ldr	r2, [r7, #12]
 8002898:	4613      	mov	r3, r2
 800289a:	009b      	lsls	r3, r3, #2
 800289c:	4413      	add	r3, r2
 800289e:	009a      	lsls	r2, r3, #2
 80028a0:	441a      	add	r2, r3
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	009b      	lsls	r3, r3, #2
 80028a8:	fbb2 f2f3 	udiv	r2, r2, r3
 80028ac:	4b1a      	ldr	r3, [pc, #104]	; (8002918 <UART_SetConfig+0x118>)
 80028ae:	fba3 0302 	umull	r0, r3, r3, r2
 80028b2:	095b      	lsrs	r3, r3, #5
 80028b4:	2064      	movs	r0, #100	; 0x64
 80028b6:	fb00 f303 	mul.w	r3, r0, r3
 80028ba:	1ad3      	subs	r3, r2, r3
 80028bc:	011b      	lsls	r3, r3, #4
 80028be:	3332      	adds	r3, #50	; 0x32
 80028c0:	4a15      	ldr	r2, [pc, #84]	; (8002918 <UART_SetConfig+0x118>)
 80028c2:	fba2 2303 	umull	r2, r3, r2, r3
 80028c6:	095b      	lsrs	r3, r3, #5
 80028c8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80028cc:	4419      	add	r1, r3
 80028ce:	68fa      	ldr	r2, [r7, #12]
 80028d0:	4613      	mov	r3, r2
 80028d2:	009b      	lsls	r3, r3, #2
 80028d4:	4413      	add	r3, r2
 80028d6:	009a      	lsls	r2, r3, #2
 80028d8:	441a      	add	r2, r3
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	685b      	ldr	r3, [r3, #4]
 80028de:	009b      	lsls	r3, r3, #2
 80028e0:	fbb2 f2f3 	udiv	r2, r2, r3
 80028e4:	4b0c      	ldr	r3, [pc, #48]	; (8002918 <UART_SetConfig+0x118>)
 80028e6:	fba3 0302 	umull	r0, r3, r3, r2
 80028ea:	095b      	lsrs	r3, r3, #5
 80028ec:	2064      	movs	r0, #100	; 0x64
 80028ee:	fb00 f303 	mul.w	r3, r0, r3
 80028f2:	1ad3      	subs	r3, r2, r3
 80028f4:	011b      	lsls	r3, r3, #4
 80028f6:	3332      	adds	r3, #50	; 0x32
 80028f8:	4a07      	ldr	r2, [pc, #28]	; (8002918 <UART_SetConfig+0x118>)
 80028fa:	fba2 2303 	umull	r2, r3, r2, r3
 80028fe:	095b      	lsrs	r3, r3, #5
 8002900:	f003 020f 	and.w	r2, r3, #15
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	440a      	add	r2, r1
 800290a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800290c:	bf00      	nop
 800290e:	3710      	adds	r7, #16
 8002910:	46bd      	mov	sp, r7
 8002912:	bd80      	pop	{r7, pc}
 8002914:	40013800 	.word	0x40013800
 8002918:	51eb851f 	.word	0x51eb851f

0800291c <__errno>:
 800291c:	4b01      	ldr	r3, [pc, #4]	; (8002924 <__errno+0x8>)
 800291e:	6818      	ldr	r0, [r3, #0]
 8002920:	4770      	bx	lr
 8002922:	bf00      	nop
 8002924:	2000004c 	.word	0x2000004c

08002928 <__libc_init_array>:
 8002928:	b570      	push	{r4, r5, r6, lr}
 800292a:	2600      	movs	r6, #0
 800292c:	4d0c      	ldr	r5, [pc, #48]	; (8002960 <__libc_init_array+0x38>)
 800292e:	4c0d      	ldr	r4, [pc, #52]	; (8002964 <__libc_init_array+0x3c>)
 8002930:	1b64      	subs	r4, r4, r5
 8002932:	10a4      	asrs	r4, r4, #2
 8002934:	42a6      	cmp	r6, r4
 8002936:	d109      	bne.n	800294c <__libc_init_array+0x24>
 8002938:	f000 fc9c 	bl	8003274 <_init>
 800293c:	2600      	movs	r6, #0
 800293e:	4d0a      	ldr	r5, [pc, #40]	; (8002968 <__libc_init_array+0x40>)
 8002940:	4c0a      	ldr	r4, [pc, #40]	; (800296c <__libc_init_array+0x44>)
 8002942:	1b64      	subs	r4, r4, r5
 8002944:	10a4      	asrs	r4, r4, #2
 8002946:	42a6      	cmp	r6, r4
 8002948:	d105      	bne.n	8002956 <__libc_init_array+0x2e>
 800294a:	bd70      	pop	{r4, r5, r6, pc}
 800294c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002950:	4798      	blx	r3
 8002952:	3601      	adds	r6, #1
 8002954:	e7ee      	b.n	8002934 <__libc_init_array+0xc>
 8002956:	f855 3b04 	ldr.w	r3, [r5], #4
 800295a:	4798      	blx	r3
 800295c:	3601      	adds	r6, #1
 800295e:	e7f2      	b.n	8002946 <__libc_init_array+0x1e>
 8002960:	080037e0 	.word	0x080037e0
 8002964:	080037e0 	.word	0x080037e0
 8002968:	080037e0 	.word	0x080037e0
 800296c:	080037e4 	.word	0x080037e4

08002970 <memset>:
 8002970:	4603      	mov	r3, r0
 8002972:	4402      	add	r2, r0
 8002974:	4293      	cmp	r3, r2
 8002976:	d100      	bne.n	800297a <memset+0xa>
 8002978:	4770      	bx	lr
 800297a:	f803 1b01 	strb.w	r1, [r3], #1
 800297e:	e7f9      	b.n	8002974 <memset+0x4>

08002980 <siprintf>:
 8002980:	b40e      	push	{r1, r2, r3}
 8002982:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002986:	b500      	push	{lr}
 8002988:	b09c      	sub	sp, #112	; 0x70
 800298a:	ab1d      	add	r3, sp, #116	; 0x74
 800298c:	9002      	str	r0, [sp, #8]
 800298e:	9006      	str	r0, [sp, #24]
 8002990:	9107      	str	r1, [sp, #28]
 8002992:	9104      	str	r1, [sp, #16]
 8002994:	4808      	ldr	r0, [pc, #32]	; (80029b8 <siprintf+0x38>)
 8002996:	4909      	ldr	r1, [pc, #36]	; (80029bc <siprintf+0x3c>)
 8002998:	f853 2b04 	ldr.w	r2, [r3], #4
 800299c:	9105      	str	r1, [sp, #20]
 800299e:	6800      	ldr	r0, [r0, #0]
 80029a0:	a902      	add	r1, sp, #8
 80029a2:	9301      	str	r3, [sp, #4]
 80029a4:	f000 f868 	bl	8002a78 <_svfiprintf_r>
 80029a8:	2200      	movs	r2, #0
 80029aa:	9b02      	ldr	r3, [sp, #8]
 80029ac:	701a      	strb	r2, [r3, #0]
 80029ae:	b01c      	add	sp, #112	; 0x70
 80029b0:	f85d eb04 	ldr.w	lr, [sp], #4
 80029b4:	b003      	add	sp, #12
 80029b6:	4770      	bx	lr
 80029b8:	2000004c 	.word	0x2000004c
 80029bc:	ffff0208 	.word	0xffff0208

080029c0 <__ssputs_r>:
 80029c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80029c4:	688e      	ldr	r6, [r1, #8]
 80029c6:	4682      	mov	sl, r0
 80029c8:	429e      	cmp	r6, r3
 80029ca:	460c      	mov	r4, r1
 80029cc:	4690      	mov	r8, r2
 80029ce:	461f      	mov	r7, r3
 80029d0:	d838      	bhi.n	8002a44 <__ssputs_r+0x84>
 80029d2:	898a      	ldrh	r2, [r1, #12]
 80029d4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80029d8:	d032      	beq.n	8002a40 <__ssputs_r+0x80>
 80029da:	6825      	ldr	r5, [r4, #0]
 80029dc:	6909      	ldr	r1, [r1, #16]
 80029de:	3301      	adds	r3, #1
 80029e0:	eba5 0901 	sub.w	r9, r5, r1
 80029e4:	6965      	ldr	r5, [r4, #20]
 80029e6:	444b      	add	r3, r9
 80029e8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80029ec:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80029f0:	106d      	asrs	r5, r5, #1
 80029f2:	429d      	cmp	r5, r3
 80029f4:	bf38      	it	cc
 80029f6:	461d      	movcc	r5, r3
 80029f8:	0553      	lsls	r3, r2, #21
 80029fa:	d531      	bpl.n	8002a60 <__ssputs_r+0xa0>
 80029fc:	4629      	mov	r1, r5
 80029fe:	f000 fb6f 	bl	80030e0 <_malloc_r>
 8002a02:	4606      	mov	r6, r0
 8002a04:	b950      	cbnz	r0, 8002a1c <__ssputs_r+0x5c>
 8002a06:	230c      	movs	r3, #12
 8002a08:	f04f 30ff 	mov.w	r0, #4294967295
 8002a0c:	f8ca 3000 	str.w	r3, [sl]
 8002a10:	89a3      	ldrh	r3, [r4, #12]
 8002a12:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002a16:	81a3      	strh	r3, [r4, #12]
 8002a18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002a1c:	464a      	mov	r2, r9
 8002a1e:	6921      	ldr	r1, [r4, #16]
 8002a20:	f000 face 	bl	8002fc0 <memcpy>
 8002a24:	89a3      	ldrh	r3, [r4, #12]
 8002a26:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002a2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a2e:	81a3      	strh	r3, [r4, #12]
 8002a30:	6126      	str	r6, [r4, #16]
 8002a32:	444e      	add	r6, r9
 8002a34:	6026      	str	r6, [r4, #0]
 8002a36:	463e      	mov	r6, r7
 8002a38:	6165      	str	r5, [r4, #20]
 8002a3a:	eba5 0509 	sub.w	r5, r5, r9
 8002a3e:	60a5      	str	r5, [r4, #8]
 8002a40:	42be      	cmp	r6, r7
 8002a42:	d900      	bls.n	8002a46 <__ssputs_r+0x86>
 8002a44:	463e      	mov	r6, r7
 8002a46:	4632      	mov	r2, r6
 8002a48:	4641      	mov	r1, r8
 8002a4a:	6820      	ldr	r0, [r4, #0]
 8002a4c:	f000 fac6 	bl	8002fdc <memmove>
 8002a50:	68a3      	ldr	r3, [r4, #8]
 8002a52:	2000      	movs	r0, #0
 8002a54:	1b9b      	subs	r3, r3, r6
 8002a56:	60a3      	str	r3, [r4, #8]
 8002a58:	6823      	ldr	r3, [r4, #0]
 8002a5a:	4433      	add	r3, r6
 8002a5c:	6023      	str	r3, [r4, #0]
 8002a5e:	e7db      	b.n	8002a18 <__ssputs_r+0x58>
 8002a60:	462a      	mov	r2, r5
 8002a62:	f000 fbb1 	bl	80031c8 <_realloc_r>
 8002a66:	4606      	mov	r6, r0
 8002a68:	2800      	cmp	r0, #0
 8002a6a:	d1e1      	bne.n	8002a30 <__ssputs_r+0x70>
 8002a6c:	4650      	mov	r0, sl
 8002a6e:	6921      	ldr	r1, [r4, #16]
 8002a70:	f000 face 	bl	8003010 <_free_r>
 8002a74:	e7c7      	b.n	8002a06 <__ssputs_r+0x46>
	...

08002a78 <_svfiprintf_r>:
 8002a78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002a7c:	4698      	mov	r8, r3
 8002a7e:	898b      	ldrh	r3, [r1, #12]
 8002a80:	4607      	mov	r7, r0
 8002a82:	061b      	lsls	r3, r3, #24
 8002a84:	460d      	mov	r5, r1
 8002a86:	4614      	mov	r4, r2
 8002a88:	b09d      	sub	sp, #116	; 0x74
 8002a8a:	d50e      	bpl.n	8002aaa <_svfiprintf_r+0x32>
 8002a8c:	690b      	ldr	r3, [r1, #16]
 8002a8e:	b963      	cbnz	r3, 8002aaa <_svfiprintf_r+0x32>
 8002a90:	2140      	movs	r1, #64	; 0x40
 8002a92:	f000 fb25 	bl	80030e0 <_malloc_r>
 8002a96:	6028      	str	r0, [r5, #0]
 8002a98:	6128      	str	r0, [r5, #16]
 8002a9a:	b920      	cbnz	r0, 8002aa6 <_svfiprintf_r+0x2e>
 8002a9c:	230c      	movs	r3, #12
 8002a9e:	603b      	str	r3, [r7, #0]
 8002aa0:	f04f 30ff 	mov.w	r0, #4294967295
 8002aa4:	e0d1      	b.n	8002c4a <_svfiprintf_r+0x1d2>
 8002aa6:	2340      	movs	r3, #64	; 0x40
 8002aa8:	616b      	str	r3, [r5, #20]
 8002aaa:	2300      	movs	r3, #0
 8002aac:	9309      	str	r3, [sp, #36]	; 0x24
 8002aae:	2320      	movs	r3, #32
 8002ab0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002ab4:	2330      	movs	r3, #48	; 0x30
 8002ab6:	f04f 0901 	mov.w	r9, #1
 8002aba:	f8cd 800c 	str.w	r8, [sp, #12]
 8002abe:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8002c64 <_svfiprintf_r+0x1ec>
 8002ac2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002ac6:	4623      	mov	r3, r4
 8002ac8:	469a      	mov	sl, r3
 8002aca:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002ace:	b10a      	cbz	r2, 8002ad4 <_svfiprintf_r+0x5c>
 8002ad0:	2a25      	cmp	r2, #37	; 0x25
 8002ad2:	d1f9      	bne.n	8002ac8 <_svfiprintf_r+0x50>
 8002ad4:	ebba 0b04 	subs.w	fp, sl, r4
 8002ad8:	d00b      	beq.n	8002af2 <_svfiprintf_r+0x7a>
 8002ada:	465b      	mov	r3, fp
 8002adc:	4622      	mov	r2, r4
 8002ade:	4629      	mov	r1, r5
 8002ae0:	4638      	mov	r0, r7
 8002ae2:	f7ff ff6d 	bl	80029c0 <__ssputs_r>
 8002ae6:	3001      	adds	r0, #1
 8002ae8:	f000 80aa 	beq.w	8002c40 <_svfiprintf_r+0x1c8>
 8002aec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002aee:	445a      	add	r2, fp
 8002af0:	9209      	str	r2, [sp, #36]	; 0x24
 8002af2:	f89a 3000 	ldrb.w	r3, [sl]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	f000 80a2 	beq.w	8002c40 <_svfiprintf_r+0x1c8>
 8002afc:	2300      	movs	r3, #0
 8002afe:	f04f 32ff 	mov.w	r2, #4294967295
 8002b02:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002b06:	f10a 0a01 	add.w	sl, sl, #1
 8002b0a:	9304      	str	r3, [sp, #16]
 8002b0c:	9307      	str	r3, [sp, #28]
 8002b0e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002b12:	931a      	str	r3, [sp, #104]	; 0x68
 8002b14:	4654      	mov	r4, sl
 8002b16:	2205      	movs	r2, #5
 8002b18:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002b1c:	4851      	ldr	r0, [pc, #324]	; (8002c64 <_svfiprintf_r+0x1ec>)
 8002b1e:	f000 fa41 	bl	8002fa4 <memchr>
 8002b22:	9a04      	ldr	r2, [sp, #16]
 8002b24:	b9d8      	cbnz	r0, 8002b5e <_svfiprintf_r+0xe6>
 8002b26:	06d0      	lsls	r0, r2, #27
 8002b28:	bf44      	itt	mi
 8002b2a:	2320      	movmi	r3, #32
 8002b2c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002b30:	0711      	lsls	r1, r2, #28
 8002b32:	bf44      	itt	mi
 8002b34:	232b      	movmi	r3, #43	; 0x2b
 8002b36:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002b3a:	f89a 3000 	ldrb.w	r3, [sl]
 8002b3e:	2b2a      	cmp	r3, #42	; 0x2a
 8002b40:	d015      	beq.n	8002b6e <_svfiprintf_r+0xf6>
 8002b42:	4654      	mov	r4, sl
 8002b44:	2000      	movs	r0, #0
 8002b46:	f04f 0c0a 	mov.w	ip, #10
 8002b4a:	9a07      	ldr	r2, [sp, #28]
 8002b4c:	4621      	mov	r1, r4
 8002b4e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002b52:	3b30      	subs	r3, #48	; 0x30
 8002b54:	2b09      	cmp	r3, #9
 8002b56:	d94e      	bls.n	8002bf6 <_svfiprintf_r+0x17e>
 8002b58:	b1b0      	cbz	r0, 8002b88 <_svfiprintf_r+0x110>
 8002b5a:	9207      	str	r2, [sp, #28]
 8002b5c:	e014      	b.n	8002b88 <_svfiprintf_r+0x110>
 8002b5e:	eba0 0308 	sub.w	r3, r0, r8
 8002b62:	fa09 f303 	lsl.w	r3, r9, r3
 8002b66:	4313      	orrs	r3, r2
 8002b68:	46a2      	mov	sl, r4
 8002b6a:	9304      	str	r3, [sp, #16]
 8002b6c:	e7d2      	b.n	8002b14 <_svfiprintf_r+0x9c>
 8002b6e:	9b03      	ldr	r3, [sp, #12]
 8002b70:	1d19      	adds	r1, r3, #4
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	9103      	str	r1, [sp, #12]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	bfbb      	ittet	lt
 8002b7a:	425b      	neglt	r3, r3
 8002b7c:	f042 0202 	orrlt.w	r2, r2, #2
 8002b80:	9307      	strge	r3, [sp, #28]
 8002b82:	9307      	strlt	r3, [sp, #28]
 8002b84:	bfb8      	it	lt
 8002b86:	9204      	strlt	r2, [sp, #16]
 8002b88:	7823      	ldrb	r3, [r4, #0]
 8002b8a:	2b2e      	cmp	r3, #46	; 0x2e
 8002b8c:	d10c      	bne.n	8002ba8 <_svfiprintf_r+0x130>
 8002b8e:	7863      	ldrb	r3, [r4, #1]
 8002b90:	2b2a      	cmp	r3, #42	; 0x2a
 8002b92:	d135      	bne.n	8002c00 <_svfiprintf_r+0x188>
 8002b94:	9b03      	ldr	r3, [sp, #12]
 8002b96:	3402      	adds	r4, #2
 8002b98:	1d1a      	adds	r2, r3, #4
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	9203      	str	r2, [sp, #12]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	bfb8      	it	lt
 8002ba2:	f04f 33ff 	movlt.w	r3, #4294967295
 8002ba6:	9305      	str	r3, [sp, #20]
 8002ba8:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8002c68 <_svfiprintf_r+0x1f0>
 8002bac:	2203      	movs	r2, #3
 8002bae:	4650      	mov	r0, sl
 8002bb0:	7821      	ldrb	r1, [r4, #0]
 8002bb2:	f000 f9f7 	bl	8002fa4 <memchr>
 8002bb6:	b140      	cbz	r0, 8002bca <_svfiprintf_r+0x152>
 8002bb8:	2340      	movs	r3, #64	; 0x40
 8002bba:	eba0 000a 	sub.w	r0, r0, sl
 8002bbe:	fa03 f000 	lsl.w	r0, r3, r0
 8002bc2:	9b04      	ldr	r3, [sp, #16]
 8002bc4:	3401      	adds	r4, #1
 8002bc6:	4303      	orrs	r3, r0
 8002bc8:	9304      	str	r3, [sp, #16]
 8002bca:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002bce:	2206      	movs	r2, #6
 8002bd0:	4826      	ldr	r0, [pc, #152]	; (8002c6c <_svfiprintf_r+0x1f4>)
 8002bd2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002bd6:	f000 f9e5 	bl	8002fa4 <memchr>
 8002bda:	2800      	cmp	r0, #0
 8002bdc:	d038      	beq.n	8002c50 <_svfiprintf_r+0x1d8>
 8002bde:	4b24      	ldr	r3, [pc, #144]	; (8002c70 <_svfiprintf_r+0x1f8>)
 8002be0:	bb1b      	cbnz	r3, 8002c2a <_svfiprintf_r+0x1b2>
 8002be2:	9b03      	ldr	r3, [sp, #12]
 8002be4:	3307      	adds	r3, #7
 8002be6:	f023 0307 	bic.w	r3, r3, #7
 8002bea:	3308      	adds	r3, #8
 8002bec:	9303      	str	r3, [sp, #12]
 8002bee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002bf0:	4433      	add	r3, r6
 8002bf2:	9309      	str	r3, [sp, #36]	; 0x24
 8002bf4:	e767      	b.n	8002ac6 <_svfiprintf_r+0x4e>
 8002bf6:	460c      	mov	r4, r1
 8002bf8:	2001      	movs	r0, #1
 8002bfa:	fb0c 3202 	mla	r2, ip, r2, r3
 8002bfe:	e7a5      	b.n	8002b4c <_svfiprintf_r+0xd4>
 8002c00:	2300      	movs	r3, #0
 8002c02:	f04f 0c0a 	mov.w	ip, #10
 8002c06:	4619      	mov	r1, r3
 8002c08:	3401      	adds	r4, #1
 8002c0a:	9305      	str	r3, [sp, #20]
 8002c0c:	4620      	mov	r0, r4
 8002c0e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002c12:	3a30      	subs	r2, #48	; 0x30
 8002c14:	2a09      	cmp	r2, #9
 8002c16:	d903      	bls.n	8002c20 <_svfiprintf_r+0x1a8>
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d0c5      	beq.n	8002ba8 <_svfiprintf_r+0x130>
 8002c1c:	9105      	str	r1, [sp, #20]
 8002c1e:	e7c3      	b.n	8002ba8 <_svfiprintf_r+0x130>
 8002c20:	4604      	mov	r4, r0
 8002c22:	2301      	movs	r3, #1
 8002c24:	fb0c 2101 	mla	r1, ip, r1, r2
 8002c28:	e7f0      	b.n	8002c0c <_svfiprintf_r+0x194>
 8002c2a:	ab03      	add	r3, sp, #12
 8002c2c:	9300      	str	r3, [sp, #0]
 8002c2e:	462a      	mov	r2, r5
 8002c30:	4638      	mov	r0, r7
 8002c32:	4b10      	ldr	r3, [pc, #64]	; (8002c74 <_svfiprintf_r+0x1fc>)
 8002c34:	a904      	add	r1, sp, #16
 8002c36:	f3af 8000 	nop.w
 8002c3a:	1c42      	adds	r2, r0, #1
 8002c3c:	4606      	mov	r6, r0
 8002c3e:	d1d6      	bne.n	8002bee <_svfiprintf_r+0x176>
 8002c40:	89ab      	ldrh	r3, [r5, #12]
 8002c42:	065b      	lsls	r3, r3, #25
 8002c44:	f53f af2c 	bmi.w	8002aa0 <_svfiprintf_r+0x28>
 8002c48:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002c4a:	b01d      	add	sp, #116	; 0x74
 8002c4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002c50:	ab03      	add	r3, sp, #12
 8002c52:	9300      	str	r3, [sp, #0]
 8002c54:	462a      	mov	r2, r5
 8002c56:	4638      	mov	r0, r7
 8002c58:	4b06      	ldr	r3, [pc, #24]	; (8002c74 <_svfiprintf_r+0x1fc>)
 8002c5a:	a904      	add	r1, sp, #16
 8002c5c:	f000 f87c 	bl	8002d58 <_printf_i>
 8002c60:	e7eb      	b.n	8002c3a <_svfiprintf_r+0x1c2>
 8002c62:	bf00      	nop
 8002c64:	080037ac 	.word	0x080037ac
 8002c68:	080037b2 	.word	0x080037b2
 8002c6c:	080037b6 	.word	0x080037b6
 8002c70:	00000000 	.word	0x00000000
 8002c74:	080029c1 	.word	0x080029c1

08002c78 <_printf_common>:
 8002c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002c7c:	4616      	mov	r6, r2
 8002c7e:	4699      	mov	r9, r3
 8002c80:	688a      	ldr	r2, [r1, #8]
 8002c82:	690b      	ldr	r3, [r1, #16]
 8002c84:	4607      	mov	r7, r0
 8002c86:	4293      	cmp	r3, r2
 8002c88:	bfb8      	it	lt
 8002c8a:	4613      	movlt	r3, r2
 8002c8c:	6033      	str	r3, [r6, #0]
 8002c8e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002c92:	460c      	mov	r4, r1
 8002c94:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002c98:	b10a      	cbz	r2, 8002c9e <_printf_common+0x26>
 8002c9a:	3301      	adds	r3, #1
 8002c9c:	6033      	str	r3, [r6, #0]
 8002c9e:	6823      	ldr	r3, [r4, #0]
 8002ca0:	0699      	lsls	r1, r3, #26
 8002ca2:	bf42      	ittt	mi
 8002ca4:	6833      	ldrmi	r3, [r6, #0]
 8002ca6:	3302      	addmi	r3, #2
 8002ca8:	6033      	strmi	r3, [r6, #0]
 8002caa:	6825      	ldr	r5, [r4, #0]
 8002cac:	f015 0506 	ands.w	r5, r5, #6
 8002cb0:	d106      	bne.n	8002cc0 <_printf_common+0x48>
 8002cb2:	f104 0a19 	add.w	sl, r4, #25
 8002cb6:	68e3      	ldr	r3, [r4, #12]
 8002cb8:	6832      	ldr	r2, [r6, #0]
 8002cba:	1a9b      	subs	r3, r3, r2
 8002cbc:	42ab      	cmp	r3, r5
 8002cbe:	dc28      	bgt.n	8002d12 <_printf_common+0x9a>
 8002cc0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002cc4:	1e13      	subs	r3, r2, #0
 8002cc6:	6822      	ldr	r2, [r4, #0]
 8002cc8:	bf18      	it	ne
 8002cca:	2301      	movne	r3, #1
 8002ccc:	0692      	lsls	r2, r2, #26
 8002cce:	d42d      	bmi.n	8002d2c <_printf_common+0xb4>
 8002cd0:	4649      	mov	r1, r9
 8002cd2:	4638      	mov	r0, r7
 8002cd4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002cd8:	47c0      	blx	r8
 8002cda:	3001      	adds	r0, #1
 8002cdc:	d020      	beq.n	8002d20 <_printf_common+0xa8>
 8002cde:	6823      	ldr	r3, [r4, #0]
 8002ce0:	68e5      	ldr	r5, [r4, #12]
 8002ce2:	f003 0306 	and.w	r3, r3, #6
 8002ce6:	2b04      	cmp	r3, #4
 8002ce8:	bf18      	it	ne
 8002cea:	2500      	movne	r5, #0
 8002cec:	6832      	ldr	r2, [r6, #0]
 8002cee:	f04f 0600 	mov.w	r6, #0
 8002cf2:	68a3      	ldr	r3, [r4, #8]
 8002cf4:	bf08      	it	eq
 8002cf6:	1aad      	subeq	r5, r5, r2
 8002cf8:	6922      	ldr	r2, [r4, #16]
 8002cfa:	bf08      	it	eq
 8002cfc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002d00:	4293      	cmp	r3, r2
 8002d02:	bfc4      	itt	gt
 8002d04:	1a9b      	subgt	r3, r3, r2
 8002d06:	18ed      	addgt	r5, r5, r3
 8002d08:	341a      	adds	r4, #26
 8002d0a:	42b5      	cmp	r5, r6
 8002d0c:	d11a      	bne.n	8002d44 <_printf_common+0xcc>
 8002d0e:	2000      	movs	r0, #0
 8002d10:	e008      	b.n	8002d24 <_printf_common+0xac>
 8002d12:	2301      	movs	r3, #1
 8002d14:	4652      	mov	r2, sl
 8002d16:	4649      	mov	r1, r9
 8002d18:	4638      	mov	r0, r7
 8002d1a:	47c0      	blx	r8
 8002d1c:	3001      	adds	r0, #1
 8002d1e:	d103      	bne.n	8002d28 <_printf_common+0xb0>
 8002d20:	f04f 30ff 	mov.w	r0, #4294967295
 8002d24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002d28:	3501      	adds	r5, #1
 8002d2a:	e7c4      	b.n	8002cb6 <_printf_common+0x3e>
 8002d2c:	2030      	movs	r0, #48	; 0x30
 8002d2e:	18e1      	adds	r1, r4, r3
 8002d30:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002d34:	1c5a      	adds	r2, r3, #1
 8002d36:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002d3a:	4422      	add	r2, r4
 8002d3c:	3302      	adds	r3, #2
 8002d3e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002d42:	e7c5      	b.n	8002cd0 <_printf_common+0x58>
 8002d44:	2301      	movs	r3, #1
 8002d46:	4622      	mov	r2, r4
 8002d48:	4649      	mov	r1, r9
 8002d4a:	4638      	mov	r0, r7
 8002d4c:	47c0      	blx	r8
 8002d4e:	3001      	adds	r0, #1
 8002d50:	d0e6      	beq.n	8002d20 <_printf_common+0xa8>
 8002d52:	3601      	adds	r6, #1
 8002d54:	e7d9      	b.n	8002d0a <_printf_common+0x92>
	...

08002d58 <_printf_i>:
 8002d58:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002d5c:	7e0f      	ldrb	r7, [r1, #24]
 8002d5e:	4691      	mov	r9, r2
 8002d60:	2f78      	cmp	r7, #120	; 0x78
 8002d62:	4680      	mov	r8, r0
 8002d64:	460c      	mov	r4, r1
 8002d66:	469a      	mov	sl, r3
 8002d68:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002d6a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8002d6e:	d807      	bhi.n	8002d80 <_printf_i+0x28>
 8002d70:	2f62      	cmp	r7, #98	; 0x62
 8002d72:	d80a      	bhi.n	8002d8a <_printf_i+0x32>
 8002d74:	2f00      	cmp	r7, #0
 8002d76:	f000 80d9 	beq.w	8002f2c <_printf_i+0x1d4>
 8002d7a:	2f58      	cmp	r7, #88	; 0x58
 8002d7c:	f000 80a4 	beq.w	8002ec8 <_printf_i+0x170>
 8002d80:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002d84:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002d88:	e03a      	b.n	8002e00 <_printf_i+0xa8>
 8002d8a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002d8e:	2b15      	cmp	r3, #21
 8002d90:	d8f6      	bhi.n	8002d80 <_printf_i+0x28>
 8002d92:	a101      	add	r1, pc, #4	; (adr r1, 8002d98 <_printf_i+0x40>)
 8002d94:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002d98:	08002df1 	.word	0x08002df1
 8002d9c:	08002e05 	.word	0x08002e05
 8002da0:	08002d81 	.word	0x08002d81
 8002da4:	08002d81 	.word	0x08002d81
 8002da8:	08002d81 	.word	0x08002d81
 8002dac:	08002d81 	.word	0x08002d81
 8002db0:	08002e05 	.word	0x08002e05
 8002db4:	08002d81 	.word	0x08002d81
 8002db8:	08002d81 	.word	0x08002d81
 8002dbc:	08002d81 	.word	0x08002d81
 8002dc0:	08002d81 	.word	0x08002d81
 8002dc4:	08002f13 	.word	0x08002f13
 8002dc8:	08002e35 	.word	0x08002e35
 8002dcc:	08002ef5 	.word	0x08002ef5
 8002dd0:	08002d81 	.word	0x08002d81
 8002dd4:	08002d81 	.word	0x08002d81
 8002dd8:	08002f35 	.word	0x08002f35
 8002ddc:	08002d81 	.word	0x08002d81
 8002de0:	08002e35 	.word	0x08002e35
 8002de4:	08002d81 	.word	0x08002d81
 8002de8:	08002d81 	.word	0x08002d81
 8002dec:	08002efd 	.word	0x08002efd
 8002df0:	682b      	ldr	r3, [r5, #0]
 8002df2:	1d1a      	adds	r2, r3, #4
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	602a      	str	r2, [r5, #0]
 8002df8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002dfc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002e00:	2301      	movs	r3, #1
 8002e02:	e0a4      	b.n	8002f4e <_printf_i+0x1f6>
 8002e04:	6820      	ldr	r0, [r4, #0]
 8002e06:	6829      	ldr	r1, [r5, #0]
 8002e08:	0606      	lsls	r6, r0, #24
 8002e0a:	f101 0304 	add.w	r3, r1, #4
 8002e0e:	d50a      	bpl.n	8002e26 <_printf_i+0xce>
 8002e10:	680e      	ldr	r6, [r1, #0]
 8002e12:	602b      	str	r3, [r5, #0]
 8002e14:	2e00      	cmp	r6, #0
 8002e16:	da03      	bge.n	8002e20 <_printf_i+0xc8>
 8002e18:	232d      	movs	r3, #45	; 0x2d
 8002e1a:	4276      	negs	r6, r6
 8002e1c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002e20:	230a      	movs	r3, #10
 8002e22:	485e      	ldr	r0, [pc, #376]	; (8002f9c <_printf_i+0x244>)
 8002e24:	e019      	b.n	8002e5a <_printf_i+0x102>
 8002e26:	680e      	ldr	r6, [r1, #0]
 8002e28:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002e2c:	602b      	str	r3, [r5, #0]
 8002e2e:	bf18      	it	ne
 8002e30:	b236      	sxthne	r6, r6
 8002e32:	e7ef      	b.n	8002e14 <_printf_i+0xbc>
 8002e34:	682b      	ldr	r3, [r5, #0]
 8002e36:	6820      	ldr	r0, [r4, #0]
 8002e38:	1d19      	adds	r1, r3, #4
 8002e3a:	6029      	str	r1, [r5, #0]
 8002e3c:	0601      	lsls	r1, r0, #24
 8002e3e:	d501      	bpl.n	8002e44 <_printf_i+0xec>
 8002e40:	681e      	ldr	r6, [r3, #0]
 8002e42:	e002      	b.n	8002e4a <_printf_i+0xf2>
 8002e44:	0646      	lsls	r6, r0, #25
 8002e46:	d5fb      	bpl.n	8002e40 <_printf_i+0xe8>
 8002e48:	881e      	ldrh	r6, [r3, #0]
 8002e4a:	2f6f      	cmp	r7, #111	; 0x6f
 8002e4c:	bf0c      	ite	eq
 8002e4e:	2308      	moveq	r3, #8
 8002e50:	230a      	movne	r3, #10
 8002e52:	4852      	ldr	r0, [pc, #328]	; (8002f9c <_printf_i+0x244>)
 8002e54:	2100      	movs	r1, #0
 8002e56:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002e5a:	6865      	ldr	r5, [r4, #4]
 8002e5c:	2d00      	cmp	r5, #0
 8002e5e:	bfa8      	it	ge
 8002e60:	6821      	ldrge	r1, [r4, #0]
 8002e62:	60a5      	str	r5, [r4, #8]
 8002e64:	bfa4      	itt	ge
 8002e66:	f021 0104 	bicge.w	r1, r1, #4
 8002e6a:	6021      	strge	r1, [r4, #0]
 8002e6c:	b90e      	cbnz	r6, 8002e72 <_printf_i+0x11a>
 8002e6e:	2d00      	cmp	r5, #0
 8002e70:	d04d      	beq.n	8002f0e <_printf_i+0x1b6>
 8002e72:	4615      	mov	r5, r2
 8002e74:	fbb6 f1f3 	udiv	r1, r6, r3
 8002e78:	fb03 6711 	mls	r7, r3, r1, r6
 8002e7c:	5dc7      	ldrb	r7, [r0, r7]
 8002e7e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8002e82:	4637      	mov	r7, r6
 8002e84:	42bb      	cmp	r3, r7
 8002e86:	460e      	mov	r6, r1
 8002e88:	d9f4      	bls.n	8002e74 <_printf_i+0x11c>
 8002e8a:	2b08      	cmp	r3, #8
 8002e8c:	d10b      	bne.n	8002ea6 <_printf_i+0x14e>
 8002e8e:	6823      	ldr	r3, [r4, #0]
 8002e90:	07de      	lsls	r6, r3, #31
 8002e92:	d508      	bpl.n	8002ea6 <_printf_i+0x14e>
 8002e94:	6923      	ldr	r3, [r4, #16]
 8002e96:	6861      	ldr	r1, [r4, #4]
 8002e98:	4299      	cmp	r1, r3
 8002e9a:	bfde      	ittt	le
 8002e9c:	2330      	movle	r3, #48	; 0x30
 8002e9e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002ea2:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002ea6:	1b52      	subs	r2, r2, r5
 8002ea8:	6122      	str	r2, [r4, #16]
 8002eaa:	464b      	mov	r3, r9
 8002eac:	4621      	mov	r1, r4
 8002eae:	4640      	mov	r0, r8
 8002eb0:	f8cd a000 	str.w	sl, [sp]
 8002eb4:	aa03      	add	r2, sp, #12
 8002eb6:	f7ff fedf 	bl	8002c78 <_printf_common>
 8002eba:	3001      	adds	r0, #1
 8002ebc:	d14c      	bne.n	8002f58 <_printf_i+0x200>
 8002ebe:	f04f 30ff 	mov.w	r0, #4294967295
 8002ec2:	b004      	add	sp, #16
 8002ec4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002ec8:	4834      	ldr	r0, [pc, #208]	; (8002f9c <_printf_i+0x244>)
 8002eca:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8002ece:	6829      	ldr	r1, [r5, #0]
 8002ed0:	6823      	ldr	r3, [r4, #0]
 8002ed2:	f851 6b04 	ldr.w	r6, [r1], #4
 8002ed6:	6029      	str	r1, [r5, #0]
 8002ed8:	061d      	lsls	r5, r3, #24
 8002eda:	d514      	bpl.n	8002f06 <_printf_i+0x1ae>
 8002edc:	07df      	lsls	r7, r3, #31
 8002ede:	bf44      	itt	mi
 8002ee0:	f043 0320 	orrmi.w	r3, r3, #32
 8002ee4:	6023      	strmi	r3, [r4, #0]
 8002ee6:	b91e      	cbnz	r6, 8002ef0 <_printf_i+0x198>
 8002ee8:	6823      	ldr	r3, [r4, #0]
 8002eea:	f023 0320 	bic.w	r3, r3, #32
 8002eee:	6023      	str	r3, [r4, #0]
 8002ef0:	2310      	movs	r3, #16
 8002ef2:	e7af      	b.n	8002e54 <_printf_i+0xfc>
 8002ef4:	6823      	ldr	r3, [r4, #0]
 8002ef6:	f043 0320 	orr.w	r3, r3, #32
 8002efa:	6023      	str	r3, [r4, #0]
 8002efc:	2378      	movs	r3, #120	; 0x78
 8002efe:	4828      	ldr	r0, [pc, #160]	; (8002fa0 <_printf_i+0x248>)
 8002f00:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002f04:	e7e3      	b.n	8002ece <_printf_i+0x176>
 8002f06:	0659      	lsls	r1, r3, #25
 8002f08:	bf48      	it	mi
 8002f0a:	b2b6      	uxthmi	r6, r6
 8002f0c:	e7e6      	b.n	8002edc <_printf_i+0x184>
 8002f0e:	4615      	mov	r5, r2
 8002f10:	e7bb      	b.n	8002e8a <_printf_i+0x132>
 8002f12:	682b      	ldr	r3, [r5, #0]
 8002f14:	6826      	ldr	r6, [r4, #0]
 8002f16:	1d18      	adds	r0, r3, #4
 8002f18:	6961      	ldr	r1, [r4, #20]
 8002f1a:	6028      	str	r0, [r5, #0]
 8002f1c:	0635      	lsls	r5, r6, #24
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	d501      	bpl.n	8002f26 <_printf_i+0x1ce>
 8002f22:	6019      	str	r1, [r3, #0]
 8002f24:	e002      	b.n	8002f2c <_printf_i+0x1d4>
 8002f26:	0670      	lsls	r0, r6, #25
 8002f28:	d5fb      	bpl.n	8002f22 <_printf_i+0x1ca>
 8002f2a:	8019      	strh	r1, [r3, #0]
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	4615      	mov	r5, r2
 8002f30:	6123      	str	r3, [r4, #16]
 8002f32:	e7ba      	b.n	8002eaa <_printf_i+0x152>
 8002f34:	682b      	ldr	r3, [r5, #0]
 8002f36:	2100      	movs	r1, #0
 8002f38:	1d1a      	adds	r2, r3, #4
 8002f3a:	602a      	str	r2, [r5, #0]
 8002f3c:	681d      	ldr	r5, [r3, #0]
 8002f3e:	6862      	ldr	r2, [r4, #4]
 8002f40:	4628      	mov	r0, r5
 8002f42:	f000 f82f 	bl	8002fa4 <memchr>
 8002f46:	b108      	cbz	r0, 8002f4c <_printf_i+0x1f4>
 8002f48:	1b40      	subs	r0, r0, r5
 8002f4a:	6060      	str	r0, [r4, #4]
 8002f4c:	6863      	ldr	r3, [r4, #4]
 8002f4e:	6123      	str	r3, [r4, #16]
 8002f50:	2300      	movs	r3, #0
 8002f52:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002f56:	e7a8      	b.n	8002eaa <_printf_i+0x152>
 8002f58:	462a      	mov	r2, r5
 8002f5a:	4649      	mov	r1, r9
 8002f5c:	4640      	mov	r0, r8
 8002f5e:	6923      	ldr	r3, [r4, #16]
 8002f60:	47d0      	blx	sl
 8002f62:	3001      	adds	r0, #1
 8002f64:	d0ab      	beq.n	8002ebe <_printf_i+0x166>
 8002f66:	6823      	ldr	r3, [r4, #0]
 8002f68:	079b      	lsls	r3, r3, #30
 8002f6a:	d413      	bmi.n	8002f94 <_printf_i+0x23c>
 8002f6c:	68e0      	ldr	r0, [r4, #12]
 8002f6e:	9b03      	ldr	r3, [sp, #12]
 8002f70:	4298      	cmp	r0, r3
 8002f72:	bfb8      	it	lt
 8002f74:	4618      	movlt	r0, r3
 8002f76:	e7a4      	b.n	8002ec2 <_printf_i+0x16a>
 8002f78:	2301      	movs	r3, #1
 8002f7a:	4632      	mov	r2, r6
 8002f7c:	4649      	mov	r1, r9
 8002f7e:	4640      	mov	r0, r8
 8002f80:	47d0      	blx	sl
 8002f82:	3001      	adds	r0, #1
 8002f84:	d09b      	beq.n	8002ebe <_printf_i+0x166>
 8002f86:	3501      	adds	r5, #1
 8002f88:	68e3      	ldr	r3, [r4, #12]
 8002f8a:	9903      	ldr	r1, [sp, #12]
 8002f8c:	1a5b      	subs	r3, r3, r1
 8002f8e:	42ab      	cmp	r3, r5
 8002f90:	dcf2      	bgt.n	8002f78 <_printf_i+0x220>
 8002f92:	e7eb      	b.n	8002f6c <_printf_i+0x214>
 8002f94:	2500      	movs	r5, #0
 8002f96:	f104 0619 	add.w	r6, r4, #25
 8002f9a:	e7f5      	b.n	8002f88 <_printf_i+0x230>
 8002f9c:	080037bd 	.word	0x080037bd
 8002fa0:	080037ce 	.word	0x080037ce

08002fa4 <memchr>:
 8002fa4:	4603      	mov	r3, r0
 8002fa6:	b510      	push	{r4, lr}
 8002fa8:	b2c9      	uxtb	r1, r1
 8002faa:	4402      	add	r2, r0
 8002fac:	4293      	cmp	r3, r2
 8002fae:	4618      	mov	r0, r3
 8002fb0:	d101      	bne.n	8002fb6 <memchr+0x12>
 8002fb2:	2000      	movs	r0, #0
 8002fb4:	e003      	b.n	8002fbe <memchr+0x1a>
 8002fb6:	7804      	ldrb	r4, [r0, #0]
 8002fb8:	3301      	adds	r3, #1
 8002fba:	428c      	cmp	r4, r1
 8002fbc:	d1f6      	bne.n	8002fac <memchr+0x8>
 8002fbe:	bd10      	pop	{r4, pc}

08002fc0 <memcpy>:
 8002fc0:	440a      	add	r2, r1
 8002fc2:	4291      	cmp	r1, r2
 8002fc4:	f100 33ff 	add.w	r3, r0, #4294967295
 8002fc8:	d100      	bne.n	8002fcc <memcpy+0xc>
 8002fca:	4770      	bx	lr
 8002fcc:	b510      	push	{r4, lr}
 8002fce:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002fd2:	4291      	cmp	r1, r2
 8002fd4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002fd8:	d1f9      	bne.n	8002fce <memcpy+0xe>
 8002fda:	bd10      	pop	{r4, pc}

08002fdc <memmove>:
 8002fdc:	4288      	cmp	r0, r1
 8002fde:	b510      	push	{r4, lr}
 8002fe0:	eb01 0402 	add.w	r4, r1, r2
 8002fe4:	d902      	bls.n	8002fec <memmove+0x10>
 8002fe6:	4284      	cmp	r4, r0
 8002fe8:	4623      	mov	r3, r4
 8002fea:	d807      	bhi.n	8002ffc <memmove+0x20>
 8002fec:	1e43      	subs	r3, r0, #1
 8002fee:	42a1      	cmp	r1, r4
 8002ff0:	d008      	beq.n	8003004 <memmove+0x28>
 8002ff2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002ff6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8002ffa:	e7f8      	b.n	8002fee <memmove+0x12>
 8002ffc:	4601      	mov	r1, r0
 8002ffe:	4402      	add	r2, r0
 8003000:	428a      	cmp	r2, r1
 8003002:	d100      	bne.n	8003006 <memmove+0x2a>
 8003004:	bd10      	pop	{r4, pc}
 8003006:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800300a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800300e:	e7f7      	b.n	8003000 <memmove+0x24>

08003010 <_free_r>:
 8003010:	b538      	push	{r3, r4, r5, lr}
 8003012:	4605      	mov	r5, r0
 8003014:	2900      	cmp	r1, #0
 8003016:	d040      	beq.n	800309a <_free_r+0x8a>
 8003018:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800301c:	1f0c      	subs	r4, r1, #4
 800301e:	2b00      	cmp	r3, #0
 8003020:	bfb8      	it	lt
 8003022:	18e4      	addlt	r4, r4, r3
 8003024:	f000 f910 	bl	8003248 <__malloc_lock>
 8003028:	4a1c      	ldr	r2, [pc, #112]	; (800309c <_free_r+0x8c>)
 800302a:	6813      	ldr	r3, [r2, #0]
 800302c:	b933      	cbnz	r3, 800303c <_free_r+0x2c>
 800302e:	6063      	str	r3, [r4, #4]
 8003030:	6014      	str	r4, [r2, #0]
 8003032:	4628      	mov	r0, r5
 8003034:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003038:	f000 b90c 	b.w	8003254 <__malloc_unlock>
 800303c:	42a3      	cmp	r3, r4
 800303e:	d908      	bls.n	8003052 <_free_r+0x42>
 8003040:	6820      	ldr	r0, [r4, #0]
 8003042:	1821      	adds	r1, r4, r0
 8003044:	428b      	cmp	r3, r1
 8003046:	bf01      	itttt	eq
 8003048:	6819      	ldreq	r1, [r3, #0]
 800304a:	685b      	ldreq	r3, [r3, #4]
 800304c:	1809      	addeq	r1, r1, r0
 800304e:	6021      	streq	r1, [r4, #0]
 8003050:	e7ed      	b.n	800302e <_free_r+0x1e>
 8003052:	461a      	mov	r2, r3
 8003054:	685b      	ldr	r3, [r3, #4]
 8003056:	b10b      	cbz	r3, 800305c <_free_r+0x4c>
 8003058:	42a3      	cmp	r3, r4
 800305a:	d9fa      	bls.n	8003052 <_free_r+0x42>
 800305c:	6811      	ldr	r1, [r2, #0]
 800305e:	1850      	adds	r0, r2, r1
 8003060:	42a0      	cmp	r0, r4
 8003062:	d10b      	bne.n	800307c <_free_r+0x6c>
 8003064:	6820      	ldr	r0, [r4, #0]
 8003066:	4401      	add	r1, r0
 8003068:	1850      	adds	r0, r2, r1
 800306a:	4283      	cmp	r3, r0
 800306c:	6011      	str	r1, [r2, #0]
 800306e:	d1e0      	bne.n	8003032 <_free_r+0x22>
 8003070:	6818      	ldr	r0, [r3, #0]
 8003072:	685b      	ldr	r3, [r3, #4]
 8003074:	4401      	add	r1, r0
 8003076:	6011      	str	r1, [r2, #0]
 8003078:	6053      	str	r3, [r2, #4]
 800307a:	e7da      	b.n	8003032 <_free_r+0x22>
 800307c:	d902      	bls.n	8003084 <_free_r+0x74>
 800307e:	230c      	movs	r3, #12
 8003080:	602b      	str	r3, [r5, #0]
 8003082:	e7d6      	b.n	8003032 <_free_r+0x22>
 8003084:	6820      	ldr	r0, [r4, #0]
 8003086:	1821      	adds	r1, r4, r0
 8003088:	428b      	cmp	r3, r1
 800308a:	bf01      	itttt	eq
 800308c:	6819      	ldreq	r1, [r3, #0]
 800308e:	685b      	ldreq	r3, [r3, #4]
 8003090:	1809      	addeq	r1, r1, r0
 8003092:	6021      	streq	r1, [r4, #0]
 8003094:	6063      	str	r3, [r4, #4]
 8003096:	6054      	str	r4, [r2, #4]
 8003098:	e7cb      	b.n	8003032 <_free_r+0x22>
 800309a:	bd38      	pop	{r3, r4, r5, pc}
 800309c:	200001fc 	.word	0x200001fc

080030a0 <sbrk_aligned>:
 80030a0:	b570      	push	{r4, r5, r6, lr}
 80030a2:	4e0e      	ldr	r6, [pc, #56]	; (80030dc <sbrk_aligned+0x3c>)
 80030a4:	460c      	mov	r4, r1
 80030a6:	6831      	ldr	r1, [r6, #0]
 80030a8:	4605      	mov	r5, r0
 80030aa:	b911      	cbnz	r1, 80030b2 <sbrk_aligned+0x12>
 80030ac:	f000 f8bc 	bl	8003228 <_sbrk_r>
 80030b0:	6030      	str	r0, [r6, #0]
 80030b2:	4621      	mov	r1, r4
 80030b4:	4628      	mov	r0, r5
 80030b6:	f000 f8b7 	bl	8003228 <_sbrk_r>
 80030ba:	1c43      	adds	r3, r0, #1
 80030bc:	d00a      	beq.n	80030d4 <sbrk_aligned+0x34>
 80030be:	1cc4      	adds	r4, r0, #3
 80030c0:	f024 0403 	bic.w	r4, r4, #3
 80030c4:	42a0      	cmp	r0, r4
 80030c6:	d007      	beq.n	80030d8 <sbrk_aligned+0x38>
 80030c8:	1a21      	subs	r1, r4, r0
 80030ca:	4628      	mov	r0, r5
 80030cc:	f000 f8ac 	bl	8003228 <_sbrk_r>
 80030d0:	3001      	adds	r0, #1
 80030d2:	d101      	bne.n	80030d8 <sbrk_aligned+0x38>
 80030d4:	f04f 34ff 	mov.w	r4, #4294967295
 80030d8:	4620      	mov	r0, r4
 80030da:	bd70      	pop	{r4, r5, r6, pc}
 80030dc:	20000200 	.word	0x20000200

080030e0 <_malloc_r>:
 80030e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80030e4:	1ccd      	adds	r5, r1, #3
 80030e6:	f025 0503 	bic.w	r5, r5, #3
 80030ea:	3508      	adds	r5, #8
 80030ec:	2d0c      	cmp	r5, #12
 80030ee:	bf38      	it	cc
 80030f0:	250c      	movcc	r5, #12
 80030f2:	2d00      	cmp	r5, #0
 80030f4:	4607      	mov	r7, r0
 80030f6:	db01      	blt.n	80030fc <_malloc_r+0x1c>
 80030f8:	42a9      	cmp	r1, r5
 80030fa:	d905      	bls.n	8003108 <_malloc_r+0x28>
 80030fc:	230c      	movs	r3, #12
 80030fe:	2600      	movs	r6, #0
 8003100:	603b      	str	r3, [r7, #0]
 8003102:	4630      	mov	r0, r6
 8003104:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003108:	4e2e      	ldr	r6, [pc, #184]	; (80031c4 <_malloc_r+0xe4>)
 800310a:	f000 f89d 	bl	8003248 <__malloc_lock>
 800310e:	6833      	ldr	r3, [r6, #0]
 8003110:	461c      	mov	r4, r3
 8003112:	bb34      	cbnz	r4, 8003162 <_malloc_r+0x82>
 8003114:	4629      	mov	r1, r5
 8003116:	4638      	mov	r0, r7
 8003118:	f7ff ffc2 	bl	80030a0 <sbrk_aligned>
 800311c:	1c43      	adds	r3, r0, #1
 800311e:	4604      	mov	r4, r0
 8003120:	d14d      	bne.n	80031be <_malloc_r+0xde>
 8003122:	6834      	ldr	r4, [r6, #0]
 8003124:	4626      	mov	r6, r4
 8003126:	2e00      	cmp	r6, #0
 8003128:	d140      	bne.n	80031ac <_malloc_r+0xcc>
 800312a:	6823      	ldr	r3, [r4, #0]
 800312c:	4631      	mov	r1, r6
 800312e:	4638      	mov	r0, r7
 8003130:	eb04 0803 	add.w	r8, r4, r3
 8003134:	f000 f878 	bl	8003228 <_sbrk_r>
 8003138:	4580      	cmp	r8, r0
 800313a:	d13a      	bne.n	80031b2 <_malloc_r+0xd2>
 800313c:	6821      	ldr	r1, [r4, #0]
 800313e:	3503      	adds	r5, #3
 8003140:	1a6d      	subs	r5, r5, r1
 8003142:	f025 0503 	bic.w	r5, r5, #3
 8003146:	3508      	adds	r5, #8
 8003148:	2d0c      	cmp	r5, #12
 800314a:	bf38      	it	cc
 800314c:	250c      	movcc	r5, #12
 800314e:	4638      	mov	r0, r7
 8003150:	4629      	mov	r1, r5
 8003152:	f7ff ffa5 	bl	80030a0 <sbrk_aligned>
 8003156:	3001      	adds	r0, #1
 8003158:	d02b      	beq.n	80031b2 <_malloc_r+0xd2>
 800315a:	6823      	ldr	r3, [r4, #0]
 800315c:	442b      	add	r3, r5
 800315e:	6023      	str	r3, [r4, #0]
 8003160:	e00e      	b.n	8003180 <_malloc_r+0xa0>
 8003162:	6822      	ldr	r2, [r4, #0]
 8003164:	1b52      	subs	r2, r2, r5
 8003166:	d41e      	bmi.n	80031a6 <_malloc_r+0xc6>
 8003168:	2a0b      	cmp	r2, #11
 800316a:	d916      	bls.n	800319a <_malloc_r+0xba>
 800316c:	1961      	adds	r1, r4, r5
 800316e:	42a3      	cmp	r3, r4
 8003170:	6025      	str	r5, [r4, #0]
 8003172:	bf18      	it	ne
 8003174:	6059      	strne	r1, [r3, #4]
 8003176:	6863      	ldr	r3, [r4, #4]
 8003178:	bf08      	it	eq
 800317a:	6031      	streq	r1, [r6, #0]
 800317c:	5162      	str	r2, [r4, r5]
 800317e:	604b      	str	r3, [r1, #4]
 8003180:	4638      	mov	r0, r7
 8003182:	f104 060b 	add.w	r6, r4, #11
 8003186:	f000 f865 	bl	8003254 <__malloc_unlock>
 800318a:	f026 0607 	bic.w	r6, r6, #7
 800318e:	1d23      	adds	r3, r4, #4
 8003190:	1af2      	subs	r2, r6, r3
 8003192:	d0b6      	beq.n	8003102 <_malloc_r+0x22>
 8003194:	1b9b      	subs	r3, r3, r6
 8003196:	50a3      	str	r3, [r4, r2]
 8003198:	e7b3      	b.n	8003102 <_malloc_r+0x22>
 800319a:	6862      	ldr	r2, [r4, #4]
 800319c:	42a3      	cmp	r3, r4
 800319e:	bf0c      	ite	eq
 80031a0:	6032      	streq	r2, [r6, #0]
 80031a2:	605a      	strne	r2, [r3, #4]
 80031a4:	e7ec      	b.n	8003180 <_malloc_r+0xa0>
 80031a6:	4623      	mov	r3, r4
 80031a8:	6864      	ldr	r4, [r4, #4]
 80031aa:	e7b2      	b.n	8003112 <_malloc_r+0x32>
 80031ac:	4634      	mov	r4, r6
 80031ae:	6876      	ldr	r6, [r6, #4]
 80031b0:	e7b9      	b.n	8003126 <_malloc_r+0x46>
 80031b2:	230c      	movs	r3, #12
 80031b4:	4638      	mov	r0, r7
 80031b6:	603b      	str	r3, [r7, #0]
 80031b8:	f000 f84c 	bl	8003254 <__malloc_unlock>
 80031bc:	e7a1      	b.n	8003102 <_malloc_r+0x22>
 80031be:	6025      	str	r5, [r4, #0]
 80031c0:	e7de      	b.n	8003180 <_malloc_r+0xa0>
 80031c2:	bf00      	nop
 80031c4:	200001fc 	.word	0x200001fc

080031c8 <_realloc_r>:
 80031c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80031cc:	4680      	mov	r8, r0
 80031ce:	4614      	mov	r4, r2
 80031d0:	460e      	mov	r6, r1
 80031d2:	b921      	cbnz	r1, 80031de <_realloc_r+0x16>
 80031d4:	4611      	mov	r1, r2
 80031d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80031da:	f7ff bf81 	b.w	80030e0 <_malloc_r>
 80031de:	b92a      	cbnz	r2, 80031ec <_realloc_r+0x24>
 80031e0:	f7ff ff16 	bl	8003010 <_free_r>
 80031e4:	4625      	mov	r5, r4
 80031e6:	4628      	mov	r0, r5
 80031e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80031ec:	f000 f838 	bl	8003260 <_malloc_usable_size_r>
 80031f0:	4284      	cmp	r4, r0
 80031f2:	4607      	mov	r7, r0
 80031f4:	d802      	bhi.n	80031fc <_realloc_r+0x34>
 80031f6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80031fa:	d812      	bhi.n	8003222 <_realloc_r+0x5a>
 80031fc:	4621      	mov	r1, r4
 80031fe:	4640      	mov	r0, r8
 8003200:	f7ff ff6e 	bl	80030e0 <_malloc_r>
 8003204:	4605      	mov	r5, r0
 8003206:	2800      	cmp	r0, #0
 8003208:	d0ed      	beq.n	80031e6 <_realloc_r+0x1e>
 800320a:	42bc      	cmp	r4, r7
 800320c:	4622      	mov	r2, r4
 800320e:	4631      	mov	r1, r6
 8003210:	bf28      	it	cs
 8003212:	463a      	movcs	r2, r7
 8003214:	f7ff fed4 	bl	8002fc0 <memcpy>
 8003218:	4631      	mov	r1, r6
 800321a:	4640      	mov	r0, r8
 800321c:	f7ff fef8 	bl	8003010 <_free_r>
 8003220:	e7e1      	b.n	80031e6 <_realloc_r+0x1e>
 8003222:	4635      	mov	r5, r6
 8003224:	e7df      	b.n	80031e6 <_realloc_r+0x1e>
	...

08003228 <_sbrk_r>:
 8003228:	b538      	push	{r3, r4, r5, lr}
 800322a:	2300      	movs	r3, #0
 800322c:	4d05      	ldr	r5, [pc, #20]	; (8003244 <_sbrk_r+0x1c>)
 800322e:	4604      	mov	r4, r0
 8003230:	4608      	mov	r0, r1
 8003232:	602b      	str	r3, [r5, #0]
 8003234:	f7fe f94a 	bl	80014cc <_sbrk>
 8003238:	1c43      	adds	r3, r0, #1
 800323a:	d102      	bne.n	8003242 <_sbrk_r+0x1a>
 800323c:	682b      	ldr	r3, [r5, #0]
 800323e:	b103      	cbz	r3, 8003242 <_sbrk_r+0x1a>
 8003240:	6023      	str	r3, [r4, #0]
 8003242:	bd38      	pop	{r3, r4, r5, pc}
 8003244:	20000204 	.word	0x20000204

08003248 <__malloc_lock>:
 8003248:	4801      	ldr	r0, [pc, #4]	; (8003250 <__malloc_lock+0x8>)
 800324a:	f000 b811 	b.w	8003270 <__retarget_lock_acquire_recursive>
 800324e:	bf00      	nop
 8003250:	20000208 	.word	0x20000208

08003254 <__malloc_unlock>:
 8003254:	4801      	ldr	r0, [pc, #4]	; (800325c <__malloc_unlock+0x8>)
 8003256:	f000 b80c 	b.w	8003272 <__retarget_lock_release_recursive>
 800325a:	bf00      	nop
 800325c:	20000208 	.word	0x20000208

08003260 <_malloc_usable_size_r>:
 8003260:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003264:	1f18      	subs	r0, r3, #4
 8003266:	2b00      	cmp	r3, #0
 8003268:	bfbc      	itt	lt
 800326a:	580b      	ldrlt	r3, [r1, r0]
 800326c:	18c0      	addlt	r0, r0, r3
 800326e:	4770      	bx	lr

08003270 <__retarget_lock_acquire_recursive>:
 8003270:	4770      	bx	lr

08003272 <__retarget_lock_release_recursive>:
 8003272:	4770      	bx	lr

08003274 <_init>:
 8003274:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003276:	bf00      	nop
 8003278:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800327a:	bc08      	pop	{r3}
 800327c:	469e      	mov	lr, r3
 800327e:	4770      	bx	lr

08003280 <_fini>:
 8003280:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003282:	bf00      	nop
 8003284:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003286:	bc08      	pop	{r3}
 8003288:	469e      	mov	lr, r3
 800328a:	4770      	bx	lr
